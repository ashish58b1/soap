<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="d3678940-9bd9-4b19-86e1-a54aa446b5e9" activeEnvironment="Default" name="IEN - Load TestCases into TestRail" resourceRoot="${projectDir}" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="Upload Cases - IEN"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="Upload Cases - Strategy 115"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting>
  </con:settings>
  <con:interface xsi:type="con:RestService" id="6a95e1c8-ee0e-41f9-aa40-68d06cdfdc4f" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://testrail.uat.uk.experian.local" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
    </con:endpoints>
    <con:resource name="Add Case" path="/index.php?/api/v2/add_case/1884" id="9bd3010f-39d9-4157-aa6e-bb10d722e2f8">
      <con:settings/>
      <con:parameters/>
      <con:method name="Index.php 1" id="7f716d53-7384-45c4-a737-59d64e7b8671" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" id="a7428def-60d1-49f8-af6b-59ee83032f25" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "PM Request - Result Code",
			"expected": "${Properties - Aux Vars#resultCode}"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Get Cases" path="/index.php?/api/v2/get_cases/38&amp;suite_id=1884" id="50b5dde9-6e01-4cd0-a612-d76eb246e2d7">
      <con:settings/>
      <con:parameters/>
      <con:method name="Method 1" id="0fb4763c-6e7b-46e2-bb08-85e9e23bb12c" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:xht="http://www.w3.org/1999/xhtml">xht:html</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>401 400</con:status>
          <con:params/>
          <con:element xmlns:ind="https://testrail.uat.uk.experian.local/index.php">ind:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>Response</con:element>
        </con:representation>
        <con:request name="Request 1" id="a16906de-f230-4928-9810-2f32ff426dfa" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
          <con:request/>
          <con:originalUri>https://testrail.uat.uk.experian.local/index.php</con:originalUri>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Get Sections" path="/index.php?/api/v2/get_sections/38&amp;suite_id=1885" id="429801f3-5af0-4af5-a2ef-78d30ab930a3">
      <con:settings/>
      <con:parameters/>
      <con:method name="Method 1" id="2e9afae5-dadb-4722-9031-35c27cfa84cb" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>400 401</con:status>
          <con:params/>
          <con:element xmlns:ind="https://testrail.uat.uk.experian.local/index.php">ind:Fault</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>Response</con:element>
        </con:representation>
        <con:request name="Request 1" id="23bb03bf-2b9f-4a6c-b1fa-7d487054227f" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
          <con:request/>
          <con:originalUri>https://testrail.uat.uk.experian.local/index.php</con:originalUri>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Get Users" path="/index.php?/api/v2/get_users" id="c08ba4b3-a95b-42aa-8d60-2589ae982b06">
      <con:settings/>
      <con:parameters/>
      <con:method name="Method 1" id="916e8b28-6bbb-47c1-aa4e-f13857a7304c" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:xht="http://www.w3.org/1999/xhtml">xht:html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:ind="https://testrail.uat.uk.experian.local/index.php">ind:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="232385ac-6c1d-4812-a31a-3862cb6a2cf0" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
          <con:request/>
          <con:originalUri>https://testrail.uat.uk.experian.local/index.php</con:originalUri>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Get All Sections in Suite" path="/index.php?/api/v2/get_sections/38&amp;suite_id=1884" id="1f5b562e-ec95-4ea9-812d-4f89ad5c25ad">
      <con:settings/>
      <con:parameters/>
      <con:method name="Method 1" id="0655d341-bedc-4554-80d4-295bbfa58061" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" id="25324ed9-1300-4d49-8a8a-80b93ab329a6" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Get Cases from Suite" path="/index.php?/api/v2/get_cases/38&amp;suite_id=1884&amp;section_id={Section_ID}" id="70033d2b-8619-44bd-b793-87bcdecf051d">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>Section_ID</con:name>
          <con:style>TEMPLATE</con:style>
        </con:parameter>
      </con:parameters>
      <con:method name="Method 1" id="4af6b047-a6f3-4f45-83e4-d064d5982c8b" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
          <con:element xmlns:ind="https://testrail.uat.uk.experian.local/index.php">ind:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>Response</con:element>
        </con:representation>
        <con:request name="Request 1" id="26222fe9-0ace-4e7e-b1cc-55047ca4d9a1" mediaType="application/json">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>Section_ID</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="eaa6e6a8-6913-4662-a1c7-41e1295cd8f5" name="Upload Cases - IEN">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="3d674dba-7616-4f9c-9fea-9fa93a800b81" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - BASE" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="4b32edee-f0db-4164-af02-a0eaa9c81acc">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("OTP", "" )
auxVarsTestStep.setPropertyValue("check_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("MON_2040_ADVRSN_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("STAT_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("error_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Completion_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Check_USAGE_REPORT_USAGE_REPORT", "" )
auxVarsTestStep.setPropertyValue("Check_Billing_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("mfaIn1rstResponse", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_REQUEST", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_RESPONSE", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="ded9c2aa-8477-4411-8ca1-e96ae0446281">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(X) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[X].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="bbbae777-74e9-441c-8d9f-2704007fb732" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="2368887a-44f8-4dbb-9d0b-4be2e5b9f74f">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/XXXXXXX</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>jesus.ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="97327274-c698-4d76-98bd-df45fa688ff9">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('C:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="abccb9b3-83a8-435b-a375-0d556269852d">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 114</con:value>
            </con:property>
            <con:property>
              <con:name>OTP</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>check_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>MON_2040_ADVRSN_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>STAT_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>error_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Completion_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_USAGE_REPORT_USAGE_REPORT</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_Billing_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>_0PTC001_0PTPV01_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>mfaIn1rstResponse</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_REQUEST</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_RESPONSE</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="224c94f5-fc17-4ff2-b8aa-1baa3160be5b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Folder Structure" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Create Folders" id="d526a1a8-c55f-45ff-88d8-4ddf3882ce9d">
        <con:settings/>
        <con:config>
          <script>/////// FOLDER FOR STORING THE XMLs WITH THE CASE REFERENCE - TESTRAIL ID PAIRINGS
def folderSoapUI = new File('C:\\SoapUI\\').mkdir()
def folderTestData = new File('C:\\SoapUI\\Test Data\\').mkdir()
def folderOTPRegression = new File('C:\\SoapUI\\Test Data\\IEN Regression\\').mkdir()
def folderTestRailReference = new File('C:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\').mkdir()</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="a8216a2b-2985-4f6b-83ea-73b44bd19f04" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 114" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="714eb506-524f-4e17-94b6-eccba209f3e0">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("OTP", "" )
auxVarsTestStep.setPropertyValue("check_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("MON_2040_ADVRSN_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("STAT_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("error_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Completion_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Check_USAGE_REPORT_USAGE_REPORT", "" )
auxVarsTestStep.setPropertyValue("Check_Billing_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("mfaIn1rstResponse", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_REQUEST", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_RESPONSE", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="3300c99c-25c2-43ab-b41e-47da9680a6d4">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(12) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[12].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="15535fc3-91c3-4260-a673-707f9c811801" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="034935c6-424e-462f-8776-8a25957a1a18">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522625</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>jesus.ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="7f41819a-fe4b-4d5a-91f5-8d9ac1c8ee71">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('C:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="eeb8ca9f-079b-487a-93e3-f75bb998368b">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 114</con:value>
            </con:property>
            <con:property>
              <con:name>OTP</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>check_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>MON_2040_ADVRSN_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>STAT_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>error_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Completion_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_USAGE_REPORT_USAGE_REPORT</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_Billing_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>_0PTC001_0PTPV01_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>mfaIn1rstResponse</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_REQUEST</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_RESPONSE</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="38aa4526-7235-4be9-8a6c-53b8dbc13e2a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 106" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="07f2e4bc-1dbb-46a4-b5af-98dd805fe3be">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="8541a3dc-0b38-4b56-9753-1774e7805895">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(6) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[6].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="cce4cc2d-98eb-41af-8a08-03e42b255b73" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="4d2f3b01-87b0-4099-a2e1-e896e086c502">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522619</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Rajasri.Masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="2b837282-db14-4e5f-8097-72779176c369">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="2fed8663-c527-4ea5-9c9f-78490ad351ee">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 106</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="2e9bde1a-ec5d-4af5-a178-e990e885f4ee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 107" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="f4c80a39-8f0d-42b7-801a-06eb46486f52">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="14ab606e-448b-4901-8ab8-5cf15e97c726">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(7) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[7].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="bb39b95e-19cf-48bb-b18b-7f6c8d1e877d" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="e307ef1c-57c3-44f7-b9a0-ae2c3cf7b908">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522620</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>rajasri.masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="eb4fe0a1-b99c-43ac-a19b-be504fdc088e">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="0dc8b14d-6cdd-4d61-8068-d4010d64043b">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 107</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="f626b764-63fa-4f2c-8450-eea5f3c70a8f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 109" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="ef6302a3-9f5b-4d19-bca5-a168792f9cd9">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="529db1cc-eefa-41e2-88c8-5154623d1bcd">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(8) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[8].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="0e6d3814-330e-48ab-a19c-f498091c4860" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="c777d41a-9f1d-4213-ae41-39f0a6454f70">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522621</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Rajasri.Masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="d667a4f0-553b-4307-9386-48cd615e2e78">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="88220472-ab94-430f-bd22-2e6bba48584c">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 109</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="aa593c39-9c81-4a16-9aef-7b75ddf39f52" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 101" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="498ba592-c1b6-4db9-8f44-a09ef71a70b1">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="d4a17c8b-ecd9-4539-9059-56c8ef9fdcd9">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(1) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[1].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="d9a638f7-44fd-4142-8f97-3b9953f977ca" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="4561fe51-fde4-478b-9d78-b6565f6d8735">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522614</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>praveen.telaprolu@experian.com</con:username>
            <con:password>U5wDE1tFvEnGOVI0sJAE-Z83PFs25Hr/EuMX0LMtT</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="e8ca08a0-20e9-4c52-bdb3-97efc29cd9bf">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="b62ac875-fe3c-4e09-90f3-bde0df251863">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="19c8d880-02c9-445e-abe3-07924c97d94c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 1" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="dc1a72b1-0d36-40c2-9d47-6f29af412a5a">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="9a0f24e3-7e2e-4b22-9b32-1f0ceb94cc8a">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(0) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[0].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="3d37cb43-973a-464e-a70c-58206c45bd48" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="35fd6338-0e16-4680-a469-56760abd9168">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522613</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>praveen.telaprolu@experian.com</con:username>
            <con:password>U5wDE1tFvEnGOVI0sJAE-Z83PFs25Hr/EuMX0LMtT</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="6c37af12-9086-49a0-994f-eea7e2f318f9">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="56e1ea10-646d-4e0d-84f8-8dfcc072c7e2">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="3058efaa-4c0b-479a-a517-7fc209fcb514" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 103" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="43e8c939-90b7-46c1-84cb-083ed579e302">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="65208d60-acba-4ad0-a9be-c3cf3e6e0717">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(3) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[3].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="6a22029a-e795-4201-b6bd-f15a725e6c7c" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="9434a383-fec6-4730-9663-87d4f9d49bec">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522616</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>praveen.telaprolu@experian.com</con:username>
            <con:password>U5wDE1tFvEnGOVI0sJAE-Z83PFs25Hr/EuMX0LMtT</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="469da027-4493-4ef7-bc86-f058c92117f7">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="b23790ba-2748-468e-997a-6ab431539403">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="72d4f758-333a-4dba-b363-a0ff705ff3b4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 102" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="aa2e8b13-578f-4a89-9e63-7d09773183a5">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="da60726d-f9ee-4660-bab1-eb7d6570b33f">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(2) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[2].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="c4f67645-d110-44d4-a5f4-b24266ecf696" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="27222967-7b46-4139-87a1-3d8dd2f9243e">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522615</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>praveen.telaprolu@experian.com</con:username>
            <con:password>U5wDE1tFvEnGOVI0sJAE-Z83PFs25Hr/EuMX0LMtT</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="a6e0235f-e998-48b9-8878-991882674767">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="0238a19e-837e-4113-b15b-5fdca0d54760">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="893fe4d6-a588-488c-995c-113846f1f4af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 111" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="62abcd7e-0063-4ca4-ac02-4e8234fe2eb4">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="a19d33e6-af03-44db-b82a-15e8ce8afe69">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(9) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[9].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="99f1065e-abc6-4106-be6e-11c27eded31d" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="8753ca5a-1ebf-4642-958c-7c8fc9eaa238">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522622</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Rajasri.Masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="e1bcdfed-8bf5-4bed-a5e9-68355fae1613">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="16083576-1a12-4129-acf8-95ac5dcf1641">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 111</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="926972ec-9b33-41f5-9acd-5190b257edc8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 112" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="3fb60508-9dea-4fd5-8207-56497e0e378d">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="317cd3ca-2669-49b3-a212-caa556e136a1">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(10) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[10].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="50ce57ad-3e64-405c-b9d9-278533106032" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="ba7ff1c1-5999-4ccb-bca7-835b43fd8a2d">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522623</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Rajasri.Masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="36912244-adb1-4ff6-a42e-574e6b044aea">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="f678b83a-6247-48fb-a923-7baca34b6d17">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 112</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="344cde98-3ff5-4c6c-8dc2-b218e370d715" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 104" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="b6fdd972-2831-4418-9c4e-88b3c162d9c8">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="7179d611-39bb-45d6-94dc-872525bd9806">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(4) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[4].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="e9d89a83-ecd1-44f9-baec-3700ee8eaa8a" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="343a853d-0ab1-4b96-9c7e-8bb3ce2821c8">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522617</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>praveen.telaprolu@experian.com</con:username>
            <con:password>U5wDE1tFvEnGOVI0sJAE-Z83PFs25Hr/EuMX0LMtT</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="8ff7a8b1-0a20-4e84-b967-af776b217328">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="721502d6-cb89-4ec3-a33d-15cc1035fbdc">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="1391d8cc-4986-4ae2-bfb5-ce31c9f93ecf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 105" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="1bcd3eb7-6286-457d-bd51-535325a5ff0a">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="a2a771d2-7289-4ee8-8136-933e499fb551">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(5) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[5].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="eb51e58e-b0d2-4f9e-a3c7-7453b65dc731" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="24d528a4-bf12-4337-97f1-0f81afbc3a45">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522618</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>praveen.telaprolu@experian.com</con:username>
            <con:password>U5wDE1tFvEnGOVI0sJAE-Z83PFs25Hr/EuMX0LMtT</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="7adc628f-a438-46fb-8eef-caa83323090f">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="d5680812-b59d-4dbf-a18c-56d61d62dcc8">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="2b079054-419a-4e48-93e2-5874ed2cd24b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 113" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="d36b4ed8-3df8-4d5e-837a-7f0fe46f650b">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="bd41ae15-3020-40e7-adcf-b6516c1cac3c">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(11) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[11].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="2f73a9bb-6d51-47d2-af64-41e96cb7e3a5" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="d1b8d8c2-d60b-4d42-97be-1473c17f60b7">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522624</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Rajasri.Masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="766c40d8-4bfa-4a6a-a1e7-ae7ffd56562a">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="68c167a3-dda0-4cc1-8961-3163cd26f475">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 113</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="d2974a68-564a-49d9-ae47-c8f29677d478" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 116" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="10421d82-c9e9-4dd6-9b31-f718748d47df">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="265a5352-2d00-463b-8e15-f460830f0b03">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(13) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[13].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="482ec3a7-569d-4d8b-aa54-1f5d1f88e54c" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="e76d4d54-c068-45a9-a164-abb63fa09609">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522649</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Rajasri.Masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="55d66439-051f-41fa-bce0-6fcc40f30ec0">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('M:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="fe127720-fdd9-4dd7-a35c-68b3cc74484c">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 116</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="f06e1b3f-35d8-4f66-ae4d-c89c6452d33d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 115" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="bd18c650-4bac-4e77-a800-ca216bc1e95f">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="7bb2b5f0-20c0-48c0-8f07-a0096d83c7ec">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*

 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(14) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[14].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="e656e100-4afb-45ee-a0d3-53fdc28c01bc" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="83783a94-0f2f-460f-8e80-3113de20a8af">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522649</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>Rajasri.Masuldari@experian.com</con:username>
            <con:password>tRf2UEBmUvbYdRYaqXP/-QlnrMEtMtWmCZQOcu8al</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="6247665f-82f7-4556-ae4a-f487686a667c">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('C:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="5757db20-021b-482d-9857-4b78ee6a8013">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 115</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>testCasesWorkbookLocation</con:name>
        <con:value>C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls</con:value>
      </con:property>
    </con:properties>
  </con:testSuite>
  <con:testSuite id="3e0b55ce-235b-49a7-88cf-45862dcd4440" name="Map Cases From TestRail  to XML">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="ddec08b6-88dc-4e45-a065-d1621edffadf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Obtain Cases from TestRail" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="edc79784-758d-413f-9ac7-1d702395100e">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

propTestStep.setPropertyValue("numberOfSections", "" )
propTestStep.setPropertyValue("currentSectionCounter", "1" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("currentSectionId", "" )
propTestStep.setPropertyValue("currentSectionName", "" )
propTestStep.setPropertyValue("xmlStarted", "F" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Obtain Sections" id="5e5a61b8-ee69-4a8f-b9d3-59ceb61d845d">
        <con:settings/>
        <con:config service="https://testrail.uat.uk.experian.local" resourcePath="/index.php?/api/v2/get_sections/38&amp;suite_id=1885" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Obtain Sections" id="23bb03bf-2b9f-4a6c-b1fa-7d487054227f" mediaType="application/json">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
            <con:request/>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.php</con:originalUri>
            <con:credentials>
              <con:username>Jesus.Ruiz@experian.com</con:username>
              <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Section to Obtain Cases" id="3681fd60-17e7-4208-af13-f2e762a783d5">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") //auxiliary variables

def testrailSections = context.expand( '${REST Request - Obtain Sections#Response}' ) // obtains response with all Sections

def testrailSectionsXMLMap = new JsonSlurper().parseText(testrailSections)

//saves number of sections inside the Testrail Testsuite
def size = testrailSectionsXMLMap.size()
propTestStep.setPropertyValue("numberOfSections",size.toString())


//obtains current section to get cases from
def currentSectionCounter = propTestStep.getPropertyValue("currentSectionCounter").toInteger()

//def next = currentSectionCounter + 1

next = (currentSectionCounter > size-1? 1: currentSectionCounter+1) //set the next value

def currentSectionId, currentSectionName
 
testrailSectionsXMLMap.each {
	if(it.display_order == currentSectionCounter.toInteger() ){
		currentSectionId = it.id
		currentSectionName = it.name
		log.info currentSectionId + " "+currentSectionName
	}
}

//Sets the current section ID and name onto the auxiliary variables
propTestStep.setPropertyValue("currentSectionId",currentSectionId.toString())
propTestStep.setPropertyValue("currentSectionName",currentSectionName.toString())

/*
if(currentSectionCounter != size ){
	currentSectionCounter += 1 
	propTestStep.setPropertyValue("currentSectionCounter",currentSectionCounter.toString())
}
*/

propTestStep.setPropertyValue("currentSectionCounter", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("next", next.toString()) //set Next value on the properties step


if (currentSectionCounter == size)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (currentSectionCounter == 0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{

	propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Obtain Cases from Section" id="7661591f-89e8-47f4-8d09-bad111e60dc3">
        <con:settings/>
        <con:config service="https://testrail.uat.uk.experian.local" resourcePath="/index.php?/api/v2/get_cases/38&amp;suite_id=1884&amp;section_id={Section_ID}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Obtain Cases from Section" id="a16906de-f230-4928-9810-2f32ff426dfa" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://testrail.uat.uk.experian.local</con:endpoint>
            <con:request/>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.php</con:originalUri>
            <con:credentials>
              <con:username>Jesus.Ruiz@experian.com</con:username>
              <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="Section_ID" value="${Properties - Aux Vars#currentSectionId}" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>Section_ID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Parse Cases into XML" id="bb7f32fb-bd7d-4132-8c32-3caf9918f365">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase


// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${REST Request - Obtain Cases from Section#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
//requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Case")

def currentSectionID = propTestStep.getPropertyValue("currentSectionId")
def currentSectionName = propTestStep.getPropertyValue("currentSectionName")

def folderSoapUI = new File('C:\\SoapUI\\').mkdir()
//new File(folderSoapUI)

def folderTestData = new File('C:\\SoapUI\\Test Data\\').mkdir()
//new File(folderTestData).mkdir()

def folderOTPRegression = new File('C:\\SoapUI\\Test Data\\OTP Regression\\').mkdir()
//new File(folderOTPRegression).mkdir()

def folderTestRailReference = new File('C:\\SoapUI\\Test Data\\OTP Regression\\TestRail Reference\\').mkdir()
//new File(folderTestRailReference).mkdir()


def outFile = new File('C:\\SoapUI\\Test Data\\OTP Regression\\TestRail Reference\\'+currentSectionName+'_TestRail Reference.xml')
outFile.write("")

if ( propTestStep.getPropertyValue("xmlStarted") == "F" || propTestStep.getPropertyValue("xmlStarted") == "f" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def caseCounter = 0

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()

jsonResponse.each{ testCase ->

	def xml = markupBuilder.bind{
		caseNumber("number": caseCounter ) {
			ReferenceNumber(
				testCase.title.toString()
				//"sadsadsadsad"
				)
			TestRailsID(
				//"sadsadsadsadsadsad"
				testCase.id.toString()
				)
		}
	}
	caseCounter++
	outFile.append(xml.toString()+'\n')
}
outFile.append("&lt;/root>"+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
def runner
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{

log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("xmlStarted", "F" )
testRunner.gotoStepByName("Groovy Script - Set Section to Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="cc830c1d-d52b-4a15-88bd-b5c5ad8d2942">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>numberOfSections</con:name>
              <con:value>32</con:value>
            </con:property>
            <con:property>
              <con:name>currentSectionCounter</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>currentSectionId</con:name>
              <con:value>522611</con:value>
            </con:property>
            <con:property>
              <con:name>currentSectionName</con:name>
              <con:value>KIQ PO24 V6</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="284c72ca-6407-4775-a273-e87ba839e93a" name="Upload Cases old - IEN">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="d818e647-8853-45a7-9541-bc68e21ecb8b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - BASE" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="a29335e1-53bb-437a-beb3-d712e9728092">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("OTP", "" )
auxVarsTestStep.setPropertyValue("check_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("MON_2040_ADVRSN_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("STAT_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("error_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Completion_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Check_USAGE_REPORT_USAGE_REPORT", "" )
auxVarsTestStep.setPropertyValue("Check_Billing_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("mfaIn1rstResponse", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_REQUEST", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_RESPONSE", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="66f5b4f7-7161-431e-9c3a-a2266c1a6243">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(X) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[X].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="1894c73a-ad11-4b9f-8dee-7fb5b29ba8db" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="7978d275-c3ca-4055-bdb7-61261cb3b0b5">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/XXXXXXX</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>jesus.ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="3e61e41f-cd93-43f5-bf80-6c96062d64e4">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('C:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="fd677545-354f-4c75-94c9-8543e516ce7d">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 114</con:value>
            </con:property>
            <con:property>
              <con:name>OTP</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>check_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>MON_2040_ADVRSN_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>STAT_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>error_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Completion_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_USAGE_REPORT_USAGE_REPORT</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_Billing_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>_0PTC001_0PTPV01_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>mfaIn1rstResponse</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_REQUEST</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_RESPONSE</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="30895b0a-3598-4475-8ba7-79f488bdfe69" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Folder Structure" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Create Folders" id="52e526d1-8ef6-4b28-b83a-92633a2c7b3e">
        <con:settings/>
        <con:config>
          <script>/////// FOLDER FOR STORING THE XMLs WITH THE CASE REFERENCE - TESTRAIL ID PAIRINGS
def folderSoapUI = new File('C:\\SoapUI\\').mkdir()
def folderTestData = new File('C:\\SoapUI\\Test Data\\').mkdir()
def folderOTPRegression = new File('C:\\SoapUI\\Test Data\\OTP Regression\\').mkdir()
def folderTestRailReference = new File('C:\\SoapUI\\Test Data\\OTP Regression\\TestRail Reference\\').mkdir()</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="b70d5073-59de-46cd-b3ad-80c83b4c043a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Upload Cases - Strategy 114" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="b163367b-e7e4-40cf-8733-ac826ec6076f">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase 
def auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars")

auxVarsTestStep.setPropertyValue("resultCode", "" )
auxVarsTestStep.setPropertyValue("Total", "" )
auxVarsTestStep.setPropertyValue("Count", "0" )
auxVarsTestStep.setPropertyValue("Next", "" )
auxVarsTestStep.setPropertyValue("StopLoop", "F" )
auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("xmlStarted", "F" )
auxVarsTestStep.setPropertyValue("caseCounter", "0" )

auxVarsTestStep.setPropertyValue("XMLName", "")

auxVarsTestStep.setPropertyValue("referenceText", "" )
auxVarsTestStep.setPropertyValue("OTP", "" )
auxVarsTestStep.setPropertyValue("check_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("MON_2040_ADVRSN_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("STAT_CD_INV_LOG", "" )
auxVarsTestStep.setPropertyValue("error_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Completion_Code_XML_Response", "" )
auxVarsTestStep.setPropertyValue("Check_USAGE_REPORT_USAGE_REPORT", "" )
auxVarsTestStep.setPropertyValue("Check_Billing_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG", "" )
auxVarsTestStep.setPropertyValue("mfaIn1rstResponse", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_REQUEST", "" )
auxVarsTestStep.setPropertyValue("Check_VENDOR_RESPONSE", "" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Obtain Cases" id="cf78e2f9-8c29-465d-a9a2-136d3358639e">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder

import groovy.io.FileType

import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES

def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

Sheet sheet1 = workbook1.getSheet(12) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

auxVarsTestStep.setPropertyValue("XMLName", "Strategy "+sheetName[12].toString())
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

auxVarsTestStep.setPropertyValue("Total", size.toString())

counter = auxVarsTestStep.getPropertyValue("Count").toInteger() //counter variable contains iteration number

//counter = ( counter > size-3 ? 0: counter )//

next = ( counter > size-3 ? 0: counter+1) //set the next value



// OBTAINING THE DATA YOU NEED 

Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
/*
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
*/
workbook1.close() //close the file

////////////////////////////////////

referenceText = a.getContents()
/*
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
*/
///////////////////////////////////////

auxVarsTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
/*
auxVarsTestStep.setPropertyValue("firstName", firstName)
auxVarsTestStep.setPropertyValue("middleName", middleName)
auxVarsTestStep.setPropertyValue("lastName", lastName)
auxVarsTestStep.setPropertyValue("gen", gen)
auxVarsTestStep.setPropertyValue("ssn", ssn)
auxVarsTestStep.setPropertyValue("address", address)
auxVarsTestStep.setPropertyValue("city", city)
auxVarsTestStep.setPropertyValue("state", state)
auxVarsTestStep.setPropertyValue("zip", zip)
auxVarsTestStep.setPropertyValue("dob", dob)
auxVarsTestStep.setPropertyValue("yob", yob)
auxVarsTestStep.setPropertyValue("dlState", dlState)
auxVarsTestStep.setPropertyValue("dlNumber", dlNumber)
auxVarsTestStep.setPropertyValue("phone", phone)
auxVarsTestStep.setPropertyValue("subcode", subcode)
auxVarsTestStep.setPropertyValue("po", po)
auxVarsTestStep.setPropertyValue("email", email)
auxVarsTestStep.setPropertyValue("ip", ip)
auxVarsTestStep.setPropertyValue("ccNum1", ccNum1)
auxVarsTestStep.setPropertyValue("ccNum2", ccNum2)
auxVarsTestStep.setPropertyValue("ccNum3", ccNum3)
auxVarsTestStep.setPropertyValue("ccNum4", ccNum4)
auxVarsTestStep.setPropertyValue("ccNum5", ccNum5)
auxVarsTestStep.setPropertyValue("ccNum6", ccNum6)
auxVarsTestStep.setPropertyValue("ccNum7", ccNum7)
auxVarsTestStep.setPropertyValue("ccNum8", ccNum8)
auxVarsTestStep.setPropertyValue("ccNum9", ccNum9)
propTestStep.setPropertyValue("ccNum10", ccNum10)
auxVarsTestStep.setPropertyValue("ccString1", ccString1)
auxVarsTestStep.setPropertyValue("ccString2", ccString2)
auxVarsTestStep.setPropertyValue("ccString3", ccString3)
auxVarsTestStep.setPropertyValue("ccString4", ccString4)
auxVarsTestStep.setPropertyValue("ccString5", ccString5)
*/

auxVarsTestStep.setPropertyValue("Count", next.toString()) //increase Count value

next++ //increase next value
 
auxVarsTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3 )
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
auxVarsTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Format Expected Results" id="a206b34f-ed9a-44d0-b174-55db7ff62591" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
auxVarsTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep object



///Sets message for expected results in INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("check_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", auxVarsTestStep.getPropertyValue("check_INV_LOG")+" Entry(es) in INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessagecheck_INV_LOG", "No entries in INV_LOG table ")
}

///Sets message for expected results in MON_2040_ADVRSN_CD field in the INV_LOG table
if(auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("MON_2040_ADVRSN_CD")+" in MON_2040_ADVRSN_CD field in the INV_LOG table ")	
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageMON_2040_ADVRSN_CD_INV_LOG", "No code in MON_2040_ADVRSN_CD field in the INV_LOG table ")
}

///Sets message for expected results in STAT_CD field in the INV_LOG TABLE
if(auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "Code "+auxVarsTestStep.getPropertyValue("STAT_CD_INV_LOG")+" in STAT_CD field in the INV_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageSTAT_CD_INV_LOG", "No code in STAT_CD field in the INV_LOG table ")
}

///Sets message for expected results in USAGE_REPORT table
if(auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "Check for "+auxVarsTestStep.getPropertyValue("Check_USAGE_REPORT_USAGE_REPORT")+" record(s) in the USAGE_REPORT table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheckUsageReport", "No entries in USAGE_REPORT table ")
}

///Sets message for expected results in PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "Check for "+auxVarsTestStep.getPropertyValue("Check_Billing_PID_BILLING_LOG")+" record(s) in the PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_Billing", "No entries in PID_BILLING_LOG table ")
}


///Sets message for expected results in the Billing code from PID_BILLING_LOG table
if(auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "Check for "+auxVarsTestStep.getPropertyValue("_0PTC001_0PTPV01_PID_BILLING_LOG")+" Billing code in PID_BILLING_LOG table ")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessage_0PTC001", "No Billing code entries in the PID_BILLING_LOG table ")
}



///Sets message for expected results in the VENDOR_REQUEST_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_REQUEST") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorRequest")+" record(s) in the VENDOR_REQUEST_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorRequest", "No entries in the VENDOR_REQUEST_YEAR_MONTH table ")
}

///Sets message for expected results in the VENDOR_RESPONSE_year_month table
if(auxVarsTestStep.getPropertyValue("Check_VENDOR_RESPONSE") != ""){
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "Check for "+auxVarsTestStep.getPropertyValue("check_vendorResponse")+" record(s) in the VENDOR_RESPONSE_year_month table")
}else{
	auxVarsTestStep.setPropertyValue("ExpectedResultMessageCheck_vendorResponse", "No entries in the VENDOR_RESPONSE_YEAR_MONTH table ")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Add Cases" id="92f8fc13-28a6-42d9-a676-2358d08f47f3">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7d3e7a7-9677-4313-86d6-0659ea1ab2e0" name="HTTP Request - Add Cases" postQueryString="false" mediaType="application/json" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://testrail.uat.uk.experian.local/index.php?/api/v2/add_case/522625</con:endpoint>
          <con:request>{
	"title": "${Properties - Aux Vars#referenceText}",
	"type_id": "9",
	"custom_steps_separated": [
		{
			"content": "Compare tags inside &lt;CustomerManagement> in the responses from Staging and Demo Environments",
			"expected": "All tags except for &lt;ReportDate>, &lt;ReportTime>, &lt;TransactionID> must match"
		}
	]
}</con:request>
          <con:credentials>
            <con:username>jesus.ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Case ID's" id="451b3804-879e-4117-a320-9ee4b4eba3c7">
        <con:settings/>
        <con:config>
          <script>import groovy.json.JsonSlurper;
def myTestCase = context.testCase

// SAVE THE CASE REFERENCE AND TESTRAIL ID ONTO AN XML

def httpResponse = context.expand('${HTTP Request - Add Cases#Response}')

def jsonResponse =new JsonSlurper().parseText(httpResponse)

def propTestStep = myTestCase.getTestStepByName("Properties - Aux Vars") // get the Property TestStep
def requestTestStep = myTestCase.getTestStepByName("HTTP Request - Add Cases")

def docName = propTestStep.getPropertyValue("XMLName")

def outFile = new File('C:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\'+docName+'_TestRail Reference.xml')

if ( propTestStep.getPropertyValue("xmlStarted") == "F" ){
	
	outFile.append("&lt;root>"+'\n')
	propTestStep.setPropertyValue("xmlStarted", "T")
}

def markupBuilder = new groovy.xml.StreamingMarkupBuilder()
def caseCounter = propTestStep.getPropertyValue("caseCounter").toInteger()

if( propTestStep.getPropertyValue("Count") == "1" ){
	caseCounter = 1	
}else{
	caseCounter++	
}



def xml = markupBuilder.bind{
	//caseNumber("number": propTestStep.getPropertyValue("referenceText").reverse().take(2).reverse() ) {
	caseNumber("number": caseCounter ) {
		ReferenceNumber(
			propTestStep.getPropertyValue("referenceText").toString()
			//"sadsadsadsad"
			)
		TestRailsID(
			//"sadsadsadsadsadsad"
			jsonResponse.id
			)
	}
}

outFile.append(xml.toString()+'\n')

//CHECK IF ALL THE CASES ARE ALREADY UPLOADED
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
outFile.append("&lt;/root>"+'\n')
log.info ("Exit Groovy Data Source Looper")
assert true
 
}
 
else
 
{
propTestStep.setPropertyValue("caseCounter", caseCounter.toString() )
testRunner.gotoStepByName("Groovy Script - Obtain Cases") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties - Aux Vars" id="1207a928-af0e-4963-a364-7a96c777406c">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>559-ERROR 092</con:value>
            </con:property>
            <con:property>
              <con:name>xmlStarted</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>caseCounter</con:name>
              <con:value>99</con:value>
            </con:property>
            <con:property>
              <con:name>XMLName</con:name>
              <con:value>Strategy 114</con:value>
            </con:property>
            <con:property>
              <con:name>OTP</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>check_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>MON_2040_ADVRSN_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>STAT_CD_INV_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>error_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Completion_Code_XML_Response</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_USAGE_REPORT_USAGE_REPORT</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_Billing_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>_0PTC001_0PTPV01_PID_BILLING_LOG</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>mfaIn1rstResponse</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_REQUEST</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Check_VENDOR_RESPONSE</con:name>
              <con:value/>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>testCasesWorkbookLocation</con:name>
        <con:value>M:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls</con:value>
      </con:property>
    </con:properties>
  </con:testSuite>
  <con:properties/>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>