<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="18edbdff-18f5-46ff-ad35-2a2186f28dd7" activeEnvironment="Default" name="IEN Regression" resourceRoot="${projectDir}" defaultScriptLanguage="Groovy" soapui-version="5.4.0" abortOnError="false" runType="PARALLELL" lastOpened="2016-12-14T15:00:39.938-08:00" authProfile="No Authorization" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="IEN Regression"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="Root Folder" value="C:\SoapUI\Test Response\Fail Report"/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@max_rows">5000</con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.panels.testcase.JTestRunLog$OptionsForm@errors_only">true</con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.LoadTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value="Sctest36"/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\SoapUI-5.2.1/bin"/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="LoadTest" value="&lt;all>"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Print Report Statistics" value="true"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value="schuang_all"/>
  <con:entry key="Root Folder" value="C:\SoapUI\Test Response\Fail Report"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Endpoint" value="https://stg1-ss1.experian.com"/>
  <con:entry key="ThreadCount" value=""/>
  <con:entry key="Limit" value=""/>
</xml-fragment>]]></con:setting>
  </con:settings>
  <con:interface xsi:type="con:RestService" id="e805532c-37db-41c9-b0db-c885216caf2e" wadlVersion="http://wadl.dev.java.net/2009/02" name="XMLGateway" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>http://localhost:8088/</con:endpoint>
      <con:endpoint>https://dm-sgw1.experian.com/fraudsolutions/xmlgateway/preciseid</con:endpoint>
      <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
    </con:endpoints>
    <con:resource name="Preciseid" path="/fraudsolutions/xmlgateway/preciseid" id="8307cb31-9e6b-44cb-9c4f-d7077f6fc4d4">
      <con:settings/>
      <con:parameters/>
      <con:method name="Preciseid" id="16ef7ede-a574-4c86-a1c4-bef47b10f8ff" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>text/xml</con:mediaType>
          <con:params/>
          <con:element>Experian</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/octet-stream</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:net="http://www.experian.com/NetConnectResponse">net:NetConnectResponse</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>401 403 500</con:status>
          <con:params/>
          <con:element xmlns:auth="http://www.experian.com/ewacs/auth">auth:response</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element>Experian</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/x-www-form-urlencoded</con:mediaType>
          <con:params/>
          <con:element>Experian</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:net="http://www.experian.com/NetConnectResponse">net:NetConnectResponse</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:auth="http://www.experian.com/ewacs/auth">auth:response</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html;charset=UTF-8</con:mediaType>
          <con:status>405</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="STG-Inquiry 1" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest xmlns="http://www.experian.com/NetConnect" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <ReferenceId>V5 PO 27</ReferenceId>
   <Request xmlns="http://www.experian.com/WebDelivery" version="1.0">
      <Products>
         <PreciseIDServer xsi:noNamespaceSchemaLocation="file:///C:/Users/M01775A/Desktop/41st/NetConnectInquiryXml.xsd">
            <XMLVersion>5</XMLVersion>
            <Subscriber>
               <Preamble>TCA1</Preamble>
               <OpInitials>XX</OpInitials>
               <SubCode>1977704</SubCode>
            </Subscriber>
               <Options>
               <ReferenceNumber>Stg Smoke Test V5 XG PO 27</ReferenceNumber>
               <PreciseIDType>27</PreciseIDType>
               <DetailRequest>D</DetailRequest>
            </Options>
         	<FraudNetOptionalInput>
		<OrgCode>PRECISEID</OrgCode>
		<ModelCode>ATOPID01</ModelCode>
		<Event>
			<Type>ATO</Type>
			<ID>00004491611102902238_1383696786763</ID>
			<Time>2012-12-31T01:35:56.010Z</Time>
			<Source>WEB</Source>
			<Device>
				<IP>127.0.0.1</IP>
				<Headers>
					<Header>
						<HeaderName>content-type</HeaderName>
						<HeaderValue>application/x-www-form-urlencoded</HeaderValue>
					</Header>
					<Header>
						<HeaderName>connetion</HeaderName>
						<HeaderValue>close</HeaderValue>
					</Header>
					<Header>
						<HeaderName>host</HeaderName>
						<HeaderValue>wil-vetcprdp02:8076</HeaderValue>
					</Header>
					<Header>
						<HeaderName>accept-language</HeaderName>
						<HeaderValue>en-US,en;q=0.8</HeaderValue>
					</Header>
					<Header>
						<HeaderName>accept</HeaderName>
						<HeaderValue>text/html,application/xhtml+xml,application/xml</HeaderValue>
					</Header>
					<Header>
						<HeaderName>origin</HeaderName>
						<HeaderValue>http://10.141.174.122:8080</HeaderValue>
					</Header>
					<Header>
						<HeaderName>accept-charset</HeaderName>
						<HeaderValue>ISO-8859-1,utf-8;q=0.7,*;q=0.3</HeaderValue>
					</Header>
					<Header>
						<HeaderName>cache-control</HeaderName>
						<HeaderValue>max-age=0</HeaderValue>
					</Header>
					<Header>
						<HeaderName>cookie</HeaderName>
						<HeaderValue>JSESSIONID=E9BBCE8410DE7F5572295159C45B0207;userGuid=3F2504E0-4F89-11D3-9A0C-0305E82C3301; userPrefFont=Lucida Sans Unicode; userPrefLocale=en-US; userSessionStartTime=1380563413565</HeaderValue>
					</Header>
				</Headers>
				<UserIdentityCookies>
					<Cookie>
						<CookieName>userGuid</CookieName>
						<CookieValue>3F2504E0-4F89-11D3-9A0C-0305E82C3301</CookieValue>
					</Cookie>
					<Cookie>
						<CookieName>userPrefFont</CookieName>
						<CookieValue>Lucida Sans Unicode</CookieValue>
					</Cookie>
					<Cookie>
						<CookieName>userPrefLocale</CookieName>
						<CookieValue>en-US</CookieValue>
					</Cookie>
				</UserIdentityCookies>
				<JSC>7Wa44j1e3NlY5BSo9z4ofjb75PaK4Vpjt.gEngMQBTuX38.WUMnGWVQdg1kzDlSgyyIT1n3wLDVg.5w2SCVL6yXyjaY1WMsiZRPrwVL6tqAhbrmQkLNbXlo4V.XTrLjokqszxE6D8mX38.WsfOjZzlFIZktgRvw0BpUMnGWjftckuyPBDjaY2ftckkCoq1HACVcNJxNJxZxIHmrk0i.uJtHoqvynx9MsFyxYM914Yh1lRcRqA_WnBQCKve7B4CpiMekcA.2_.DJF2iwfzcU_uyxYMJ5tFFgSFBBBG8qCMns_Gj5fmVLHi7Zv5ftvqU1jTcouU.AxzXgLz4QCwby92yMUDxwt.nJmcttHqvN0i9umFU4r3Ir1DrDy0O9sRKpZVzdiKDQKj5zTcouRzwVL6yXETvLz4mvmfTT9oaSumKkpjlRiwerbXh8bUtFqzQW5BQJLhsqYhdxw6jJPSEV4yxO9sCOtdWJJCgSpFY5BNnOVhs5Apw.2du</JSC>
			</Device>
			<ExternalRiskResults>
				<Risk>
					<Source>trustInsight</Source>
					<Score>218</Score>
					<Code>null</Code>
				</Risk>
				<Risk>
					<Source>2ndFactorAuthentication</Source>
					<Code>PASS</Code>
				</Risk>
				<Risk>
					<Source>2ndFactorAuthentication</Source>
					<Code>PASS</Code>
				</Risk>
			</ExternalRiskResults>
			<Contacts>
				<Contact>
					<ContactID>CONTACT1</ContactID>
					<Name>David Dirsh Jr</Name>
					<Company>Accountants International</Company>
					<Emails>
						<Email>
							<EmailAddress>ddirsh@accountantsinternational.com</EmailAddress>
							<EmailType>WORK</EmailType>
						</Email>
						<Email>
							<EmailAddress>dirsh529@gmail.com</EmailAddress>
							<EmailType>PERSONAL</EmailType>
						</Email>
					</Emails>
					<PhoneNumbers>
						<FNSPhone>
							<Number>%2b1 4439326200</Number>
							<Type>WORK</Type>
						</FNSPhone>
						<FNSPhone>
							<Number>%2b1 4439324819</Number>
							<Type>MOBILE</Type>
						</FNSPhone>
					</PhoneNumbers>
					<FNSAddress>
						<StreetLine>5000 Douglas Avenue</StreetLine>
						<StreetLine2>Suite 520</StreetLine2>
						<City>Baltimore</City>
						<Postal>21244</Postal>
						<StateProvinceCode>MD</StateProvinceCode>
						<CountryCode>US</CountryCode>
					</FNSAddress>
					<BirthDate>1967-08-13</BirthDate>
					<HashedTaxId>01a54629efb952287e55</HashedTaxId>
					<MothersMaidenName>Weaver</MothersMaidenName>
				</Contact>
				<Contact>
					<ContactID>CONTACT2</ContactID>
					<Name>Mary Dirsh</Name>
				</Contact>
				<Contact>
					<ContactID>CONTACT3</ContactID>
					<Name>Corey Linder</Name>
				</Contact>
				<Contact>
					<ContactID>CONTACT4</ContactID>
					<Name>Desert Schools FCU</Name>
					<FNSAddress>
						<StreetLine>3423 E. Bell Rd.</StreetLine>
						<City>Phoenix</City>
						<Postal>85032</Postal>
						<StateProvinceCode>AZ</StateProvinceCode>
						<CountryCode>US</CountryCode>
					</FNSAddress>
				</Contact>
			</Contacts>
			<UserAccount>
				<ID>00004491611102902238</ID>
				<EnrollmentTime>2012-12-31T00:00:00.001Z</EnrollmentTime>
				<AccountHolder>CONTACT1</AccountHolder>
				<ReturnCustomer>true</ReturnCustomer>
				<CurrentlyTraveling>true</CurrentlyTraveling>
				<Username>jtull</Username>
				<HashedPassword>5e884898da28047151ddc6292773603d0d6aabbdd62a11</HashedPassword>
				<LastActionTimes>
					<PreviousSuccessfulLogin>2012-05-01T08:12:32.013Z</PreviousSuccessfulLogin>
					<PhoneUpdated>2012-05-01T08:12:32.013Z</PhoneUpdated>
					<UsernameUpdated>2012-05-01T08:12:32.013Z</UsernameUpdated>
					<AddressUpdated>2012-05-01T08:12:32.013Z</AddressUpdated>
					<EmailUpdated>2012-05-01T08:12:32.013Z</EmailUpdated>
					<UpdatedViaCallCenter>2012-05-01T08:12:32.013Z</UpdatedViaCallCenter>
					<PasswordUpdated>2012-05-01T08:12:32.013Z</PasswordUpdated>
					<BeneficiaryUpdated>2012-05-01T08:12:32.013Z</BeneficiaryUpdated>
					<PayeeUpdated>2012-05-01T08:12:32.013Z</PayeeUpdated>
					<SignerUpdated>2012-05-01T08:12:32.013Z</SignerUpdated>
					<Contacted>2012-05-01T08:12:32.013Z</Contacted>
				</LastActionTimes>
			</UserAccount>
			<Session>
				<ID>49C5E3479AAA14B676609186B7D2E234</ID>
				<DurationInMillis>2178000</DurationInMillis>
				<ActivityPageCode>login-mobile-001</ActivityPageCode>
				<FailedLoginAttempts>1</FailedLoginAttempts>
				<ThirdPartySessionId>15457743245342343677</ThirdPartySessionId>
				<LoggedIn>true</LoggedIn>
				<MultiFactorAuthenticated>true</MultiFactorAuthenticated>
				<ChallengeAttempts>1</ChallengeAttempts>
			</Session>
			<Total>
				<Amount>869.00</Amount>
				<CurrencyCode>USD</CurrencyCode>
			</Total>
			<FinancialAccounts>
				<FinancialAccount>
					<FinancialAccountID>FIACCT1</FinancialAccountID>
					<Type>BANK</Type>
					<SubType>savings</SubType>
					<Name>Long term savings</Name>
					<HashedAccountNumber/>
					<AccountHolder>CONTACT1</AccountHolder>
					<OpenedDate>1999-02-14</OpenedDate>
					<CustomerType>joint</CustomerType>
					<LineOfBusiness>consumer</LineOfBusiness>
					<AdditionalCardHolders>CONTACT1</AdditionalCardHolders>
					<RoutingNumber>122187238</RoutingNumber>
				</FinancialAccount>
				<FinancialAccount>
					<FinancialAccountID>FIACCT2</FinancialAccountID>
					<Type>LOAN</Type>
					<SubType>MORTGAGE</SubType>
					<Name>Rental house</Name>
					<HashedAccountNumber/>
					<AccountHolder>CONTACT2</AccountHolder>
					<OpenedDate>2013-04-25</OpenedDate>
					<CustomerType>INDIVIDUAL</CustomerType>
					<LineOfBusiness>OTHER</LineOfBusiness>
					<Balance>
						<CurrencyCode>USD</CurrencyCode>
						<Amount>265367.47</Amount>
					</Balance>
					<LoanAmount>
						<CurrencyCode>USD</CurrencyCode>
						<Amount>268000</Amount>
					</LoanAmount>
					<InterestRate>4.125</InterestRate>
					<MaturityDate>2999-04-25</MaturityDate>
				</FinancialAccount>
				<FinancialAccount>
					<FinancialAccountID>FIACCT3</FinancialAccountID>
					<Type>CREDIT</Type>
					<Name>Small purchases</Name>
					<HashedAccountNumber/>
					<AccountHolder>CONTACT3</AccountHolder>
					<OpenedDate>2007-09-13</OpenedDate>
					<CustomerType>JOINT</CustomerType>
					<LineOfBusiness>OTHER</LineOfBusiness>
					<AdditionalCardHolders>CONTACT1</AdditionalCardHolders>
					<Balance>
						<CurrencyCode>USD</CurrencyCode>
						<Amount>3258.25</Amount>
					</Balance>
					<InterestRate>19.99</InterestRate>
				</FinancialAccount>
				<FinancialAccount>
					<FinancialAccountID>FIACCT4</FinancialAccountID>
					<Type>OTHER</Type>
					<Name>Bar tab</Name>
					<HashedAccountNumber/>
					<AccountHolder>CONTACT1</AccountHolder>
					<OpenedDate>2013-04-25</OpenedDate>
					<CustomerType>INDIVIDUAL</CustomerType>
					<LineOfBusiness>OTHER</LineOfBusiness>
					<Balance>
						<CurrencyCode>USD</CurrencyCode>
						<Amount>127.72</Amount>
					</Balance>
				</FinancialAccount>
				<FinancialAccount>
					<FinancialAccountID>FIACCT5</FinancialAccountID>
					<Type>EXTERNAL</Type>
					<SubType>CHECKING</SubType>
					<Name>Secondary checking</Name>
					<HashedAccountNumber/>
					<AccountHolder>CONTACT2</AccountHolder>
					<RoutingNumber>122187238</RoutingNumber>
					<Institution>CONTACT1</Institution>
				</FinancialAccount>
			</FinancialAccounts>
			<Transactions>
				<Transaction>
					<Type>BILL_PAY</Type>
					<ID>4217669600</ID>
					<CashValue>
						<Amount>240.24</Amount>
						<CurrencyCode>USD</CurrencyCode>
					</CashValue>
					<Time>2012-05-01T08:12:32.012Z</Time>
					<FromAccount>FIACCT1</FromAccount>
					<ToContact>CONTACT4</ToContact>
				</Transaction>
				<Transaction>
					<Type>PAYMENT</Type>
					<ID>4217669601</ID>
					<CashValue>
						<Amount>131.00</Amount>
						<CurrencyCode>USD</CurrencyCode>
					</CashValue>
					<Time>2012-05-01T08:12:32.012Z</Time>
					<Payer>CONTACT1</Payer>
					<Category>sale</Category>
					<Method>
						<Type>CARD</Type>
						<Brand>AMX</Brand>
						<CardHolderName>David Dirsh Jr</CardHolderName>
						<Bin>123456</Bin>
						<HashedCardNumber>3a134ef77d4e2e4cdad2d2945ff1f76c2960</HashedCardNumber>
						<ExpireDate>2999-05-01</ExpireDate>
						<Authorization>
							<Declined>true</Declined>
							<ApprovalCode>000572</ApprovalCode>
							<AvsAddr>M</AvsAddr>
							<AvsZip>M</AvsZip>
							<Cvv2>M</Cvv2>
							<ThreeDS>Y</ThreeDS>
							<EnhAuthPhone>M</EnhAuthPhone>
							<EnhAuthName>M</EnhAuthName>
							<EnhAuthEmail>M</EnhAuthEmail>
							<PSAddr>C</PSAddr>
							<PSPayer>V</PSPayer>
						</Authorization>
					</Method>
				</Transaction>
				<Transaction>
					<Type>PAYMENT</Type>
					<ID>4217669601</ID>
					<CashValue>
						<Amount>131.00</Amount>
						<CurrencyCode>USD</CurrencyCode>
					</CashValue>
					<Time>2012-05-01T08:12:32.012Z</Time>
					<Payer>CONTACT1</Payer>
					<Category>sale</Category>
					<Method>
						<Type>DIRECT_DEBIT</Type>
						<Account>FIACCT5</Account>
					</Method>
				</Transaction>
				<Transaction>
					<Type>TRANSFER</Type>
					<ID>4217669605</ID>
					<CashValue>
						<Amount>34.95</Amount>
						<CurrencyCode>USD</CurrencyCode>
					</CashValue>
					<Time>2012-05-01T08:12:32.012Z</Time>
					<TransferType>WIRE</TransferType>
					<FromAccount>FIACCT1</FromAccount>
					<ToAccount>FIACCT5</ToAccount>
					<Memo>Bought a new Unflippable GustBuster Metro umbrella and I don't want the check to bounce</Memo>
				</Transaction>
			</Transactions>
			<CustomData>
				<CustomObject>
					<CustomObjectName>acmeNewApplication</CustomObjectName>
					<CustomFields>
						<CustomField>
							<FieldName>liens</FieldName>
							<FieldValue>0</FieldValue>
						</CustomField>
						<CustomField>
							<FieldName>bankruptcies</FieldName>
							<FieldValue>0</FieldValue>
						</CustomField>
						<CustomField>
							<FieldName>propertiesOwned</FieldName>
							<FieldValue>2</FieldValue>
						</CustomField>
						<CustomField>
							<FieldName>criminalCheck</FieldName>
							<FieldValue>false</FieldValue>
						</CustomField>
					</CustomFields>
				</CustomObject>
			</CustomData>
		</Event>
	</FraudNetOptionalInput>
         </PreciseIDServer>
      </Products>
   </Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all2</con:username>
            <con:password>Sctest37</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="STG-Inquiry 2" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd">
	<EAI>11111111</EAI>
    <DBHost>PRECISE_ID_TEST</DBHost>
    <ReferenceId>TC 10-021 V5 XG 2</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
                <KBAAddOn>
                    <XMLVersion>5</XMLVersion>
                    <OutWalletRequestData>
                        <SessionID>J3A4A2IGLTPBXTVW30RNNZDL.preciseId3-1805181319350170349130423</SessionID>
                        <OutWalletQuestionsRequest>Y</OutWalletQuestionsRequest>
                    </OutWalletRequestData>
                </KBAAddOn>
            </PreciseIDServer>
        </Products>
    </Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="STG-Inquiry 3" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd">
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>TC 10-021 V5 XG 3</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<KBAAnswers>
					<OutWalletAnswerData>
						<SessionID>JADR2TJ1Z2ZHZCN26AW3NECS.preciseId3-1805181314270170539675629</SessionID>
						<OutWalletAnswers>
							<OutWalletAnswer1>1</OutWalletAnswer1>
							<OutWalletAnswer2>1</OutWalletAnswer2>
							<OutWalletAnswer3>1</OutWalletAnswer3>
							<OutWalletAnswer4>1</OutWalletAnswer4>
							<OutWalletAnswer5>1</OutWalletAnswer5>
							<OutWalletAnswer6>1</OutWalletAnswer6>
							<OutWalletAnswer7>1</OutWalletAnswer7>
							<OutWalletAnswer8>1</OutWalletAnswer8>
						</OutWalletAnswers>
					</OutWalletAnswerData>
				</KBAAnswers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="Prod-Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://pid-mck-sgw.secure.experian.com/fraudsolutions/xmlgateway/preciseid</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<NetConnectRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="S:\Net Connect SDK\XML Schemas\Precise ID Schemas\PreciseIdInquiry.xsd">
  <EAI>11111111</EAI>
  <DBHost>PRECISE_ID_TEST</DBHost>
  <ReferenceId>SC</ReferenceId>
  <Request>
    <Products>
      <PreciseIDServer>
        <XMLVersion>05</XMLVersion>
        <Subscriber>
          <Preamble>TCA1</Preamble>
          <OpInitials>SG</OpInitials>
          <SubCode>2999054</SubCode>
        </Subscriber>
        <PrimaryApplicant>
          <Name>
            <Surname>CONSUMER</Surname>
            <First>EVCARRIE</First>
            <Middle/>
            <Gen/>
          </Name>
          <SSN>666606169</SSN>
          <CurrentAddress>
            <Street>4437 SPRUCE ST</Street>
            <City>PHILADELPHIA</City>
            <State>PA</State>
            <Zip>19104</Zip>
          </CurrentAddress>
          <DriverLicense>
            <State>MD</State>
            <Number>D434585385623</Number>
          </DriverLicense>
          <Phone>
            <Number>8437668082</Number>
            <Type/>
          </Phone>
          <DOB>05171954</DOB>
          <YOB>1954</YOB>
          <EmailAddress>rstanley@xyz.abc</EmailAddress>
        </PrimaryApplicant>
        <Verbose>N</Verbose>
        <Vendor>
          <VendorNumber>0</VendorNumber>
          <VendorVersion>0</VendorVersion>
        </Vendor>
        <Options>
          <BrokerNumber/>
          <EndUser/>
          <FreezeKeyPIN/>
          <ReferenceNumber>Product Option 11</ReferenceNumber>
          <PreciseIDType>11</PreciseIDType>
          <DetailRequest>D</DetailRequest>
          <InquiryChannel/>
        </Options>
        <CheckPointOptions>
          <LevelOfDetail>F</LevelOfDetail>
          <EchoInput>N</EchoInput>
          <EDAFallThru>N</EDAFallThru>
          <EDABestPickCutoff>00</EDABestPickCutoff>
          <NoOfEDAListings>00</NoOfEDAListings>
          <Validation>Y</Validation>
          <PrevAddrSegment>Y</PrevAddrSegment>
        </CheckPointOptions>
        <CreditCardNumbers>
          <CreditCardNumber1>1234567890123456</CreditCardNumber1>
          <CreditCardType1>U</CreditCardType1>
        </CreditCardNumbers>
        <DIDOptionalInput>
          <Provider>
                <Code>1</Code>
                <ID>871200</ID>
                <Account>OLTP</Account>
                <Passcode>KNATEBTR</Passcode>
                <RuleType>device_rules</RuleType>
          </Provider>
          <EndUserInfo>
            <IPAddress>201.81.101.31</IPAddress>
            <AccountCode>testUserName</AccountCode>
            <DeviceData>0400iKpbfqLEmU0Nf94lis1ztjVPc4aVJjdv0Hfp5ie720zAYCvS7OtPxNneFlRWa5aLUcK30dwmViqvhHdm1Gpvf3VLKa5eUqvJ5dzgojLfFGvNZhMeU+JzHki2YJy65DPMTB2uAnj83NkM9YLJcLTb+jC3o7rRuIcSMpHWEfl3VxkMB2VdwqkGCvjtmwQK0uWOItjVWNpQTjhCcvU5ohbUH7I+vS3zO1UWdlhZqckrwKHR9GcEnS47LLjm/oVrzW+/CrQBWQG1zG/ukbcrtGmxS4zO8FirDOFkCrQBWQG1zG+/72jcLCGE0ie1jehuF2jN8iqjg7fhz5Myvw7cyFESMsI1fBsj22ihL//7FpNQYm9OfdJx+sF9hGINuLE+g8I1pJ7nkWK+DXec/FX0MVcVvOZ/VmS6d8m3sAHJzyTcLD8nuGn2daydCY6H2W0dl9AiquzxZVp0p5/JjfUl21le5qYiJ/+IO4wJmowdaTcNfAYWod+/qWBmr8j/1NfhGOZnMGfGDfMJjL3zw8tBXohh+AR8iQtr7mSLO7ZU2hwEfvz+mvvWgPnrWivCW8vF+etKalu32CHmgwR168tYlHbse4QonmwROuiCTLal/4mb5iVkAb4L8691dW6w9P24IkHUSLbut1osmiOfHUJkTVP7ELhW1HQIpGtAAfOPjzqyODJq6jD4M/v1CI9qpLt2ZL85liLWjhsXbUUZzWirhkF9IO7A1X3WIRVXIk58X3QGmllRY0C1ZOY4IthwxAWXN43SIk58X3QGmln4UhV6FxvQ8cSazjwVVkVvs+u7ochn4W0O8nAEuGqAHulqWhTCsvxK5nQqM2uX3SIgzJ8FJa/++x9ec0zrP1Wvqu0iTtgz7O/VySFz01VhlCDbualhm86n9Q1YmnGrAk+Ep8uyCvjkIJV09yla79Un8W61wwZHWtGGw7186TE2oIEm1vjr0xhSRgEqSehE5i3nk3VPui7oa1Mpzu5bzRoT4yvRhXnDkItVs9oTVZdgrKnxIM02nZ4nu/0h39YH2VVws7DDa5p1c0xv52IlUgwHgWTT3Qdb334=</DeviceData>



          </EndUserInfo>
          <Options>
            <ProdOpt>1</ProdOpt>
            <DetailRequest>d</DetailRequest>
          </Options>
        </DIDOptionalInput>
      </PreciseIDServer>
    </Products>
  </Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_pid</con:username>
            <con:password>Scprod33</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="STG-Inquiry 1 (V6)" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><Experian>
	<FraudSolutions>
		<Request>
			<Products>
				<PreciseIDServer>
					<PIDXMLVersion>06.00</PIDXMLVersion>
					<Subscriber>
						<Preamble>TCA1</Preamble>
						<OpInitials>SG</OpInitials>
						<SubCode>1977704</SubCode>
					</Subscriber>
					<PrimaryApplicant>
						<Name>
							<Surname>MORTON</Surname>
							<First>TODD</First>
							<Middle/>
							<Gen/>
						</Name>
						<SSN>666227409</SSN>
						<CurrentAddress>
							<Street>1594 BOND ST</Street>
							<City>AKRON</City>
							<State>OH</State>
							<Zip>44313</Zip>
						</CurrentAddress>
						<PreviousAddress>
							<Street/>
							<City/>
							<State/>
							<Zip/>
						</PreviousAddress>
						<DriverLicense>
							<State/>
							<Number/>
						</DriverLicense>
						<Phones>
							<Phone>
								<Number/>
								<Type/>
							</Phone>
						</Phones>
						<Employment>
							<Company/>
							<Address/>
							<City/>
							<State/>
							<Zip/>
						</Employment>
						<Age/>
						<DOB/>
						<YOB>1967</YOB>
						<MothersMaidenName/>
						<SpouseName/>
					</PrimaryApplicant>
					<AccountType>
						<Type/>
						<Terms/>
						<AbbreviatedAmount/>
						<FullAmount/>
					</AccountType>
					<AddOns value="Y">
						<NewConsumer/>
						<DirectCheck/>
						<ProfileSummary/>
						<RiskModels>
							<Model/>
							<Model/>
							<Model/>
							<Model/>
							<Model/>
						</RiskModels>
						<Demographics>
							<Phone/>
							<GEOCode/>
						</Demographics>
					</AddOns>
					<Verbose>Y</Verbose>
					<Vendor>
						<VendorNumber/>
						<VendorVersion/>
					</Vendor>
					<Options>
						<BrokerNumber/>
						<EndUser/>
						<FreezeKeyPIN/>
						<ReferenceNumber>TC 17-015 V6 XMLGateway Thin File</ReferenceNumber>
						<?The following three tags are (PID-) Precise ID parameters?>
						<ProductOption>2</ProductOption>
						<DetailRequest/>
						<InquiryChannel/>
					</Options>
					<NFD>
						<NFDSubscriberNumber>200</NFDSubscriberNumber>
						<DetailedResponse/>
					</NFD>
					<BankingInformation>
						<Primary>
							<AccountNumber/>
							<RoutingNumber/>
							<TimeWithBank/>
							<BankingRelationship/>
						</Primary>
					</BankingInformation>
					<ResidenceInformation>
						<Primary>
							<ResidenceType/>
							<DurationOfStayInMonths/>
							<PrevResidenceType/>
							<PrevDurationOfStayInMonths/>
						</Primary>
					</ResidenceInformation>
					<TotalIncome>
						<Primary>
							<TotGrossIncomeFreq/>
							<TotGrossIncomeAmt/>
							<SalaryFreq/>
							<SalaryAmt/>
							<OtherGrossIncomeFreq/>
							<OtherGrossIncomeAmt/>
						</Primary>
					</TotalIncome>
					<Dependents>
						<Primary/>
					</Dependents>
					<JobHistory>
						<Primary>
							<CurrentJobType/>
							<CurrentJobDuration>
								<DurationInMonths/>
							</CurrentJobDuration>
						</Primary>
					</JobHistory>
					<ReferenceNumber/>
					<CCNumerics>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
						<CCNumeric/>
					</CCNumerics>
					<CCStrings>
						<CCString/>
						<CCString/>
						<CCString/>
						<CCString/>
						<CCString/>
						<CCString/>
						<CCString/>
						<CCString/>
						<CCString/>
						<CCString/>
					</CCStrings>
					<IPAddress/>
					<CreditCardNumbers>
						<CreditCardNumber1>4567123476541234</CreditCardNumber1>
						<CreditCardType1>C</CreditCardType1>
						<CreditCardNumber2/>
						<CreditCardType2/>
						<CreditCardNumber3/>
						<CreditCardType3/>
					</CreditCardNumbers>
					<KBA>
						<RiskStrategyNumber/>
						<LanguageCode>en</LanguageCode>
						<ChampionChallengerRandomNumber/>
						<UserDefinedNumerics>
							<UserDefinedNumeric1/>
							<UserDefinedNumeric2/>
							<UserDefinedNumeric3/>
							<UserDefinedNumeric4/>
						</UserDefinedNumerics>
						<UserDefinedTexts>
							<UserDefinedText1/>
							<UserDefinedText2/>
							<UserDefinedText3/>
							<UserDefinedText4/>
						</UserDefinedTexts>
						<UserDefinedDates>
							<UserDefinedDate1/>
							<UserDefinedDate2/>
						</UserDefinedDates>
					</KBA>
					<?The EarlyWarningOptionalInput tag can only be used when a client is properly set up to access Early Warning Services’ Identity Chek processing service.?>
					<EarlyWarningOptionalInput>
						<OrgReportingUnit/>
						<Branch/>
						<CSRID/>
						<Gender/>
						<CustomerUse1/>
						<IdentificationType/>
						<IdentificationNumber/>
						<IdentificationState/>
						<IdentificationCountryCode/>
						<IdentificationExpirationDate/>
					</EarlyWarningOptionalInput>
					<?The CustomerManagement tag can only be used when a client is properly set up to access the Customer Management service.?>
					<CMOptionalInput>
						<CustomerCreationDate/>
						<AccountOpenDate/>
						<ApplicationScore/>
						<ApplicationTranID/>
						<ApplicationSysID/>
					</CMOptionalInput>
				</PreciseIDServer>
			</Products>
		</Request>
	</FraudSolutions>
</Experian>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all2</con:username>
            <con:password>Sctest37</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="STG-Inquiry 2 (V6)" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="ISO-8859-2" standalone="no"?><Experian>
	<FraudSolutions>
		<Request>
			<Products>
				<PreciseIDServer>
					<PIDXMLVersion>06.00</PIDXMLVersion>
					<KBAAddOn>
						<OutWalletRequestData>
							<SessionID>I3C14FVTY8YUANL0MGK2NCXJ.preciseId2-1805081208250170243651185</SessionID>
							<OutWalletQuestionsRequest>Y</OutWalletQuestionsRequest>
						</OutWalletRequestData>
					</KBAAddOn>
				</PreciseIDServer>
			</Products>
		</Request>
	</FraudSolutions>
</Experian>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="STG-Inquiry 3 (V6)" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><Experian>
	<FraudSolutions>
		<Request>
			<Products>
				<PreciseIDServer>
					<PIDXMLVersion>06.00</PIDXMLVersion>
					<KBAAnswers>
						<OutWalletAnswerData>
							<SessionID>I3C14FVTY8YUANL0MGK2NCXJ.preciseId2-1805081208250170243651185</SessionID>
							<OutWalletAnswers>
								<OutWalletAnswer1>5</OutWalletAnswer1>
								<OutWalletAnswer2>1</OutWalletAnswer2>
								<OutWalletAnswer3>1</OutWalletAnswer3>
								<OutWalletAnswer4>1</OutWalletAnswer4>
								<OutWalletAnswer5>1</OutWalletAnswer5>
								<OutWalletAnswer6>1</OutWalletAnswer6>
								<OutWalletAnswer7>1</OutWalletAnswer7>
								<OutWalletAnswer8>1</OutWalletAnswer8>
							</OutWalletAnswers>
						</OutWalletAnswerData>
					</KBAAnswers>
				</PreciseIDServer>
			</Products>
		</Request>
	</FraudSolutions>
</Experian>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="Alt-STG-Inquiry 1" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="channel" value="ALT-ENV" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest>
  <EAI>11111111</EAI>
  <DBHost>PRECISE_ID_TEST</DBHost>
  <ReferenceId>TC 11-021 V5 NC 1</ReferenceId>
  <Request>
    <Products>
      <PreciseIDServer>
        <XMLVersion>5</XMLVersion>
        <Subscriber>
          <Preamble>TCA1</Preamble>
          <OpInitials>XX</OpInitials>
          <SubCode>1977704</SubCode>
        </Subscriber>
        <PrimaryApplicant>
          <Name>
            <Surname>STANLEY</Surname>
            <First>ROGER</First>
            <Middle>D</Middle>
            <Gen/>
          </Name>
          <SSN>666542396</SSN>
          <CurrentAddress>
            <Street>100 50TH ST SW APT 125</Street>
            <City>GRAND RAPIDS</City>
            <State>MI</State>
            <Zip>49548</Zip>
          </CurrentAddress>
          <DriverLicense>
            <State>MI</State>
            <Number>S550792603937</Number>
          </DriverLicense>
          <Phone>
            <Number>6165311574</Number>
          </Phone>
          <DOB>12091949</DOB>
        </PrimaryApplicant>
        <Verbose>Y</Verbose>
        <Options>
          <ReferenceNumber>TC 11-021 V5 NC KIQ Questions</ReferenceNumber>
          <PreciseIDType>2</PreciseIDType>
        </Options>
        <NFD>
          <NFDSubscriberNumber>200</NFDSubscriberNumber>
        </NFD>
        <CreditCardNumbers>
          <CreditCardNumber1>5407890101851202</CreditCardNumber1>
          <CreditCardType1>C</CreditCardType1>
        </CreditCardNumbers>
      </PreciseIDServer>
    </Products>
  </Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="Alt-STG-Inquiry 2" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="channel" value="ALT-ENV" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd">
	<EAI>11111111</EAI>
    <DBHost>PRECISE_ID_TEST</DBHost>
    <ReferenceId>TC 10-021 V5 XG 2</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
                <KBAAddOn>
                    <XMLVersion>5</XMLVersion>
                    <OutWalletRequestData>
                        <SessionID>258Q3HXLI5OYC2QQMC9RY3MD.preciseId2b-1805181318240170349127271</SessionID>
                        <OutWalletQuestionsRequest>Y</OutWalletQuestionsRequest>
                    </OutWalletRequestData>
                </KBAAddOn>
            </PreciseIDServer>
        </Products>
    </Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="Alt-STG-Inquiry 3" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="channel" value="ALT-ENV" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd">
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>TC 10-021 V5 XG 3</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<KBAAnswers>
					<OutWalletAnswerData>
						<SessionID>YCVINQ7E2XQ626SUHV4ALDVO.preciseId2-1805081207090170243648833</SessionID>
						<OutWalletAnswers>
							<OutWalletAnswer1>1</OutWalletAnswer1>
							<OutWalletAnswer2>1</OutWalletAnswer2>
							<OutWalletAnswer3>1</OutWalletAnswer3>
							<OutWalletAnswer4>1</OutWalletAnswer4>
							<OutWalletAnswer5>1</OutWalletAnswer5>
							<OutWalletAnswer6>1</OutWalletAnswer6>
							<OutWalletAnswer7>1</OutWalletAnswer7>
							<OutWalletAnswer8>1</OutWalletAnswer8>
						</OutWalletAnswers>
					</OutWalletAnswerData>
				</KBAAnswers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="DemoTier1-Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="application/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>TC 10-021 V5 XG 1</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>6992650</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>STANLEY</Surname>
						<First>ROGER</First>
						<Middle>D</Middle>
						<Gen/>
					</Name>
					<SSN>666542396</SSN>
					<CurrentAddress>
						<Street>100 50TH ST SW APT 125</Street>
						<City>GRAND RAPIDS</City>
						<State>MI</State>
						<Zip>49548</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>MI</State>
						<Number>S550792603937</Number>
					</DriverLicense>
					<Phone>
						<Number>6165311574</Number>
					</Phone>
					<DOB>12091949</DOB>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>TC 10-021 V5 XG KIQ Questions</ReferenceNumber>
					<PreciseIDType>10</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
				<CreditCardNumbers>
					<CreditCardNumber1>5407890101851202</CreditCardNumber1>
					<CreditCardType1>C</CreditCardType1>
				</CreditCardNumbers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_demo_pid</con:username>
            <con:password>Scdemo36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
        <con:request name="DemoTier2-Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="application/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
            <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
          </con:settings>
          <con:endpoint>https://dm2.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>TC 10-021 V5 XG 1</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>6992650</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>STANLEY</Surname>
						<First>ROGER</First>
						<Middle>D</Middle>
						<Gen/>
					</Name>
					<SSN>666542396</SSN>
					<CurrentAddress>
						<Street>100 50TH ST SW APT 125</Street>
						<City>GRAND RAPIDS</City>
						<State>MI</State>
						<Zip>49548</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>MI</State>
						<Number>S550792603937</Number>
					</DriverLicense>
					<Phone>
						<Number>6165311574</Number>
					</Phone>
					<DOB>12091949</DOB>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>TC 10-021 V5 XG KIQ Questions</ReferenceNumber>
					<PreciseIDType>10</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
				<CreditCardNumbers>
					<CreditCardNumber1>5407890101851202</CreditCardNumber1>
					<CreditCardType1>C</CreditCardType1>
				</CreditCardNumbers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
          <con:credentials>
            <con:username>schuang_demo_pid</con:username>
            <con:password>Scdemo36</con:password>
            <con:domain/>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:preemptive>true</con:preemptive>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" id="6559cbc3-34d0-4337-b00f-fc92c58697af" wadlVersion="http://wadl.dev.java.net/2009/02" name="NetConnect" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>https://stg-sgw2.experian.com</con:endpoint>
    </con:endpoints>
    <con:resource name="NetConnectServlet" path="/netconnect2_0/servlets/NetConnectServlet" id="a7db9ec6-9484-4e36-a734-450aece39c5b">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>NETCONNECT_TRANSACTION</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest> 	<EAI>11111111</EAI> 	<DBHost>PRECISE_ID_TEST</DBHost> 	<ReferenceId>TC 11-021 V5 XG 1</ReferenceId> 	<Request> 		<Products> 			<PreciseIDServer> 				<XMLVersion>5</XMLVersion> 				<Subscriber> 					<Preamble>TCA1</Preamble> 					<OpInitials>XX</OpInitials> 					<SubCode>6992650</SubCode> 				</Subscriber> 				<PrimaryApplicant> 					<Name> 						<Surname>STANLEY</Surname> 						<First>ROGER</First> 						<Middle>D</Middle> 						<Gen/> 					</Name> 					<SSN>666542396</SSN> 					<CurrentAddress> 						<Street>100 50TH ST SW APT 125</Street> 						<City>GRAND RAPIDS</City> 						<State>MI</State> 						<Zip>49548</Zip> 					</CurrentAddress> 					<DriverLicense> 						<State>MI</State> 						<Number>S550792603937</Number> 					</DriverLicense> 					<Phone> 						<Number>6165311574</Number> 					</Phone> 					<DOB>12091949</DOB> 				</PrimaryApplicant> 				<Verbose>Y</Verbose> 				<Options> 					<ReferenceNumber>TC 11-021 V5 XG KIQ Questions</ReferenceNumber> 					<PreciseIDType>10</PreciseIDType> 				</Options> 				<NFD> 					<NFDSubscriberNumber>200</NFDSubscriberNumber> 				</NFD> 				<CreditCardNumbers> 					<CreditCardNumber1>5407890101851202</CreditCardNumber1> 					<CreditCardType1>C</CreditCardType1> 				</CreditCardNumbers> 			</PreciseIDServer> 		</Products> 	</Request> </NetConnectRequest>]]></con:value>
          <con:style>QUERY</con:style>
          <con:default><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><NetConnectRequest> 	<EAI>11111111</EAI> 	<DBHost>PRECISE_ID_TEST</DBHost> 	<ReferenceId>TC 11-021 V5 XG 1</ReferenceId> 	<Request> 		<Products> 			<PreciseIDServer> 				<XMLVersion>5</XMLVersion> 				<Subscriber> 					<Preamble>TCA1</Preamble> 					<OpInitials>XX</OpInitials> 					<SubCode>6992650</SubCode> 				</Subscriber> 				<PrimaryApplicant> 					<Name> 						<Surname>STANLEY</Surname> 						<First>ROGER</First> 						<Middle>D</Middle> 						<Gen/> 					</Name> 					<SSN>666542396</SSN> 					<CurrentAddress> 						<Street>100 50TH ST SW APT 125</Street> 						<City>GRAND RAPIDS</City> 						<State>MI</State> 						<Zip>49548</Zip> 					</CurrentAddress> 					<DriverLicense> 						<State>MI</State> 						<Number>S550792603937</Number> 					</DriverLicense> 					<Phone> 						<Number>6165311574</Number> 					</Phone> 					<DOB>12091949</DOB> 				</PrimaryApplicant> 				<Verbose>Y</Verbose> 				<Options> 					<ReferenceNumber>TC 11-021 V5 XG KIQ Questions</ReferenceNumber> 					<PreciseIDType>10</PreciseIDType> 				</Options> 				<NFD> 					<NFDSubscriberNumber>200</NFDSubscriberNumber> 				</NFD> 				<CreditCardNumbers> 					<CreditCardNumber1>5407890101851202</CreditCardNumber1> 					<CreditCardType1>C</CreditCardType1> 				</CreditCardNumbers> 			</PreciseIDServer> 		</Products> 	</Request> </NetConnectRequest>]]></con:default>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="NetConnectServlet" id="5d8d7234-f26a-4910-97de-99bf0750f819" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST">
          <con:mediaType>text/xml</con:mediaType>
          <con:params/>
          <con:element>NetConnectRequest</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:net="http://www.experian.com/NetConnectResponse">net:NetConnectResponse</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element>NetConnectRequest</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/x-www-form-urlencoded</con:mediaType>
          <con:params/>
          <con:element>NetConnectRequest</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>multipart/form-data</con:mediaType>
          <con:params/>
          <con:element>NetConnectRequest</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/xml;charset=UTF-8</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:auth="http://www.experian.com/ewacs/auth">auth:response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/x-www-form-urlencoded;charset=UTF-8</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:auth="http://www.experian.com/ewacs/auth">auth:response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/xml;charset=UTF-8</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:auth="http://www.experian.com/ewacs/auth">auth:response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>multipart/form-data; boundary="----=_Part_0_2027451839.1495481215116"</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>404 400</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="STG-Inquiry 1" id="6ba410f1-3767-4514-8561-258b82f9a4bd" mediaType="application/x-www-form-urlencoded" postQueryString="true">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="RecordRequestRepresentations">true</con:setting>
            <con:setting id="AutoInferSchemas">false</con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request/>
          <con:originalUri>https://stg-sgw2.experian.com/netconnect2_0/servlets/NetConnectServlet</con:originalUri>
          <con:credentials>
            <con:username>schuang_all2</con:username>
            <con:password>Sctest37</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="NETCONNECT_TRANSACTION" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?>&lt;NetConnectRequest>   &lt;EAI>11111111&lt;/EAI>   &lt;DBHost>PRECISE_ID_TEST&lt;/DBHost>   &lt;ReferenceId>TC 11-021 V5 NC 1&lt;/ReferenceId>   &lt;Request>     &lt;Products>       &lt;PreciseIDServer>         &lt;XMLVersion>5&lt;/XMLVersion>         &lt;Subscriber>           &lt;Preamble>TCA1&lt;/Preamble>           &lt;OpInitials>XX&lt;/OpInitials>           &lt;SubCode>1977704&lt;/SubCode>         &lt;/Subscriber>         &lt;PrimaryApplicant>           &lt;Name>             &lt;Surname>STANLEY&lt;/Surname>             &lt;First>ROGER&lt;/First>             &lt;Middle>D&lt;/Middle>             &lt;Gen/>           &lt;/Name>           &lt;SSN>666542396&lt;/SSN>           &lt;CurrentAddress>             &lt;Street>100 50TH ST SW APT 125&lt;/Street>             &lt;City>GRAND RAPIDS&lt;/City>             &lt;State>MI&lt;/State>             &lt;Zip>49548&lt;/Zip>           &lt;/CurrentAddress>           &lt;DriverLicense>             &lt;State>MI&lt;/State>             &lt;Number>S550792603937&lt;/Number>           &lt;/DriverLicense>           &lt;Phone>             &lt;Number>6165311574&lt;/Number>           &lt;/Phone>           &lt;DOB>12091949&lt;/DOB>         &lt;/PrimaryApplicant>         &lt;Verbose>Y&lt;/Verbose>         &lt;Options>           &lt;ReferenceNumber>TC 11-021 V5 NC KIQ Questions&lt;/ReferenceNumber>           &lt;PreciseIDType>2&lt;/PreciseIDType>         &lt;/Options>         &lt;NFD>           &lt;NFDSubscriberNumber>200&lt;/NFDSubscriberNumber>         &lt;/NFD>         &lt;CreditCardNumbers>           &lt;CreditCardNumber1>5407890101851202&lt;/CreditCardNumber1>           &lt;CreditCardType1>C&lt;/CreditCardType1>         &lt;/CreditCardNumbers>       &lt;/PreciseIDServer>     &lt;/Products>   &lt;/Request> &lt;/NetConnectRequest>" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>NETCONNECT_TRANSACTION</con:entry>
          </con:parameterOrder>
        </con:request>
        <con:request name="STG-Inquiry 2" id="6ba410f1-3767-4514-8561-258b82f9a4bd" mediaType="application/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="RecordRequestRepresentations">true</con:setting>
            <con:setting id="AutoInferSchemas">false</con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request/>
          <con:originalUri>https://stg-sgw2.experian.com/netconnect2_0/servlets/NetConnectServlet</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="NETCONNECT_TRANSACTION" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?>&lt;NetConnectRequest xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd&quot;>   &lt;EAI>11111111&lt;/EAI>   &lt;DBHost>PRECISE_ID_TEST&lt;/DBHost>   &lt;ReferenceId>TC 10-021 V5 NC 2&lt;/ReferenceId>   &lt;Request>     &lt;Products>       &lt;PreciseIDServer>         &lt;KBAAddOn>           &lt;XMLVersion>5&lt;/XMLVersion>           &lt;OutWalletRequestData>             &lt;SessionID>SF5XTQCWK1IBRZDUGBJNZRNH.preciseId4&lt;/SessionID>             &lt;OutWalletQuestionsRequest>Y&lt;/OutWalletQuestionsRequest>           &lt;/OutWalletRequestData>         &lt;/KBAAddOn>       &lt;/PreciseIDServer>     &lt;/Products>   &lt;/Request> &lt;/NetConnectRequest> " xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>NETCONNECT_TRANSACTION</con:entry>
          </con:parameterOrder>
        </con:request>
        <con:request name="STG-Inquiry 3" id="6ba410f1-3767-4514-8561-258b82f9a4bd" mediaType="application/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="RecordRequestRepresentations">true</con:setting>
            <con:setting id="AutoInferSchemas">false</con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request/>
          <con:originalUri>https://stg-sgw2.experian.com/netconnect2_0/servlets/NetConnectServlet</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="NETCONNECT_TRANSACTION" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?>&lt;NetConnectRequest xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd&quot;>   &lt;EAI>11111111&lt;/EAI>   &lt;DBHost>PRECISE_ID_TEST&lt;/DBHost>   &lt;ReferenceId>TC 10-021 V5 NC 3&lt;/ReferenceId>   &lt;Request>     &lt;Products>       &lt;PreciseIDServer>         &lt;XMLVersion>5&lt;/XMLVersion>         &lt;KBAAnswers>           &lt;OutWalletAnswerData>             &lt;SessionID>SF5XTQCWK1IBRZDUGBJNZRNH.preciseId4&lt;/SessionID>             &lt;OutWalletAnswers>               &lt;OutWalletAnswer1>1&lt;/OutWalletAnswer1>               &lt;OutWalletAnswer2>1&lt;/OutWalletAnswer2>               &lt;OutWalletAnswer3>1&lt;/OutWalletAnswer3>               &lt;OutWalletAnswer4>1&lt;/OutWalletAnswer4>               &lt;OutWalletAnswer5>1&lt;/OutWalletAnswer5>               &lt;OutWalletAnswer6>1&lt;/OutWalletAnswer6>               &lt;OutWalletAnswer7>1&lt;/OutWalletAnswer7>               &lt;OutWalletAnswer8>1&lt;/OutWalletAnswer8>             &lt;/OutWalletAnswers>           &lt;/OutWalletAnswerData>         &lt;/KBAAnswers>       &lt;/PreciseIDServer>     &lt;/Products>   &lt;/Request> &lt;/NetConnectRequest> " xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>NETCONNECT_TRANSACTION</con:entry>
          </con:parameterOrder>
        </con:request>
        <con:request name="Demo-Inquiry 1" id="6ba410f1-3767-4514-8561-258b82f9a4bd" mediaType="application/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="RecordRequestRepresentations">true</con:setting>
            <con:setting id="AutoInferSchemas">false</con:setting>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting>
          </con:settings>
          <con:encoding>UTF-8</con:encoding>
          <con:endpoint>https://dm-sgw2.experiannet.com</con:endpoint>
          <con:request/>
          <con:originalUri>https://stg-sgw2.experian.com/netconnect2_0/servlets/NetConnectServlet</con:originalUri>
          <con:credentials>
            <con:username>schuang_demo_pid</con:username>
            <con:password>Scdemo36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="NETCONNECT_TRANSACTION" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?>&lt;NetConnectRequest>  &lt;EAI>11111111&lt;/EAI>  &lt;DBHost>PRECISE_ID_TEST&lt;/DBHost>  &lt;ReferenceId>TC 10-021 V5 NC 1&lt;/ReferenceId>  &lt;Request>   &lt;Products>    &lt;PreciseIDServer>     &lt;XMLVersion>5&lt;/XMLVersion>     &lt;Subscriber>      &lt;Preamble>TCA1&lt;/Preamble>      &lt;OpInitials>XX&lt;/OpInitials>      &lt;SubCode>6992650&lt;/SubCode>     &lt;/Subscriber>     &lt;PrimaryApplicant>      &lt;Name>       &lt;Surname>STANLEY&lt;/Surname>       &lt;First>ROGER&lt;/First>       &lt;Middle>D&lt;/Middle>       &lt;Gen/>      &lt;/Name>      &lt;SSN>666542396&lt;/SSN>      &lt;CurrentAddress>       &lt;Street>100 50TH ST SW APT 125&lt;/Street>       &lt;City>GRAND RAPIDS&lt;/City>       &lt;State>MI&lt;/State>       &lt;Zip>49548&lt;/Zip>      &lt;/CurrentAddress>      &lt;DriverLicense>       &lt;State>MI&lt;/State>       &lt;Number>S550792603937&lt;/Number>      &lt;/DriverLicense>      &lt;Phone>       &lt;Number>6165311574&lt;/Number>      &lt;/Phone>      &lt;DOB>12091949&lt;/DOB>     &lt;/PrimaryApplicant>     &lt;Verbose>Y&lt;/Verbose>     &lt;Options>      &lt;ReferenceNumber>TC 10-021 V5 NC KIQ Questions&lt;/ReferenceNumber>      &lt;PreciseIDType>10&lt;/PreciseIDType>     &lt;/Options>     &lt;NFD>      &lt;NFDSubscriberNumber>200&lt;/NFDSubscriberNumber>     &lt;/NFD>     &lt;CreditCardNumbers>      &lt;CreditCardNumber1>5407890101851202&lt;/CreditCardNumber1>      &lt;CreditCardType1>C&lt;/CreditCardType1>     &lt;/CreditCardNumbers>    &lt;/PreciseIDServer>   &lt;/Products>  &lt;/Request> &lt;/NetConnectRequest>" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>NETCONNECT_TRANSACTION</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" id="7e030e81-b2de-4010-98a2-427d97a60325" wadlVersion="http://wadl.dev.java.net/2009/02" name="WebService" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
    </con:endpoints>
    <con:resource name="PreciseidAPI" path="/fraudsolutions/webservices/preciseid/PreciseidAPI" id="7b8a654d-440f-4608-a6ea-995227d0ac8d">
      <con:settings/>
      <con:parameters/>
      <con:method name="PreciseidAPI" id="51bbd272-64fb-4151-839f-0f2482b93a88" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST">
          <con:mediaType>text/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html;charset=ISO-8859-1</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>302</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">soapenv:Envelope</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:request name="STG-Inquiry1" id="fa084d7f-e09f-4913-8653-a11129fd5da4" mediaType="application/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SOAPAction" value="doInquiry" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
	<soapenv:Body>
		<ns3:PreciseIDServer xmlns:ns3="http://www.beans.preciseid.experian.com/PreciseIdInquiry">
			<ns3:XMLVersion>5</ns3:XMLVersion>
			<ns3:Subscriber>
				<ns3:Preamble>TCA1</ns3:Preamble>
				<ns3:OpInitials>XX</ns3:OpInitials>
				<ns3:SubCode>1977704</ns3:SubCode>
			</ns3:Subscriber>
			<ns3:PrimaryApplicant>
				<ns3:Name>
					<ns3:Surname>STANLEY</ns3:Surname>
					<ns3:First>ROGER</ns3:First>
					<ns3:Middle>D</ns3:Middle>
					<ns3:Gen/>
				</ns3:Name>
				<ns3:SSN>666542396</ns3:SSN>
				<ns3:CurrentAddress>
					<ns3:Street>100 50TH ST SW APT 125</ns3:Street>
					<ns3:City>GRAND RAPIDS</ns3:City>
					<ns3:State>MI</ns3:State>
					<ns3:Zip>49548</ns3:Zip>
				</ns3:CurrentAddress>
				<ns3:DriverLicense>
					<ns3:State>MI</ns3:State>
					<ns3:Number>S550792603937</ns3:Number>
				</ns3:DriverLicense>
				<ns3:Phone>
					<ns3:Number>6165311574</ns3:Number>
				</ns3:Phone>
				<ns3:DOB>12091949</ns3:DOB>
			</ns3:PrimaryApplicant>
			<ns3:Verbose>Y</ns3:Verbose>
			<ns3:Options>
				<ns3:ReferenceNumber>TC 01-021 V5 WS KIQ Questions</ns3:ReferenceNumber>
				<ns3:PreciseIDType>02</ns3:PreciseIDType>
			</ns3:Options>
			<ns3:NFD>
				<ns3:NFDSubscriberNumber>200</ns3:NFDSubscriberNumber>
			</ns3:NFD>
			<ns3:CreditCardNumbers>
				<ns3:CreditCardNumber1>5407890101851202</ns3:CreditCardNumber1>
				<ns3:CreditCardType1>C</ns3:CreditCardType1>
			</ns3:CreditCardNumbers>
		</ns3:PreciseIDServer>
	</soapenv:Body>
</soapenv:Envelope>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/fraudsolutions/webservices/preciseid/PreciseidAPI</con:originalUri>
          <con:credentials>
            <con:username>schuang_all2</con:username>
            <con:password>Sctest37</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
        <con:request name="STG-Inquiry2" id="da93259e-5795-4507-84be-c4d8baae44dc" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SOAPAction" value="doKBAAddOnInquiry" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:kba="http://www.beans.preciseid.experian.com/KBAAddOn">
	<soapenv:Header/>
	<soapenv:Body>
		<kba:PreciseIDServer>
			<kba:KBAAddOn>
				<kba:XMLVersion/>
				<kba:OutWalletRequestData>
					<kba:SessionID>EVH29QFYRUHJAERZLIZFDMA4.preciseId2-1805151141420170060501775</kba:SessionID>
					<kba:OutWalletQuestionsRequest>Y</kba:OutWalletQuestionsRequest>
				</kba:OutWalletRequestData>
			</kba:KBAAddOn>
		</kba:PreciseIDServer>
	</soapenv:Body>
</soapenv:Envelope>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/fraudsolutions/webservices/preciseid/PreciseidAPI</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
        <con:request name="STG-Inquiry3" id="da93259e-5795-4507-84be-c4d8baae44dc" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SOAPAction" value="doKBAInquiry" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:grad="http://www.beans.preciseid.experian.com/GradedAnswers">
	<soapenv:Header/>
	<soapenv:Body>
		<grad:PreciseIDServer>
			<grad:XMLVersion>5</grad:XMLVersion>
			<grad:KBAAnswers>
				<grad:OutWalletAnswerData>
					<grad:SessionID>EVH29QFYRUHJAERZLIZFDMA4.preciseId2-1805151141420170060501775</grad:SessionID>
					<grad:OutWalletAnswers>
						<grad:OutWalletAnswer1>1</grad:OutWalletAnswer1>
						<grad:OutWalletAnswer2>1</grad:OutWalletAnswer2>
						<grad:OutWalletAnswer3>1</grad:OutWalletAnswer3>
						<grad:OutWalletAnswer4>1</grad:OutWalletAnswer4>
						<grad:OutWalletAnswer5>1</grad:OutWalletAnswer5>
						<grad:OutWalletAnswer6>1</grad:OutWalletAnswer6>
						<grad:OutWalletAnswer7>1</grad:OutWalletAnswer7>
						<grad:OutWalletAnswer8>1</grad:OutWalletAnswer8>
					</grad:OutWalletAnswers>
				</grad:OutWalletAnswerData>
			</grad:KBAAnswers>
		</grad:PreciseIDServer>
	</soapenv:Body>
</soapenv:Envelope>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/fraudsolutions/webservices/preciseid/PreciseidAPI</con:originalUri>
          <con:credentials>
            <con:username>schuang_all</con:username>
            <con:password>Sctest36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
        <con:request name="Demo-Inquiry1" id="fa084d7f-e09f-4913-8653-a11129fd5da4" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SOAPAction" value="doInquiry" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://dm2.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
	<soapenv:Body>
		<ns3:PreciseIDServer xmlns:ns3="http://www.beans.preciseid.experian.com/PreciseIdInquiry">
			<ns3:XMLVersion>5</ns3:XMLVersion>
			<ns3:Subscriber>
				<ns3:Preamble>TCA1</ns3:Preamble>
				<ns3:OpInitials>XX</ns3:OpInitials>
				<ns3:SubCode>6992650</ns3:SubCode>
			</ns3:Subscriber>
			<ns3:PrimaryApplicant>
				<ns3:Name>
					<ns3:Surname>STANLEY</ns3:Surname>
					<ns3:First>ROGER</ns3:First>
					<ns3:Middle>D</ns3:Middle>
					<ns3:Gen/>
				</ns3:Name>
				<ns3:SSN>666542396</ns3:SSN>
				<ns3:CurrentAddress>
					<ns3:Street>100 50TH ST SW APT 125</ns3:Street>
					<ns3:City>GRAND RAPIDS</ns3:City>
					<ns3:State>MI</ns3:State>
					<ns3:Zip>49548</ns3:Zip>
				</ns3:CurrentAddress>
				<ns3:DriverLicense>
					<ns3:State>MI</ns3:State>
					<ns3:Number>S550792603937</ns3:Number>
				</ns3:DriverLicense>
				<ns3:Phone>
					<ns3:Number>6165311574</ns3:Number>
				</ns3:Phone>
				<ns3:DOB>12091949</ns3:DOB>
			</ns3:PrimaryApplicant>
			<ns3:Verbose>Y</ns3:Verbose>
			<ns3:Options>
				<ns3:ReferenceNumber>TC 01-021 V5 WS KIQ Questions</ns3:ReferenceNumber>
				<ns3:PreciseIDType>11</ns3:PreciseIDType>
			</ns3:Options>
			<ns3:NFD>
				<ns3:NFDSubscriberNumber>200</ns3:NFDSubscriberNumber>
			</ns3:NFD>
			<ns3:CreditCardNumbers>
				<ns3:CreditCardNumber1>5407890101851202</ns3:CreditCardNumber1>
				<ns3:CreditCardType1>C</ns3:CreditCardType1>
			</ns3:CreditCardNumbers>
		</ns3:PreciseIDServer>
	</soapenv:Body>
</soapenv:Envelope>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/fraudsolutions/webservices/preciseid/PreciseidAPI</con:originalUri>
          <con:credentials>
            <con:username>schuang_demo_pid</con:username>
            <con:password>Scdemo36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
        <con:request name="Demo-Inquiry2" id="da93259e-5795-4507-84be-c4d8baae44dc" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SOAPAction" value="doKBAAddOnInquiry" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://dm2.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:kba="http://www.beans.preciseid.experian.com/KBAAddOn">
	<soapenv:Header/>
	<soapenv:Body>
		<kba:PreciseIDServer>
			<kba:KBAAddOn>
				<kba:XMLVersion/>
				<kba:OutWalletRequestData>
					<kba:SessionID>T8FXZKWVNNMQ52F8RESFYYJM.pidd2v-1803051417390210126827650</kba:SessionID>
					<kba:OutWalletQuestionsRequest>Y</kba:OutWalletQuestionsRequest>
				</kba:OutWalletRequestData>
			</kba:KBAAddOn>
		</kba:PreciseIDServer>
	</soapenv:Body>
</soapenv:Envelope>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/fraudsolutions/webservices/preciseid/PreciseidAPI</con:originalUri>
          <con:credentials>
            <con:username>schuang_demo_pid</con:username>
            <con:password>Scdemo36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
        <con:request name="Demo-Inquiry3" id="da93259e-5795-4507-84be-c4d8baae44dc" mediaType="text/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="SOAPAction" value="doKBAInquiry" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://dm2.experian.com</con:endpoint>
          <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:grad="http://www.beans.preciseid.experian.com/GradedAnswers">
	<soapenv:Header/>
	<soapenv:Body>
		<grad:PreciseIDServer>
			<grad:XMLVersion>5</grad:XMLVersion>
			<grad:KBAAnswers>
				<grad:OutWalletAnswerData>
					<grad:SessionID>EMKP30WQ5PFVDR4QXTC1RNHL.pidd1v-1803051420120210126830786</grad:SessionID>
					<grad:OutWalletAnswers>
						<grad:OutWalletAnswer1>1</grad:OutWalletAnswer1>
						<grad:OutWalletAnswer2>1</grad:OutWalletAnswer2>
						<grad:OutWalletAnswer3>1</grad:OutWalletAnswer3>
						<grad:OutWalletAnswer4>1</grad:OutWalletAnswer4>
						<grad:OutWalletAnswer5>1</grad:OutWalletAnswer5>
						<grad:OutWalletAnswer6>1</grad:OutWalletAnswer6>
						<grad:OutWalletAnswer7>1</grad:OutWalletAnswer7>
						<grad:OutWalletAnswer8>1</grad:OutWalletAnswer8>
					</grad:OutWalletAnswers>
				</grad:OutWalletAnswerData>
			</grad:KBAAnswers>
		</grad:PreciseIDServer>
	</soapenv:Body>
</soapenv:Envelope>]]></con:request>
          <con:originalUri>https://stg1-ss1.experian.com/fraudsolutions/webservices/preciseid/PreciseidAPI</con:originalUri>
          <con:credentials>
            <con:username>schuang_demo_pid</con:username>
            <con:password>Scdemo36</con:password>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" id="ecf711f8-e8a3-4a29-a9ce-9a688ad620c1" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://testrail-gsg.experian.local" type="rest" basePath="" definitionUrl="C:\Users\C51636A\Desktop\_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart="file:/C:/Users/C51636A/Desktop/_1.wadl">
      <con:part>
        <con:url>file:/C:/Users/C51636A/Desktop/_1.wadl</con:url>
        <con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="https://testrail.uat.uk.experian.local"/>
  <resources base="https://testrail.uat.uk.experian.local">
    <resource path="index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" id="Add Result for Case">
      <doc xml:lang="en" title="Add Result for Case"/>
      <param name="CaseID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="runID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Add Result For Case">
        <doc xml:lang="en" title="Add Result For Case"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="">
          <representation mediaType="application/json"/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=utf-8"/>
        </response>
        <response status="200">
          <representation mediaType="text/html"/>
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
        <response status="400">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
    <resource path="index.php?/api/v2/add_plan/37" id="Add TestPlan">
      <doc xml:lang="en" title="Add TestPlan"/>
      <method name="POST" id="Create Test Plan">
        <doc xml:lang="en" title="Create Test Plan"/>
        <request>
          <representation mediaType="application/json"/>
        </request>
        <response status="400 401 404">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
        <response status="">
          <representation mediaType="application/json"/>
        </response>
        <response status="200">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
    <resource path="index.php?/api/v2/add_plan_entry/{planID}" id="Add TestPlan Entry">
      <doc xml:lang="en" title="Add TestPlan Entry"/>
      <param name="planID" type="xs:string" required="false" default="" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="Associate TestRun with TestPlan">
        <doc xml:lang="en" title="Associate TestRun with TestPlan"/>
        <request/>
        <response status="400 404">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
        <response status="200">
          <representation mediaType="application/json; charset=utf-8"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content>
        <con:type>http://wadl.dev.java.net/2009/02</con:type>
      </con:part>
    </con:definitionCache>
    <con:endpoints>
      <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
    </con:endpoints>
    <con:resource name="Add Result for Case" path="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" id="cb80559b-a7c7-40cb-a7d7-5ba5bd7bee73">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>CaseID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
        <con:parameter>
          <con:name>runID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="Add Result For Case" id="03b1ab99-1daf-4560-b310-f5b0e653b654" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/json</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>text/html</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="Request 1" id="4cfc2d32-4093-4a32-a93e-146c1b27b195" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Add TestPlan" path="/index.php?/api/v2/add_plan/38" id="aac4851c-39a1-4994-a0d7-7ba6ba4f7300">
      <con:settings/>
      <con:parameters/>
      <con:method name="Create Test Plan" id="23e1c632-1f62-41c8-bece-d96778a78bee" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST" id="">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>400 401 404</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/json</con:mediaType>
          <con:status/>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="Request 1" id="ac5dd87e-f100-4b67-9175-87ed9427cbf9" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="Add TestPlan Entry" path="/index.php?/api/v2/add_plan_entry/{planID}" id="38a3b47c-d407-448f-a98b-d3176e0deeff">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>planID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="Associate TestRun with TestPlan" id="4fffc217-b5b1-4ad4-b4ab-e5c876bde30f" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT" id="">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>400 404</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:representation type="RESPONSE" id="">
          <con:mediaType>application/json; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xsi:nil="true"/>
          <con:description xsi:nil="true"/>
        </con:representation>
        <con:request name="Request 1" id="d0793cf1-8fc2-4738-b77f-76549d6a2437" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:username>Jesus.Ruiz@experian.com</con:username>
            <con:password>b0VP71j4kqqt62vtUiHQ-r1aJ1dEFMF118ZbYoDVE</con:password>
            <con:domain>https://testrail.uat.uk.experian.local</con:domain>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:preemptive>true</con:preemptive>
            <con:authType>Preemptive</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:interface xsi:type="con:RestService" id="d03b61fd-3711-4c2b-b52a-3a3f9a8ef062" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://10.8.65.17:5013" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>http://10.8.114.75:8280</con:endpoint>
      <con:endpoint>http://10.8.65.17:5013</con:endpoint>
    </con:endpoints>
    <con:resource name="Cm" path="/fraudsolutions/pidcm/v1/cm" id="577ab1e7-e219-42de-ba3b-c57b0ce2ab5f">
      <con:settings/>
      <con:parameters/>
      <con:method name="Cm 1" id="aa6ba4d7-80ca-4379-8cd2-eb95a510b008" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="REQUEST">
          <con:mediaType>text/xml</con:mediaType>
          <con:params/>
          <con:element>Experian</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/plain;charset=ISO-8859-1</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element>Experian</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element>Experian</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element>Experian</con:element>
        </con:representation>
        <con:request name="Request 1" id="7c205dfe-e198-43ca-aab0-7dd01e6bbdd7" mediaType="application/xml" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="ct-remote-user" value="schuang_all" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013</con:endpoint>
          <con:request><![CDATA[<Experian>
  <Request>
    <Products>
      <CustomerManagement>
        <Version>01.00</Version>
        <Subscriber>
          <Preamble>TCA1</Preamble>
          <OpInitials>sc</OpInitials>
          <SubCode>6992670</SubCode>
        </Subscriber>
        <ClientTrackingID>001-AS30000051775</ClientTrackingID>
        <CustomerCreationDate/>
        <AccountOpenDate/>
        <ApplicationScore/>
        <ApplicationTranID/>
        <ApplicationSysID/>
        <ConsumerInformation>
          <Name>
            <Last>BREEN</Last>
            <First>JOHN</First>
            <Middle>WAKEFIELD</Middle>
          </Name>
          <CurrentAddress>
            <Street>PO BOX 445</Street>
            <City>APO</City>
            <State>AE</State>
            <Zip>09061</Zip>
            <Zip4/>
          </CurrentAddress>
          <Phone>
            <Number>7818945369</Number>
          </Phone>
          <SSN>666436878</SSN>
          <DriverLicense>
            <State>VT</State>
            <Number>71674355</Number>
          </DriverLicense>
          <DateOfBirth>
            <Year>1957</Year>
            <Month>02</Month>
            <Day>19</Day>
          </DateOfBirth>
        </ConsumerInformation>
        <Options>
          <ProductOption>3</ProductOption>
          <ReferenceText>001-AS30000051775</ReferenceText>
        </Options>
        <EmailAddress>MICKEY.MOUSE@AFS.MIL</EmailAddress>
        <IPAddress>10.10.6.81</IPAddress>
        <CCNumerics>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
          <CCNumeric></CCNumeric>
        </CCNumerics>
        <CCStrings>
          <CCString>9</CCString>
          <CCString>B</CCString>
          <CCString></CCString>
          <CCString></CCString>
          <CCString></CCString>
        </CCStrings>
      </CustomerManagement>
    </Products>
  </Request>
</Experian>]]></con:request>
          <con:originalUri>http://10.8.65.17/fraudsolutions/pidcm/v1/cm</con:originalUri>
          <con:credentials>
            <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
            <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
            <con:authType>Global HTTP Settings</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="4f8cacb7-d6d6-43ae-a0a8-b6ead6408ed5" name="IEN Regression">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="161bfbc6-7b11-49a0-998a-941b549e4f17" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Response Folder" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Response Folder" id="854fbe48-fc88-4a8c-8d8b-f999610e75b5">
        <con:settings/>
        <con:config>
          <script>def date = new Date()
def dt = date.format("yyyyMMdd") 
def ts = date.format("HH-mm-ss") 

def directoryA = "C:\\SoapUI\\Test Response\\IEN Regression\\"
new File(directoryA).mkdir()

def directory = directoryA+dt+"_"+ts+"\\"
new File(directory).mkdir()

return directory</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="1434dd28-b260-4b49-aaac-2b3dcd0a32ee" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 1 - Score and Score Factors" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="8b6981c8-41f7-4f9b-83f3-8a48a3ec4e61">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MMAS004'
where sub_cd='${#TestCase#subcode}' and prod_opt='1'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="0c4850e0-d3ef-4865-a7a1-1d520026d337">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='1'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="210763ef-ca93-4e70-8b42-b1c1eaa973c9">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="0af99662-c617-4572-b51e-bacc7711c821">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MMAS004'
where sub_cd='${#TestCase#subcode}' and prod_opt='1'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="bd44bd03-70cb-45da-bcc3-25a939783200">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='1'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="820d6259-0e35-458d-9c85-c57cc41a8403">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="b2419ea0-f3e3-4cd0-9938-bd79b5de7904">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="35c3a873-822a-4a48-84ec-3c5b68f8c375">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5

Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()

cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)

propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="75d357b0-47bc-4ecf-ab3c-1cbe2eb0ca4b">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="f3b69319-8dda-4c43-9966-0ed9b26c8157">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="b59e37fc-7e09-4555-8e98-111a39531bde" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="955cc43b-f422-49f1-aa42-64d5f40053e3" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="b1c9d247-75ca-4320-9b7a-55aa909c4b7f">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="9aae6130-a4c2-4e06-9d59-5f730ac570f0">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="54a4d612-ae44-4804-8e8a-98df83d5895b" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="d22dd282-b08c-4fc0-b563-a4ef3f5634de">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="f979e5b0-fe8c-443d-bafe-0ac039ae4cb2">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="c3f3bd09-13ea-4e09-b252-9e74337f8f48">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="293b34b9-4b4e-49b1-98f4-7a5056a806a4">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="a664b898-8b12-4fb2-a312-334aa94e9577">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="a97aaa3d-f73b-4f12-9a2b-4b416f1e55f9">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="f10c6ea6-cba9-48c4-bc34-21280068ea41">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="07c86cac-aeee-422e-9b2f-23aff0e97602">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="d7fed555-040f-4c58-8e1c-998c7f72448d">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>002-AS30000058559</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>ROBERT</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>SCOTT</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BIRMINGHAM</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666522949</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 1563</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>BELTSVILLE</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>MD</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>20704</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>06051961</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1961</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>DE</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>1035289</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>3028320298</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>3</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 1\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 1\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 1\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 1\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 1\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 1\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 1\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 1\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 1\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 1\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 1\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 1\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>001-AS30000051775\n\n</con:value>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>0</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="ba9cde04-7705-4f06-b88f-080b222f3fc1" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 101 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="2b5f144a-7b28-4b5c-9a44-e2cdfec6f449">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="82556152-3c19-4fd3-9b28-22ea6a304f62">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='101'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="7e65c9ee-e385-4321-b624-b35dce0ee2b8">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="bd0e2d9f-b18c-4c8b-af75-4e1c6b6dd9fd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="3a1a4d9f-88f2-4628-923e-72de0f61f159">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='101'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="06f1b988-d3b1-4657-bf8d-5146173af3ad">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="2e8ea680-8721-49cb-880f-5e178b2b1231">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="35d5e677-3cec-4844-889d-12904727fe60">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5

Cell ap = sheet1.getCell(38,counter+1) // obtains Month

Cell aq = sheet1.getCell(39,counter+1) // obtains Day

Cell ar = sheet1.getCell(40,counter+1) // obtains Year

Cell at = sheet1.getCell(41,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()

month = ap.getContents()

day = aq.getContents()

year = ar.getContents()

cm_score_tragg = at.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)

propTestStep.setPropertyValue("month", month)

propTestStep.setPropertyValue("day", day)

propTestStep.setPropertyValue("year", year)

propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="e7a01953-c19d-4c82-9434-4d9cf7ac5084">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="36987576-2392-45ce-a506-10b5a3c98a35">
        <con:settings/>
        <con:config service="http://10.8.65.17:5013" resourcePath="/fraudsolutions/pidcm/v1/cm" methodName="Cm 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="ct-remote-user" value="${#Project#PIDUsername}" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>http://10.8.65.17:5013</con:endpoint>
            <con:request><![CDATA[<Experian>
  <Request>
    <Products>
      <CustomerManagement>
        <Version>01.00</Version>
        <Subscriber>
          <Preamble>TCA1</Preamble>
          <OpInitials>sc</OpInitials>
          <SubCode>${Property - Aux Vars#subcode}</SubCode>
        </Subscriber>
        <ClientTrackingID>${Property - Aux Vars#referenceText}</ClientTrackingID>
        <CustomerCreationDate/>
        <AccountOpenDate/>
        <ApplicationScore/>
        <ApplicationTranID/>
        <ApplicationSysID/>
        <ConsumerInformation>
          <Name>
            <Last>${Property - Aux Vars#lastName}</Last>
            <First>${Property - Aux Vars#firstName}</First>
            <Middle>${Property - Aux Vars#middleName}</Middle>
          </Name>
          <CurrentAddress>
            <Street>${Property - Aux Vars#address}</Street>
            <City>${Property - Aux Vars#city}</City>
            <State>${Property - Aux Vars#state}</State>
            <Zip>${Property - Aux Vars#zip}</Zip>
            <Zip4/>
          </CurrentAddress>
          <Phone>
            <Number>${Property - Aux Vars#phone}</Number>
          </Phone>
          <SSN>${Property - Aux Vars#ssn}</SSN>
          <DriverLicense>
            <State>${Property - Aux Vars#dlState}</State>
            <Number>${Property - Aux Vars#dlNumber}</Number>
          </DriverLicense>
          <DateOfBirth>
            <Year>${Property - Aux Vars#year}</Year>
            <Month>${Property - Aux Vars#month}</Month>
            <Day>${Property - Aux Vars#day}</Day>
          </DateOfBirth>
        </ConsumerInformation>
        <Options>
          <ProductOption>${Property - Aux Vars#po}</ProductOption>
          <ReferenceText>${Property - Aux Vars#referenceText}</ReferenceText>
        </Options>
        <EmailAddress>${#TestCase#ien_po}</EmailAddress>
        <IPAddress>${Property - Aux Vars#ip}</IPAddress>
        <CCNumerics>
          <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
        </CCNumerics>
        <CCStrings>
          <CCString>${Property - Aux Vars#ccString1}</CCString>
          <CCString>${Property - Aux Vars#ccString2}</CCString>
          <CCString>${Property - Aux Vars#ccString3}</CCString>
          <CCString>${Property - Aux Vars#ccString4}</CCString>
          <CCString>${Property - Aux Vars#ccString5}</CCString>
        </CCStrings>
      </CustomerManagement>
    </Products>
  </Request>
</Experian>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode" disabled="true">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="cb6c621e-45d2-4a14-8a33-b93c231eec18" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def Experian = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( Experian.Response.Products.CustomerManagement.ScoreResults.Score.text() == '9999'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="955cc43b-f422-49f1-aa42-64d5f40053e3" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
              <con:password/>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="6444e9c3-fa9c-4257-a8fb-9560468860d3">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="da38e80a-3ddd-4925-a565-31e24111ee5d">
        <con:settings/>
        <con:config service="http://10.8.65.17:5013" resourcePath="/fraudsolutions/pidcm/v1/cm" methodName="Cm 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="application/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="ct-remote-user" value="${#Project#DemoUsername}" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>http://10.8.114.75:8280</con:endpoint>
            <con:request><![CDATA[<Experian>
  <Request>
    <Products>
      <CustomerManagement>
        <Version>01.00</Version>
        <Subscriber>
          <Preamble>TCA1</Preamble>
          <OpInitials>sc</OpInitials>
          <SubCode>${Property - Aux Vars#subcode}</SubCode>
        </Subscriber>
        <ClientTrackingID>${Property - Aux Vars#referenceText}</ClientTrackingID>
        <CustomerCreationDate/>
        <AccountOpenDate/>
        <ApplicationScore/>
        <ApplicationTranID/>
        <ApplicationSysID/>
        <ConsumerInformation>
          <Name>
            <Last>${Property - Aux Vars#lastName}</Last>
            <First>${Property - Aux Vars#firstName}</First>
            <Middle>${Property - Aux Vars#middleName}</Middle>
          </Name>
          <CurrentAddress>
            <Street>${Property - Aux Vars#address}</Street>
            <City>${Property - Aux Vars#city}</City>
            <State>${Property - Aux Vars#state}</State>
            <Zip>${Property - Aux Vars#zip}</Zip>
            <Zip4/>
          </CurrentAddress>
          <Phone>
            <Number>${Property - Aux Vars#phone}</Number>
          </Phone>
          <SSN>${Property - Aux Vars#ssn}</SSN>
          <DriverLicense>
            <State>${Property - Aux Vars#dlState}</State>
            <Number>${Property - Aux Vars#dlNumber}</Number>
          </DriverLicense>
          <DateOfBirth>
            <Year>${Property - Aux Vars#year}</Year>
            <Month>${Property - Aux Vars#month}</Month>
            <Day>${Property - Aux Vars#day}</Day>
          </DateOfBirth>
        </ConsumerInformation>
        <Options>
          <ProductOption>${#TestCase#ien_po}</ProductOption>
          <ReferenceText>${Property - Aux Vars#referenceText}</ReferenceText>
        </Options>
        <EmailAddress>${Property - Aux Vars#email}</EmailAddress>
        <IPAddress>${Property - Aux Vars#ip}</IPAddress>
        <CCNumerics>
          <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
        </CCNumerics>
        <CCStrings>
          <CCString>${Property - Aux Vars#ccString1}</CCString>
          <CCString>${Property - Aux Vars#ccString2}</CCString>
          <CCString>${Property - Aux Vars#ccString3}</CCString>
          <CCString>${Property - Aux Vars#ccString4}</CCString>
          <CCString>${Property - Aux Vars#ccString5}</CCString>
        </CCStrings>
      </CustomerManagement>
    </Products>
  </Request>
</Experian>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode" disabled="true">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6d476ee7-b7f6-4072-8f53-963f004c7212" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def Experian = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( Experian.Response.Products.CustomerManagement.ScoreResults.Score.text() == '9999' ){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
              <con:password/>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="15f4582e-4fbf-455c-8bfd-41f2f4ebdfe6">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="1e1e89ab-125e-4959-9c2c-fcf617821622">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where cm_trans_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1=''; //ns1:Experian[1]/ns1:Response[1]/ns1:Products[1]/ns1:CustomerManagement[1]/ns1:TransactionID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="e484d719-9f9c-475a-9d06-fc6263aa125e">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where cm_trans_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1=''; //ns1:Experian[1]/ns1:Response[1]/ns1:Products[1]/ns1:CustomerManagement[1]/ns1:TransactionID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="e2c33062-393d-42de-9c17-f07b6fc990e1">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where cm_trans_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1=''; //ns1:Experian[1]/ns1:Response[1]/ns1:Products[1]/ns1:CustomerManagement[1]/ns1:TransactionID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="6b5b9093-a443-46a1-af36-ec6b4af0a012">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="8a4ecc12-d6b5-47ae-8a07-767cb183c2f3">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="4e9f42b8-9c98-4f6b-8fb5-49c748e4671b">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="f13eaf37-7874-41b4-b0e8-547e5563eef1">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="7012ffe2-9f24-46b4-8270-6a729aec676a">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>101</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>month</con:name>
              <con:value>02</con:value>
            </con:property>
            <con:property>
              <con:name>day</con:name>
              <con:value>19</con:value>
            </con:property>
            <con:property>
              <con:name>year</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>01JUN2018</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>01:23:23</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>1234567890</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value>01.00</con:value>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value>01MAY2018</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 101\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 101\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 101\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 101\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 101\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 101\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 101\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 101\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 101\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 101\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 101\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 101\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value><![CDATA[001-AS30000051775



- - - DEMO FIRST INQUIRY ERROR START - - - -CompletionCode - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] in Response]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -CompletionCode - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Version> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <PrimaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <SecondaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ResponseCodeDesc> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ReferenceText> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreResults><Score> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes01Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes03Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes07Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes21Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes28Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes90Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="cfcd8e7d-9573-49a2-b793-1aa26d681a50" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 102 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="3b0c8055-2495-496b-ab7a-be366d6e0b8a">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="4af20726-6f49-47f0-8d86-2c5985314abc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='102'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="fd08543b-4c68-48ab-b3a0-9834ce894860">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="f119c431-a724-41ba-b698-f99b34780256">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="2b1b65a7-f48b-4aac-a200-f23b8bf9c9fd">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='102'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="f35a286a-e7d9-4a10-aab0-a0a4a9baa537">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="544d73fd-f110-4482-a873-5e999f00f552">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="8591f198-f539-4263-a6af-85a97070ca5f">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5

Cell ap = sheet1.getCell(38,counter+1) // obtains Phone Type

Cell aq = sheet1.getCell(39,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()

phoneType = ap.getContents()

cm_score_tragg = aq.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)

propTestStep.setPropertyValue("phoneType", phoneType)

propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="46dd16c8-703c-4711-b194-2ab538a5f8f3">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry_bkup" id="80ef9c2f-7a77-47a5-ae3c-9e0f3bc54aff" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="a5091023-cb8e-4c24-83b9-0fe642baa64c" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry_bkup" id="c6f1f4c0-d052-4cb9-a76d-572435c35b67" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry_bkup#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry_bkup#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="7b24cf2c-9f08-464d-864a-14a3f95d5a2e">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="2fb23b54-6340-4548-8c46-586b138d1a77" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="610d6c24-b357-47a4-817e-18d0c16cdf3e" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="7104bf5b-f3f8-438f-8046-0bf738b07f4a" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="f668f6af-7c1a-4aab-81a2-2bba57b7556a" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="31a9c483-6af9-4ef9-b190-bfe8bdcf6d9b" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3d434918-d645-44be-9397-dcceaad0eeef" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="73995b20-6d01-40cf-9765-a500a16dc523" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="46425d24-8a97-4899-b900-d700b3a732de">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="2c025b63-7e23-4c45-a57f-a7551a667e02" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry_bkup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="49eea120-cd72-4379-bcca-115afba640a0" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="64e77c57-0043-40b2-92dd-7aa444d465ee" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry_bkup" id="980c8b4b-1fda-4fea-8934-0fd96ba3e5da" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="ad0c6713-7d2d-4f5b-8435-6d0627eef5a9">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="fc6f58a9-1f83-445f-9ba4-a3843e554485" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="65ee1f85-a7e5-4075-81da-a684d2d95044">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="49a0878f-2de2-4bd2-9685-7b96497d691b" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="fb6fd182-4f28-4f00-b1ab-212c4a3feb8f" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="e2094726-51a9-4876-a8de-85f67a13d3ac">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="589d49b9-327c-4a8a-bb0d-e876bf6dec14">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="79984b0f-dc86-426f-97f0-ec8b5bb6dac8">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="a1d30e05-7c9b-45dd-b52e-c6b80a6618cb">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="55eb8f30-2c90-4284-b6b5-7f3d807138cc">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="d41e1841-addc-4e36-8afd-2a12e8b331eb">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="883f0a61-7e52-40b0-9159-643510faf4b9">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="099f4a58-af31-4af8-9763-1003e6b5ae0a">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>102</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>3</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value>99999</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>0001</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>01MAY2018</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>01MAY2018</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phoneType</con:name>
              <con:value>B</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 102\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value><![CDATA[001-AS30000051775



- - - STAGING ANSWER QUESTION ERROR START - - - -XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())], expecting [true], actual was [false]]- - - STAGING ANSWER QUESTION ERROR END - - - - 

- - - STAGING ANSWER QUESTION ERROR START - - - -XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())], expecting [true], actual was [false]]- - - STAGING ANSWER QUESTION ERROR END - - - - 

- - - STAGING ANSWER QUESTION ERROR START - - - -XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())], expecting [true], actual was [false]]- - - STAGING ANSWER QUESTION ERROR END - - - - 

- - - STAGING ANSWER QUESTION ERROR START - - - -XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())], expecting [true], actual was [false]]- - - STAGING ANSWER QUESTION ERROR END - - - - 

- - - STAGING ANSWER QUESTION ERROR START - - - -XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())], expecting [true], actual was [false]]- - - STAGING ANSWER QUESTION ERROR END - - - - 

- - - STAGING ANSWER QUESTION ERROR START - - - -XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())], expecting [true], actual was [false]]- - - STAGING ANSWER QUESTION ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Version> Comparison Between STG and Demo Responses - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <PrimaryResponseCode> Comparison Between STG and Demo Responses - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <SecondaryResponseCode> Comparison Between STG and Demo Responses - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ResponseCodeDesc> Comparison Between STG and Demo Responses - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ReferenceText> Comparison Between STG and Demo Responses - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes01Day> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")], expecting [0;0;0;0;0;0;0;0;0;0;0;0;], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes03Day> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")], expecting [0;0;0;0;0;0;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes07Day> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")], expecting [0;0;0;0;0;0;0;6;0;0;0;0;1;2;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;6;0;0;0;0;1;2;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;6;0;0;0;0;1;2;0;0;0;0;0;0;0;0;], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes21Day> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")], expecting [0;0;0;], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes28Day> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")], expecting [0;0;0;0;0;0;0;9;1;1;2;2;2;2;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;9;1;1;2;2;2;2;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;9;1;1;2;2;2;2;0;0;0;0;0;0;0;0;], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes90Day> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")], expecting [0;0;0;0;0;0;0;0;9;1;1;2;2;2;2;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;9;1;1;2;2;2;2;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;9;1;1;2;2;2;2;0;0;0;0;0;0;0;0;], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <CCNumerics><CCNumeric[1]> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")], expecting [99999], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <CCStrings><CCString[1]> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")], expecting [0001], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <CCStrings><CCString[2]> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")], expecting [01MAY2018], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <CCStrings><CCString[3]> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")], expecting [01MAY2018], actual was []]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath MatchXPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())], expecting [true], actual was [false]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath MatchXPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())], expecting [true], actual was [false]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath MatchXPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())], expecting [true], actual was [false]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath MatchXPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())], expecting [true], actual was [false]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath MatchXPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())], expecting [true], actual was [false]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath MatchXPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())], expecting [true], actual was [false]]- - - RESPONSES COMPARISON ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>348-AS30049477151</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>348-AS30049477151\n\n</con:value>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>2</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="bc0fcaaa-25e2-488d-aca8-d61db21cdfbd" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 103 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="a51cc830-fe21-4ffc-900d-43cfbe555292">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="d314302a-74e7-4c32-8990-1c82499ebf18">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='103'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="dda2dea4-e385-47dc-955f-fc464f1dbfd9">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="d500092c-d014-4a89-8d29-d9505101ae33">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="853970bc-bedc-425a-a89a-bd54d5391d5b">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='103'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="8a5bf2db-01da-4848-977c-1953405d5fd7">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="7a139fe1-da69-4e67-ac8f-9ac5d314e5e0">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="d887e03e-fe0b-4c0b-86e2-0fea96a7eb7e">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="6e74d317-0473-4d70-9cdd-7d99780f7a70">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry_bkup" id="dd1d6649-3b16-456c-8d80-670200308d1f" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry_bkup" id="4213df9e-3a29-4939-82af-555c32193d53" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry_bkup#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry_bkup#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="62db95c8-537d-401c-89c0-788dc3268ad5" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry_bkup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="b09e5f43-3471-4358-91a2-b0740f060f4c" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="4c8271cc-e983-4920-9889-226bea5be582">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="688d82cc-8349-427a-b809-647d53cca717" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="58de4d79-52b4-468e-9741-8cd5cfb7b2f8">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="820921c5-e9f8-46b6-84a8-482601fc5992" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="3de00ce7-9d14-4746-87c1-85ab6bf4d98f" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry_bkup" id="36be0617-64b4-48e6-a802-e9cfaa20e364" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry_bkup" id="823ad95c-80b8-4daa-b476-dc2197007bd3" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry_bkup#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry_bkup#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="c457c88e-ea4d-4a7d-834d-8e31218ee335" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType xsi:nil="true"/>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="4cb58a71-a710-4ac1-8289-99750959e68d">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9e033dc0-2136-4d54-8885-15997bd02bed" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo First Inquiry" id="a8e30782-93a6-4e9b-a82f-1cf132d0ae47">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="c2570e58-9b1d-45cf-a028-3eb6298e361b">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="4014c36e-4f8d-452e-a1e1-024dd3db0073">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="caac62e4-7b59-4bf6-8bff-731421d82ac1">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="4bfd2eb8-b298-4f39-b24e-f88dd5cd55da">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="c15434f0-3907-49a9-8d0d-1d357867a133">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSsheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="5ec51ec4-13e1-4608-856b-bf8411061c8c">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="5f288637-e6df-4db8-b5ee-97b4f78efc7d">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="59168f2b-b67b-407f-b47f-0e671674048f">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>103</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>4</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>9</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>B</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20190123_22-48-30\Strategy 103\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value>348-AS30049477151</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>348-AS30049477151</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>348-AS30049477151\n\n</con:value>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>3</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="59259512-8ad0-45d8-8744-489d06825ae8" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 104 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="fbdc0f7e-7499-4bd3-ba1e-71399055bbe8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="a90752a6-250a-44eb-becf-61e0a48a706c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='104'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="9c5a257a-d188-4486-9862-fab8c0bda1c1">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="862fa095-2066-4b3f-b8f6-1eb620731938">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="23749e47-eeb0-4e50-bdf6-4df4880777eb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='104'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="7c0aa0d3-1e36-4c2b-a753-96bb10c8ccc6">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="a31f2ff7-44ad-4214-9734-b786f5a1d5a7">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="8f8902c5-beb6-4329-b703-169b98ca02f4">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="0e4f9c1e-a66e-448c-80d5-abea5de702ea">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="00beaa6b-a527-4baa-8c40-5fe6f7efb73b">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c2a36a92-a572-4923-ac9d-d1097671e311" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="955cc43b-f422-49f1-aa42-64d5f40053e3" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="36502178-c877-456d-8a69-b53dc2d754dc">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="e44a2d35-d68a-43e8-9972-5a1d2bf7382d">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="e8d1bd87-9c6d-40de-9d84-e48b1b5ca151" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="14a49698-66b1-444e-b152-5bf66ce26bc6">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="49b49f46-d60c-4034-8ff2-7d7773035c37">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="f76b6a5e-2a20-4c51-932d-c8ad45d8786a">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="6e8e0978-60e8-48be-bf6c-2f8c447f51b4">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="c2c3849a-3c7b-4409-b8f3-8efdf0dbd368">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="95311a83-136e-4871-b610-2946fe8fcf48">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="bf46360b-0215-484b-b69e-cc6facc713bf">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="8014f702-87e1-4ee5-b2cd-354773542c98">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="26e4ea8f-a3a1-47e7-a7a2-6770ba8bae04">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>104</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>77</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>500-PID0097025681</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>MICHELE</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>L</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>DEBAK</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666366279</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>514 EAST AVE</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>SOUTH CHARLESTON</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>WV</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>25309</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>10181976</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1976</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>3049654926</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>4</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>RETAIL INS</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>78</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 104\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 104\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 104\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 104\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 104\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 104\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 104\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 104\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 104\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 104\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 104\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 104\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value>This test passed</con:value>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value>11226557</con:value>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>16039</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value>500-PID0097025681</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>500-PID0097025681</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>500-PID0097025681\n\n</con:value>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>4</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="c17146a9-8da1-4a6d-8038-3b7fa5dd3145" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 105 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="59afc9d2-3485-47ed-8581-44e3cb10bce4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="3c72ac78-db10-4729-82c7-62bbb8896aeb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='105'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="8222a3d8-3907-4116-bd82-113dcf55f7ea">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="4b53a85a-3b48-4c7e-aa1c-afb55e22fb20">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="edcb03cd-ff2c-4f6d-b1b2-f4ac3a489cdf">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='105'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="5621cb02-8916-4a3f-98d1-3b1ec3c66915">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="6273e0c9-cd2c-4f2e-ab0e-820b199341f6">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="6dd591f7-2640-43da-909d-d5411b89a60c">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5

Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()

cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)

propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="ff314b6e-6a49-4e15-a9b8-2e61aa02b0f2">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="86849c1d-6aa9-411a-bda9-9629f5d67f7c">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="51e28345-d38f-4d92-b87f-f8e8e7bbf096" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="955cc43b-f422-49f1-aa42-64d5f40053e3" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="e35da8a6-c2b4-41e6-bd93-dd6a1de05105">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="5fa34a17-f943-4630-ab6b-2de674ea387c">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="a3d86c19-c7c0-4e70-8381-9d3217b2ee17" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="37cc9153-bea1-43d5-984e-03485167dd1c">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="104fbea8-1927-4516-a95c-a33873d02569">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="3b0509b1-134a-4f50-b6ae-2e315d9bf062">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="5df3c4c9-9fb4-47ec-92ee-4e7dbfdc0dd1">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="0b5203f6-74ab-43b8-8d05-b132239d2cf9">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="0142c90e-84d4-42e9-815b-2512e8379f32">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="20d3a18e-c60d-4ff2-b6ce-52b7f43d4255">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="15e921d3-e963-4fd0-b124-8a2fec78850f">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="2c380885-83ab-4bc4-8cd6-8b5a5b13ecfc">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>105</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>36</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>301-AS30043892268</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>MILTON</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>Z</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>FURCHES</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666684554</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>10100 S GESSNER DR</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>HOUSTON</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>TX</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>77071</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>05151968</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1968</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>TX</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>15120052</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7138638902</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>37</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 105\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 105\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 105\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 105\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 105\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 105\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 105\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 105\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 105\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 105\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 105\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 105\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>5</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="0f96aee3-9c07-43f5-b242-3251f23d0df0" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 106 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="4419ffce-8d02-4a1d-b154-a7056aa8f2e5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="99c89d1f-92c5-4508-9769-b87eff6a2deb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='106'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="b40d3fae-f15b-4bd2-9913-2b9f39ff7310">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="07406fff-2870-4b61-826b-31025caf81d1">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="dc2fb75f-c24c-481a-a476-8235424161fb">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='106'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="2727fff0-74b9-4673-8cd4-a2774cd4a0ad">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="49c80906-418b-4352-842a-ce09df719eef">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="c1d040cb-350d-4871-a671-985c032a9e79">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="1ab8628b-2ab9-4867-ad29-63ff9a4219f0">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry backup" id="5b18137f-2376-4622-9814-89da4da91165" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="1238d1bc-61ff-46e2-bf29-b7f46dc498e0">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="cd7e3278-73fa-44ab-b59c-c2f4560bd6ee" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="4f48c38d-6223-4aaa-a613-6b6f471d1046">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="b8f3e4e5-7615-4c28-aa85-ccec25b6f042" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry backup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="1ffc9a97-d70d-4291-b283-96e114d55c85" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG Answer Questions" id="21ac083c-5011-41a1-9372-1fc7a27355ac" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directorySTGAnswerQuestionsRequest = propTestStep.getPropertyValue("directorySTGAnswerQuestionsRequest")
def directorySTGAnswerQuestionsResponse = propTestStep.getPropertyValue("directorySTGAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directorySTGAnswerQuestionsRequest+reference+"_STG Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directorySTGAnswerQuestionsResponse+reference+"_STG Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="be10228a-c8bc-45f6-b91e-f3c8f5211a2b" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="2dc2e571-2a6b-4963-b37e-5bcca8eb59ea" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry backup" id="d10ae3be-05b5-41fd-baf9-73553fb4ff78" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="3f074d2a-c5b2-4d88-8d91-5097d666c2a3">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="0f39d1ea-7ccd-4f0f-88ce-13d34c4ae764" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="cd052b73-580b-4e7c-8a2c-29f8eba101bb">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="c6d17fe4-f865-4650-bb72-333b84938523" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="f4dd6a77-c29b-472e-beb8-843a34c76891" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="0f0219bf-cdc4-4e84-b258-21a903127f78">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="ae51197e-593c-4c3a-bae3-54ad637bef98">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="e28a6046-f72a-46a6-bc37-73792ddf6561">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="c1577fb1-9370-4116-8b67-ccc031cf0b78">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="2952689d-e0ae-486e-a58b-cf0c6e6a3806">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="cb467552-deea-4270-af84-450119d134ec">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="691da5a0-bd69-4b64-a640-ed87bf365cab">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="21917b8f-1e19-4067-8232-47bab56e830d">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>106</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>3</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>PIN</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>Fraud Ops</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>020</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 106\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 106\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 106\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 106\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 106\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 106\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 106\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 106\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 106\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 106\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 106\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 106\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>6</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="dc386fa0-e934-470c-9eb4-df57a2c3b322" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 107 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="dfd28348-2d8c-49b2-b61b-a406b163e329">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="11e79e1d-e1de-4649-a850-a2f8ba3e8f31">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='107'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="5c82cbb4-deaa-4d9f-a69d-d93a347aed05">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="f1f1cea0-3186-48f1-97af-5dda3f7e0282">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='4'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="4ec0c45c-ec0b-48ef-88bd-7cbb6af91f69">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='107'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="9af4951a-d1e1-4d7f-a202-d442b6d0458a">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="15a8eaf1-1d5a-4aa7-885b-d03c5c602e3e">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="89446679-d6b9-4432-b977-1b7c91613dcc">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="76dfd448-d96e-4171-819f-0ace4883ad61">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry_bkup" id="cb2b5ed7-ddd5-4c48-a998-c21f7624da51" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry_bkup" id="ceb71f51-9c37-4c43-a7de-9fa0f959c524" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry_bkup#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry_bkup#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="585dac26-e349-4831-be9b-612a0fa8bd75" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry_bkup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="c4e8d6d5-097c-46db-a2d4-cbd3ba4d3868" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="48a85220-618e-44dd-9a86-620aeb98ded7">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="9ad8e97e-a56d-4bbf-b7b2-3411c7e28cff" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="3c513db1-950e-4f5f-a3d5-a5b129eac07a">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="43084f80-cb6c-481f-aa65-91c0347da981" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="b0ddf174-5c43-4cf0-b57a-5ed6a604d9ff" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry_bkup" id="ab01669b-d603-4ac9-a0a8-1e35cebff0f5" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry_bkup" id="1e7e1e73-44d1-45ac-b182-c7d280f7b204" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry_bkup#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry_bkup#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="479974bd-27a7-4155-a176-04ca18906e13" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType xsi:nil="true"/>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="80447d79-71ff-48f4-b7dc-222ea5ad7da9">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="af64dd0a-aea8-490a-85b8-1703c39b39ef" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo First Inquiry" id="7895334a-5067-4f02-8247-1b7f8ff3be9d">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="acdbb739-27af-47e0-8e45-60b9ceee7382">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="8d4332db-833c-4428-9be8-54ba7c5b882b">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="a160c112-8efa-4d27-b5d7-bc98d01b1829">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="60b8985e-f9da-40a9-8d42-3622ea4b7b3a">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="909c01ee-d6ef-43a1-803b-6cab73f22577">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSsheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="c1fdc56c-af1c-49cb-9577-fbac6db27a6b">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="d78fc7bc-2efe-413f-9ff4-844685a6440a">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="1d319c79-e92f-49c1-af6d-faff18ecdf27">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>107</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>61</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>463-O040287759946</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>NOEL</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>HERWIG</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666289332</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>5711 S BISHOP ST</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>CHICAGO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>IL</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>60636</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>03201952</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1952</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>4</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>62</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181008_23-50-45\Strategy 107\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value>This test passed</con:value>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value>5384549</con:value>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>4565</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value>463-O040287759946</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>463-O040287759946</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>463-O040287759946\n\n</con:value>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>7</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="7c44bb89-55da-4f01-851d-61cdba8343f3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 109 - Score and Score Factors" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="3c252ba3-9320-4616-b461-53ba2ea73e0c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='13'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="4a0a482f-0b14-4a22-9344-aa9e0061cd6e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='109'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="157472f5-3660-4055-bd5a-1ab73880ddbd">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="c25043f4-af92-49db-8a61-2b7f0e2d02ca">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='13'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="e94e801a-2ab8-467b-ad13-eac533fbc621">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='109'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="7b0935c3-237b-4708-8dd7-63fb431f5788">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="1be60c4e-4f49-45e5-8746-37e23b1b5041">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="3839f578-9027-4d44-a760-9bc3946c33aa">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
//Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
//cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
//propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="98b1f13f-7194-4b6c-b727-f0b9027ff89a">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry backup" id="2dfb78e0-7b10-4eb5-a6b0-08cc12c329e8" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="0a8b09d9-e320-454d-9f9e-2384942d56f3">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="7d7c27bc-1660-427e-92a5-d49af954d980" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="955cc43b-f422-49f1-aa42-64d5f40053e3" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="427fffd1-c79b-43d0-ab2e-7128edadb12a">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="9543cc4f-efb0-4db3-827a-451ba10faa1a" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry backup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="bd5a1d3a-eccd-465a-83d8-2c81bd728e4a" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG Answer Questions" id="282fa41a-a46b-47a5-9422-39c033d1ba82" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directorySTGAnswerQuestionsRequest = propTestStep.getPropertyValue("directorySTGAnswerQuestionsRequest")
def directorySTGAnswerQuestionsResponse = propTestStep.getPropertyValue("directorySTGAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directorySTGAnswerQuestionsRequest+reference+"_STG Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directorySTGAnswerQuestionsResponse+reference+"_STG Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="5a0d5f93-a8d0-46c4-9774-d72c846dc23f" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="ebde89b3-f891-4d49-ad96-e040e83277d4" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry backup" id="aeb2d43f-e8bd-430d-a0a3-09fc92c3269d" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="0a3cae8a-cecb-4325-8104-0aa43d89cfb4">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4892efee-e385-44ac-8b1e-22e610480d82" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="af345615-c4b3-4090-aa8a-108291d70302">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="ae5958ce-7f57-406c-9f99-a61b0be3369d" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="41676f71-1601-4e6d-b399-08b5a85f8d91" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="9abe0754-5e54-4900-b390-caf551205afd">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="daf49462-a539-46bd-bd09-c5e066c77237">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="b03b5b84-593b-4607-a6ca-790f05a9b939">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))="-1"</path>
              <content>false</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="bb1fe32c-a513-482a-9d5a-ae7d9ed84737">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="9329a49d-a5e3-41cb-9919-813b1f446d23">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="ba89d2c7-1839-4a53-b9c2-d09bac4dd400">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="2452914e-2f1d-46d5-b3f2-36d449ce45c1">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="b4e1754c-d2d8-401d-b5a1-a927a6ea085c">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>109</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>92</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>88</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>511-PID0097038794</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>AMY</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>D</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BISHOP</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666445755</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>41 E 209TH ST</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>EUCLID</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>OH</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>44123</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>06141961</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1961</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>8066591563</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>13</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>89</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181024_16-23-19\Strategy 109\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>Y</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value>5</con:value>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value>511-PID0097038794\n\n\n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()], expecting [26], actual was [19]]- - - DEMO FIRST INQUIRY ERROR END - - - -</con:value>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value>5384670</con:value>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>4582</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value>511-PID0097038794



- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()], expecting [26], actual was [19]]- - - DEMO FIRST INQUIRY ERROR END - - - -</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>511-PID0097038794



- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()], expecting [26], actual was [19]]- - - DEMO FIRST INQUIRY ERROR END - - - -</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>511-PID0097038794\n\n\n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()], expecting [26], actual was [19]]- - - DEMO FIRST INQUIRY ERROR END - - - -</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>8</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="3c4fdb75-e075-4c73-8f93-fc738dde9a05" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 111 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="b173206e-aec3-4374-a477-91864687faea">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="61e003c2-8215-4a4c-ae32-3c46cc5d8a63">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='111'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="6c8dd54a-dfb4-4d02-acc0-1c65f2270eb9">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="c2d6575d-bbf9-47a8-840f-c8c4a370e0bc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="baa5c95e-5ec8-406f-9846-98aca35d50e9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='111'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="0aaf5110-67e7-424e-a0c0-4c16a917bc83">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="7692a016-67be-4d2a-b843-a594eca93e0b">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="7006e549-3f41-4e2e-bf31-1668d48f02d4">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="eb08160b-7013-42d1-b6d9-e5a629c28537">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="051ee990-9ce3-4c5e-b224-4f72b46be420">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="dc3dd6c6-c75d-4e87-b0c3-7e027db5a451" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="955cc43b-f422-49f1-aa42-64d5f40053e3" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="cb83c00e-94f7-4fda-9d83-be1db2f40df8">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="dbcd8e60-556e-4f9f-b6c6-565febcfc015">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6852522a-a7e8-4c25-97cf-a9fff438ee70" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo First Inquiry" id="fd15f724-c7c6-4142-8360-32fa2752dc41">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="866ec6e7-a1f7-4201-be14-59ee15edfeb6">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="0d3f9dc0-0151-4822-8ce4-3616d2efa5a7">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="ec709f81-b84d-4837-9848-a3f9c56e9cbf">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="9da77954-d9c1-4bf6-b505-dd11b1da7709">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="8d62a956-79bc-4c15-8980-e781e88a882c">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="f47a9d30-217f-4cda-99d7-14510e48e697">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="9ab4cb99-9e4f-42b4-94d7-964ef9c04d60">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="305d05c9-a64e-4a6b-8e36-841f768dafbe">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>111</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>5</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>005-AS30000329852</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>BONNIE</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>K</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>KIDD</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666865460</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>8816 W 49 WEST 124TH ST</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>OVERLAND PARK</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>KS</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>66213</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>08211965</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1965</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>KS</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>509620517</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>9137644215</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>6</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 111\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 111\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 111\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 111\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 111\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 111\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 111\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 111\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 111\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 111\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 111\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 111\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>9</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="3bdb25b9-d157-40a0-94d1-5b89ae3ffa24" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 112 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="3e866b02-a97c-4e85-a968-12e792a93eb8">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="7a90352e-3bee-4fb1-969d-3fd83572b537">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='112'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="c120dc2e-4780-4b9a-8544-b2d32ad4ecf2">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="fb2b0b74-e9df-4782-a824-b83e7b6deb2e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="0053b3a9-2f24-42fb-a659-22a3c05f6349">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='112'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="3523b1d9-3804-4fa1-8189-c5d7d131fdaf">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="de699b8c-d214-4610-a4d6-a501de86891e">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="e0159c84-4453-43d2-9d50-2dc9e0d8b4d1">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
cm_score_tragg = ap.getContents()
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="1449c6ee-69ce-44b8-8f19-5eef7dbd6e4a">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry backup" id="f23c6162-8cbb-4ed9-81a7-2c30102f81af" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="8748287a-e5ee-4afd-a2b4-9d42694b81ad">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="ff671ea0-33a7-4480-b65e-f364b63127ab" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="4bfe73b7-b76a-4634-a410-5d4f3cd20be9">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="625c2f71-ff89-4648-bc79-2b21bb893503" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry backup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="901e1704-30b0-4d18-8be2-4ff34a774bee" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG Answer Questions" id="f78c6f17-9f31-46ab-8ad6-95ff28c99acf" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directorySTGAnswerQuestionsRequest = propTestStep.getPropertyValue("directorySTGAnswerQuestionsRequest")
def directorySTGAnswerQuestionsResponse = propTestStep.getPropertyValue("directorySTGAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directorySTGAnswerQuestionsRequest+reference+"_STG Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directorySTGAnswerQuestionsResponse+reference+"_STG Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="605a40b1-9c98-4d45-8d68-26844ef19085" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not  exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not  exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="e233052e-3e10-4348-92da-f59263bf9d9c" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry back up" id="84665251-04f5-4b9c-9add-bddf619b8c8b" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry back up" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="696f42bc-6665-4b86-88ea-feb623f5dc9b">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4338b252-eee3-44e3-9864-5f5ac2ceb50b" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="30a7dd7e-4d69-4c2d-b3c2-36c78be5252e">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="1b7720d3-ccde-4029-a256-f5392dbf672b" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry back up</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="67192247-a4c1-4427-b862-f0ff46f48c79" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="2712d30c-2720-46c1-a284-bd74849348ec">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="e8204707-79d9-48c0-bbd8-dcecc0be485b">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="e3da30b6-53fe-4bb6-9505-22b3149277bc">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="553022b9-785d-484f-be61-a85958ba9023">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="50d4320a-3ea4-41bc-b850-4516a8b4acd1">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="d14959e5-1d1e-486f-ac8f-88ac26e77f68">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="322c3b6b-e282-4a58-b3e2-21992988adfc">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="c054c854-e3e7-460c-94b4-d426b25b6019">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>112</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>65</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>467-O260287213299</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>DONNA</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>PLATER</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666737679</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>4395 DYEWOOD RD SW</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>SHERRODSVILLE</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>OH</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>44675</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>04221976</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1976</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>3</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>1 2 3</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>1M111</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>B</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value>120.00</con:value>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value>25765.19</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>66</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 112\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 112\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 112\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 112\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 112\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 112\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 112\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 112\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 112\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 112\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 112\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 112\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>10</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="96c2a436-ea61-4252-bd23-51adc12e7746" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 113 - Score and Score Factors" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="9d98818f-a652-4f06-8c3a-dbd1d5eb507c">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='15'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="8a79add6-7969-4c04-9b1a-d9dbc01dbf6d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='113'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="6058a56c-f232-438f-8f43-baeb81477343">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="59cc676d-695a-4a14-a77b-173acced4325">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='15'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="114032e1-ca6f-455e-b221-6b4d41e02234">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='113'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="f6685c4d-2935-42a6-8cf7-5a17dc14226d">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="d92ef069-411a-4c73-aa2f-fb48195eb092">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="335de5c6-7894-4780-ab36-8013b25012de">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
//Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
//cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
//propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="d480b011-e208-4595-8b8d-46a4e5dd4abf">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry back up" id="bd968540-0f40-43c9-8062-ef0f6992fe8c" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry back up" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="f0273990-0589-4101-a4c3-1a0b6b8a5f60">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="0231d9db-8c2a-4a6d-9413-6e30674a477a" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="19246fb1-e443-4418-819f-33846cb481ae">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry back up#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="7597aeb2-a3b3-400d-a14d-9df2e8d5ca3b" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry back up#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="c4f1a0f3-6285-4af2-ae19-fe4ae0b960bc" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry back up</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG Answer Questions" id="b12ebe88-dadb-4452-ac01-dcffabae6726" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directorySTGAnswerQuestionsRequest = propTestStep.getPropertyValue("directorySTGAnswerQuestionsRequest")
def directorySTGAnswerQuestionsResponse = propTestStep.getPropertyValue("directorySTGAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directorySTGAnswerQuestionsRequest+reference+"_STG Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directorySTGAnswerQuestionsResponse+reference+"_STG Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="480f5b12-73e9-4f84-b4ac-3958f6c9dd15" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="905eb654-6367-4252-aae0-73f4738a42d5" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry back up#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry back up" id="0fb648a7-8d4e-4f96-be23-992eab14b4e4" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry back up" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="ca601d0d-7c6d-4a01-ba0f-8f81ec74476f">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="7ea06dd8-ca51-4f08-8aff-9a58c8f2be09" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="338fa796-e2c0-4a51-99e5-bba3457c1a80">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry back up#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="d451a5c2-b3dc-456c-895e-e5b8775e07bf" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry back up</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="01ddd45d-56c9-4ceb-bc9a-a79b02a61595" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="304cb237-3b9c-45c0-9a6c-602027ba4db0">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="1ec5449f-99f3-4d61-bc2b-5fa0613d072b">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="2859d500-5eaf-4df2-b23d-8e286cf6be75">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))="-1"</path>
              <content>false</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="d75082a8-5c18-4dc2-95f7-4efb3352ae9a">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="01086957-e132-47c0-80f9-20b26abccd30">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="845121ca-0957-4f09-b794-532941c1091b">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="773b0825-f312-4998-beb7-6d61b5f5661e">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="17c7da17-4dcf-4dba-82cc-a3ce9083827f">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>113</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>92</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>535-PID0097067781</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>NEIDA</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>MITCHELL</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666212895</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>3811 BEAVER DR</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>AMARILLO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>TX</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>79107</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>05131956</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1956</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>15</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181019_09-56-52\Strategy 113\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value>This test passed</con:value>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value>5384955</con:value>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>4565</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value>535-PID0097067781</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>535-PID0097067781</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>535-PID0097067781\n\n</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>11</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="05ba94a0-4c65-44c0-85a5-035a488634a4" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 114 - Score ,Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="97a89c91-e43f-40d3-b87a-cbf225cdeec5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MMAS006'
where sub_cd='${#TestCase#subcode}' and prod_opt='17'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="d0e3b9c7-9509-47e1-b6b6-d00b6b9fab06">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='114'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="a7027c20-dc23-4f9f-a257-59ab23bd1d52">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="1f301d91-c6ca-4d19-bb0f-956594486c10">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MMAS006'
where sub_cd='${#TestCase#subcode}' and prod_opt='17'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="60b0e7dd-7d5f-4b7d-a8ee-82d262c2ae7d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='114'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="cd8348e0-8a2e-4dab-bf90-22353d77289d">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="d9f306ae-618d-4cc7-89a4-23574fb0d890">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="8988e0fc-aaeb-48aa-9ea0-53da620d713d">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
//Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
//cm_score_tragg = aq.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
//propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="25d40c92-a260-4d0c-86da-9de73416a0da">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry backup" id="4f647091-e41e-4b22-8a1c-5e950bef9ec9" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="a8a4a50c-778b-4837-88d1-7162a1f93558">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="5f65233e-4704-4d51-9104-c0e542bbf317" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="eb36d8d0-acb5-456e-bc06-d82b7f2628bc">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="8c100d9b-78da-42c4-972f-4fd7e2f3f539" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry backup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="68d0bf8e-62b6-48b3-afb5-ca9400325d5a" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG Answer Questions" id="3716a217-c25b-4bd0-aea4-014823fc88ba" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directorySTGAnswerQuestionsRequest = propTestStep.getPropertyValue("directorySTGAnswerQuestionsRequest")
def directorySTGAnswerQuestionsResponse = propTestStep.getPropertyValue("directorySTGAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directorySTGAnswerQuestionsRequest+reference+"_STG Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directorySTGAnswerQuestionsResponse+reference+"_STG Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="62cccc94-2d0a-4746-818e-d2b6964c323e" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="b902e337-f2d1-4740-8da6-0e99152fe8cd" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry backup" id="d92b975a-888a-4bae-81f8-e5fea9ef52e9" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="7e070955-6966-4c56-aeb4-cb011a7a2a90">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="94492f7c-e95e-4d6a-b123-2979e6a9d4c6" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="334c5daa-674b-4e26-9484-efb54dcc38b9">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="90cc1345-dc54-41bf-9be5-5e85c4ad5443" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="3cbcdc6e-b4db-4374-8c3c-64aeae361574" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="00ee4f18-9eb5-460a-9f44-6899ea9f3e5c">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="e832ade1-5405-4bb5-aec5-6d7dedfbb1cd">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="d01b6638-3fb5-415f-b0b4-411a98da753c">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))="-1"</path>
              <content>false</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="3efbce5a-56d1-4b3f-864e-f43019f13d9f">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="2e56a765-9370-4671-b711-cd2f5d1af494">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="e57e18e9-3fca-468a-80be-3226563edd86">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="c02bfa2b-c84b-4e2c-8819-4c66fc581bd8">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="e47e61c1-5221-4691-8e75-59d357b4a5ef">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>114</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>14</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>063-AS30005554018</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JODY</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>B</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>TREUER</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666253160</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>2810 GATEWAY AVE</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>BISMARCK</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>ND</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>58501</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>08221975</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1975</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>ND</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>502029625</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7012983686</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>17</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>15</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20180831_08-10-23\Strategy 114\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>Y</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>4540</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value><![CDATA[559-ERROR 092



- - - STAGING ANSWER QUESTION ERROR START - - - -CompletionCode - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()], expecting [0000], actual was [4000]]- - - STAGING ANSWER QUESTION ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -CompletionCode - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()], expecting [0000], actual was [4000]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Version> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <PrimaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <SecondaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ResponseCodeDesc> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ReferenceText> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreResults><Score> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes01Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes03Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes07Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes21Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes28Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes90Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value><![CDATA[044-AS30002508316



- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreResults><Score> - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")], expecting [286], actual was [270]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreFactors><Score> - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")], expecting [286], actual was [270]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")], expecting [Risky email address], actual was [Recent bankcard revolving or charge card inquiry]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")], expecting [More than 2 trades opened in the last 6 months], actual was [Risky email address]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")], expecting [W103], actual was [W112]]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")], expecting [W111], actual was [W103]]- - - RESPONSES COMPARISON ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value><![CDATA[559-ERROR 092\n\n\n\n- - - STAGING ANSWER QUESTION ERROR START - - - -CompletionCode - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()], expecting [0000], actual was [4000]]- - - STAGING ANSWER QUESTION ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -CompletionCode - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()], expecting [0000], actual was [4000]]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Version> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Version[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Version[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <PrimaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <SecondaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ResponseCodeDesc> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ReferenceText> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreResults><Score> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes01Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes03Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes07Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes21Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes28Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - \n\n- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes90Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';\n//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - -]]></con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>12</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="c8b9324e-9e62-492c-b76b-decc75ac67a0" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 115 - Score and Score Factors" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="97563d70-4002-4136-bb2f-213f4ab9054b">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='15'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="553ba5f1-9765-4042-bd38-3f7b04331da9">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='115'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="446c8140-e3ae-4040-8750-06fe2cb4e941">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="cc45ec7e-1641-4ca4-95c8-8599566bd474">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='N', pid_model_ty='SM', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='15'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="eb965a8b-8de2-442b-a585-0cf9bb541fca">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='115'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="4200735e-5f6a-40b6-bc36-026d7042d8dc">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="2350d824-5fd9-42c8-a3ba-d2c6a1961488">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="5255cabe-0fc6-4d5f-9a5a-251ed06747fd">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
//Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
//cm_score_tragg = ap.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
//propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="800d4592-2f75-4665-9df2-d19e26f249e3">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry_bkup" id="c562e960-6827-4f48-be80-00d66883f93d" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry_bkup" id="e7dd4e7e-f052-40cb-83f4-e578c314016d" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry_bkup#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry_bkup#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="c886570e-93aa-44fe-8c17-0f949d111b50">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="ffd09aaa-27da-4c88-8670-ba024d8daf8a" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="0e0db38b-2327-4875-857e-2bd42943ba34">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="abcfa6ce-72a1-44d3-9f6b-c1a57fcb3b4d" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry_bkup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="85355277-e6c2-41e1-b5db-f393c027f169" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="1f9a18fe-8cb2-4081-b28e-b445340f7ed8" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Type>${Property - Aux Vars#phoneType}</Type>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="3e05edb8-1c8e-4317-8162-34c95d9c3a0e" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry_bkup" id="cdc7bf39-4b30-419d-adb6-a9b13a95d43e" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry_bkup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry_bkup" id="eb097a83-31de-49c8-9c92-3056d9a60d8d" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry_bkup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry_bkup#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry_bkup#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="c7192445-f9d6-409b-9567-70abfa66ff61">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="fe4303fd-021d-4a53-a354-8150b460891e" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo First Inquiry" id="87412506-6467-4565-96d3-a20ef8f329be">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="3caaa109-b86a-401d-abc6-4063c5dc1516" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry_bkup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="68e6477c-b0f7-45c4-89be-642b58a422d3">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="d53962ab-83bc-44e2-b624-7c93dbe3926f">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="3b4b7c78-6376-430b-a740-831f96956e06">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))="-1"</path>
              <content>false</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="252b84af-5b11-4268-99f6-cbe7ed1a8639">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="fb4f0fa0-318e-4bb6-8637-e644265bebed">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="5434e4d1-4694-471b-9208-40c4ed9345b3">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="f7d108ba-2fe7-461b-9b6f-d14aa7bbd651">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="47d17fdf-5e91-4f1d-aee8-95d0f90232b5">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>115</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>92</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>88</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>511-PID0097038794</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>AMY</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>D</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BISHOP</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666445755</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>41 E 209TH ST</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>EUCLID</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>OH</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>44123</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>06141961</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1961</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>8066591563</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>15</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>89</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 115\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value>This test passed</con:value>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value>5385242</con:value>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>4582</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value>511-PID0097038794</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value>511-PID0097038794</con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value>511-PID0097038794\n\n</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>14</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="dbe0bfd8-c7c7-4191-8705-3ffa4a9a04d8" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 116 - Score ,Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="0033ff0f-be70-4d1b-92cf-edc588e8b5dc">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MMAS006'
where sub_cd='${#TestCase#subcode}' and prod_opt='17'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="297ec02f-bdaa-4b5c-80cc-ebaf1ec080a5">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='116'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="e351577a-a4ed-48a0-96fd-ed35f26db75c">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="0a22a427-1580-4ea7-a155-c6aaefe0b2f4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MMAS006'
where sub_cd='${#TestCase#subcode}' and prod_opt='17'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="7646d92e-5836-4d50-bc10-99d7f530be08">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='116'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="628e6dc6-14b1-437f-a005-c27f15810f1f">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="6dfd0023-b9b8-45ea-a705-0975dc2dd8af">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="5a8c054d-4b34-4be9-afae-739a2c0d237b">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="6563813f-f3be-4ed2-ab46-dae23b5768c6">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry backup" id="ac7e30de-f18d-40e2-9b1b-595ffcc1bdb5" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="177e4659-5dd4-4685-96bd-192d639c4118">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="eefa9221-23f3-4626-8fd2-2f5a9bfbc4f3" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="5ffaf3ca-02ab-4a0e-b81f-72f5593e1180">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="c435f277-4fcd-4f7a-bb3b-29336a9d2170" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="445c8889-3823-4535-9215-0c136ff93324" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry backup" id="4f422046-7fca-437b-a2e8-5b6c66865fa1" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="0a6cd9ae-c589-4f1b-9e9c-828150d8cc9a">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="77c2bf33-5155-4e95-b30d-cb3e8d393c3d" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="124baa4a-e95b-49a7-abca-4169d8de511f">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="91994837-4f12-4ec3-bec1-81a991cf404f" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="9df47843-bf0e-4126-9b26-61eb4dd72b6c" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="b2bd33e8-8a4d-4510-b66c-ee45c9ca8005">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="0192d042-f56a-4f70-9793-567d27252fe3">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="41fa0f4e-dc16-4752-8232-ccc9bc0312d0">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))="-1"</path>
              <content>false</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="91c493ab-5556-4256-a2aa-1be22317aca5">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="cf4cf85e-394a-4ad7-ba01-9dbc83a0d6bd">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="1baefeaf-6ec0-4e70-b06d-94d3872f351b">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="62bcb211-bee4-46d9-9e90-e5f55380b4bc">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="17d1e694-d598-4390-9d3d-a1e124da974a">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>116</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>92</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>88</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>511-PID0097038794</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>AMY</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>D</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BISHOP</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666445755</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>41 E 209TH ST</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>EUCLID</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>OH</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>44123</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>06141961</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1961</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>8066591563</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>17</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>15.123.178.15</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value>163</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value>99999</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value>346</con:value>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>true true</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>1680 1680</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value>5    1</con:value>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value>1.18</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>89</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>Y</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value>5</con:value>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value><![CDATA[511-PID0097038794\n\n\n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),\"\")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),\"\")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),\"\")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),\"\")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,\"\")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,\"\")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,\"\")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value>5385046</con:value>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>4582</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value><![CDATA[511-PID0097038794



- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value><![CDATA[511-PID0097038794



- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value><![CDATA[511-PID0097038794\n\n\n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),\"\")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),\"\")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),\"\")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),\"\")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,\"\")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,\"\")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,\"\")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>13</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="a6993beb-f993-40fe-9058-d6e6fefdff51" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 118 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="a21e5015-7de2-4253-810b-7e022ca73e39">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="3b2442b3-cd6e-4bc7-a831-2798d2b4ee40">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='118'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="39856ffd-bb9a-48f5-9c4d-49ef58f38675">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="09e4b91c-72c4-47f4-a1da-842e0a5d823d">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="29b51c8b-2ac0-41fe-8e2d-9dfbc318c3ad">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='118'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="725f65b3-f17c-4080-93af-2b019d21e326">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="bc26802e-df82-44cc-85ea-dbb795910e70">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="704071c5-18d2-42b1-a1d4-b74eb314426d">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
Cell ap = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
cm_score_tragg = ap.getContents()
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="bb135dc3-939d-41e6-9cea-a7748631040d">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry backup" id="b327b348-3a69-4846-8c0d-4dca2ab68488" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="e11b33cb-5ae6-40a8-931a-a66f8a072f71">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="ff671ea0-33a7-4480-b65e-f364b63127ab" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="6fc713a7-1e9f-4824-83ca-43f9cfa04665">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Check for Deceased Customer" id="37032b8b-4aee-4066-a71a-9e5a5e89c685" disabled="true">
        <con:settings/>
        <con:config>
          <script>///CREATE OBJECTS FROM REGULAR FLOW TESTSTEPS 

def myTestCase = context.testCase //myTestCase contains the test case
 
propTransferSTGRequest = myTestCase.getTestStepByName("Property Transfer STG Requests") // get the Property Transfer STG Requests object

restRequestSTGAnswerQuestions = myTestCase.getTestStepByName("REST Request - STG Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespSTGAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from STG Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

restRequestDemoFirstInquiry = myTestCase.getTestStepByName("REST Request - Demo First Inquiry") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiry = myTestCase.getTestStepByName("Groovy Script - Save Request And Response from Demo First Inquiry") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

propTransferDemoRequest = myTestCase.getTestStepByName("Property Transfer Demo Requests") // get the Property Transfer STG Requests object

restRequestDemoAnswerQuestions = myTestCase.getTestStepByName("REST Request - Demo Answer Questions") // get the REST Request - STG Answer Questions object

saveReqAndRespDemoAnswerQuestions = myTestCase.getTestStepByName("Groovy Script  - Save Request And Response from Demo Answer Questions") // get the Groovy Script  - Save Request And Response from STG Answer Questions object

/// CREATE OBJECTS FROM DECEASED CUSTOMER FLOW

restRequestDemoFirstInquiryDeceased = myTestCase.getTestStepByName("REST Request - Demo First Inquiry Deceased") // get the Property Transfer STG Requests object

saveReqAndRespDemoFirstInquiryDeceased = myTestCase.getTestStepByName("Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased") // get the Groovy Script  - Save Request And Response from STG Answer Questions object


//////Check for &lt;PreciseIDScore> 9001 or 9013 in the STG First Inquiry

def stgFirstInquiryRequest = context.expand('${REST Request - STG First Inquiry backup#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryRequest)

if ( NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9001' || NetConnectResponse.Products.PreciseIDServer.Summary.PreciseIDScore.text() == '9013'){
	log.info "Deceased"
	propTransferSTGRequest.disabled = true

	restRequestSTGAnswerQuestions.disabled = true

	saveReqAndRespSTGAnswerQuestions.disabled = true

	restRequestDemoFirstInquiry.disabled = true

	saveReqAndRespDemoFirstInquiry.disabled = true
	
	propTransferDemoRequest.disabled = true

	restRequestDemoAnswerQuestions.disabled = true

	saveReqAndRespDemoAnswerQuestions.disabled = true

	restRequestDemoFirstInquiryDeceased.disabled = false

	saveReqAndRespDemoFirstInquiryDeceased.disabled = false	

	
}else{
	log.info "Alive"
	propTransferSTGRequest.disabled = false

	restRequestSTGAnswerQuestions.disabled = false

	saveReqAndRespSTGAnswerQuestions.disabled = false

	restRequestDemoFirstInquiry.disabled = false

	saveReqAndRespDemoFirstInquiry.disabled = false
	
	propTransferDemoRequest.disabled = false

	restRequestDemoAnswerQuestions.disabled = false

	saveReqAndRespDemoAnswerQuestions.disabled = false

	restRequestDemoFirstInquiryDeceased.disabled = true

	saveReqAndRespDemoFirstInquiryDeceased.disabled = true	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer STG Requests" id="5e0d4f30-112c-44ba-9b7b-4e3cbc525d1c" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - STG First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - STG First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG Answer Questions" id="f5df53b8-a335-4c70-8ab0-81ce3ccd6b7e" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directorySTGAnswerQuestionsRequest = propTestStep.getPropertyValue("directorySTGAnswerQuestionsRequest")
def directorySTGAnswerQuestionsResponse = propTestStep.getPropertyValue("directorySTGAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directorySTGAnswerQuestionsRequest+reference+"_STG Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directorySTGAnswerQuestionsResponse+reference+"_STG Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="85fc3530-3fd1-434c-97ea-a26dc34a32c8" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not  exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not  exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="347b941b-e91e-4e9f-a9b7-f78c51d2dd3e" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry back up" id="363d8003-a711-4e76-b9d8-f9e77bb644ca" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry back up" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="2b968a3d-4346-4e87-8d32-e98cabcd8aa3">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="4338b252-eee3-44e3-9864-5f5ac2ceb50b" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="478c8df0-d684-4ab6-9d59-0023b157cf9b">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="5acda169-14f8-4ac2-9346-0523e48b80e3" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry back up</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="16f78763-76ad-47bc-b377-07eb5089eca9" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="e6981c77-f8ab-47e1-8740-67cf517b38ce">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="b6666267-5a5a-4c4d-89fe-c837252e063f">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="d3f57029-ba6d-4c56-99d7-a17666520d62">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="3300ab2f-95eb-4070-ae9e-31119b0252ae">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="9645de4b-f2d6-4c0a-9245-1101c720fa8a">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="830b96d0-d416-430a-95e9-b7ec60972dbd">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="ac2bb1ef-d4de-464e-b70c-01e5c4ce51d9">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="befec74b-8bac-428e-8405-7a0a4b0e1988">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>118</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>95</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>3</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value>MICKEY.MOUSE@AFS.MIL</con:value>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>10.10.6.81</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>PAPER</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>1M010</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>A</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value>350</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>nullStrategy 118\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>nullStrategy 118\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>nullStrategy 118\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>nullStrategy 118\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 118\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 118\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>nullStrategy 118\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>nullStrategy 118\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>nullStrategy 118\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>nullStrategy 118\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>nullStrategy 118\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>nullStrategy 118\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>16</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="7d03ac34-a143-4a19-bf94-e3776dc16270" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 119 - Score ,Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="9ba58ca4-b9e4-47fb-8b39-8456bc9e1282">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='17'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="921d2428-ee9a-48b0-b151-0cd068e80fb4">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='119'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="b73bdd0d-4fdf-4a4f-af5e-6c1af991b686">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo PID Client Profile" id="7625f54d-cfc8-49a4-9bf4-80ca8abe55b7">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pic001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='17'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="c4208976-2e52-4d0d-8c5e-20c82ebc7173">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='119'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="476772cb-a7e9-45f6-842c-74ddcf41679b">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="79db6ab4-391e-4102-a3c6-c5ea9e90f8c3">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="59bbe2cb-4578-4552-93ea-cfd91d5c9a8c">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="febc6930-d199-463a-9477-5188ffedf26d">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry backup" id="1011c626-56e8-4a69-a1e1-5a42c4755df1" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="e5a60d1d-aedc-4199-9e88-cb142312062c">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="eefa9221-23f3-4626-8fd2-2f5a9bfbc4f3" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="2bfa5e51-873d-4cd4-8d47-043bcbfb576e">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry Deceased" id="bb7492e5-bd17-40e2-990c-ab18b1323c46" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry Deceased" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath MatchXPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>false</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Copy of Groovy Script - Save Request And Response from Demo First Inquiry Deceased" id="e29af424-6b1a-4fe3-abec-69cd7337d052" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry Deceased#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry Deceased#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry backup" id="b410a04e-9ecc-425f-b2fa-c1b403d18b13" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry backup" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="11823171-9cdb-4bc3-85c5-94e5201dfa2c">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Aux Vars#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Aux Vars#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Aux Vars#lastName}</Surname>
						<First>${Property - Aux Vars#firstName}</First>
						<Middle>${Property - Aux Vars#middleName}</Middle>
						<Gen>${Property - Aux Vars#gen}</Gen>
					</Name>
					<SSN>${Property - Aux Vars#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Aux Vars#address}</Street>
						<City>${Property - Aux Vars#city}</City>
						<State>${Property - Aux Vars#state}</State>
						<Zip>${Property - Aux Vars#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Aux Vars#dlState}</State>
						<Number>${Property - Aux Vars#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Aux Vars#phone}</Number>
					</Phone>
					<DOB>${Property - Aux Vars#dob}</DOB>
					<YOB>${Property - Aux Vars#yob}</YOB>
					<EmailAddress>${Property - Aux Vars#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Aux Vars#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Aux Vars#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Aux Vars#ccString1}</CCString>
	                    <CCString>${Property - Aux Vars#ccString2}</CCString>
	                    <CCString>${Property - Aux Vars#ccString3}</CCString>
	                    <CCString>${Property - Aux Vars#ccString4}</CCString>
	                    <CCString>${Property - Aux Vars#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Aux Vars#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="77c2bf33-5155-4e95-b30d-cb3e8d393c3d" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6293fe4a-eb57-4aa7-8cc8-f3320c7c2713" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4c68454c-9c2c-4294-8cdc-33869be20188" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="6187770b-f593-46f9-9843-c74232998a8e" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="51d073d9-59f5-46e4-a441-4b38d68ea12b">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry backup#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer Demo Requests" id="32709b45-292f-4f4f-b419-396fc37f9357" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>REST Request - Demo First Inquiry backup</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>REST Request - Demo First Inquiry</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from Demo Answer Questions" id="baca78ea-302f-492b-a32b-0e405c8ff4d9" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain folders to save request and response
def directoryDemoAnswerQuestionsRequest = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsRequest")
def directoryDemoAnswerQuestionsResponse = propTestStep.getPropertyValue("directoryDemoAnswerQuestionsResponse")
def reference = propTestStep.getPropertyValue("referenceText")

// Write Request to XMl File 
def myXmlRequest = directoryDemoAnswerQuestionsRequest+reference+"_Demo Answer Questions_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")


// Write Response to XMl File
def myXmlResponse = directoryDemoAnswerQuestionsResponse+reference+"_Demo Answer Questions_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="b22b3588-5615-4ce8-8f3d-b9727a038279">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="6f9407f1-2aa3-40f3-8c87-d2995dbf7dc9">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where client_trn_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="844b73b3-96c8-48c3-aa51-e04ab9398a83">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where clt_track_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))="-1"</path>
              <content>false</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1='http://www.experian.com/NetConnectResponse'; //ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:Summary[1]/ns1:ReviewReferenceID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="e66404c9-6e03-40a9-b433-7884ef898602">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="d2a6b309-a2fb-41ce-a0ef-52e280b8051f">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

def XMLName = "Strategy "+sheetName[excelSheetNumber]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="3968907c-2ab5-41dc-abe9-3b3c5ffd1fde">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="f89b727a-7272-4e62-81ac-d783d9dd5e17">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="31c23388-5b88-40a0-8fe9-5ab5b1721994">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>116</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>92</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>88</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>511-PID0097038794</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>AMY</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>D</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BISHOP</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666445755</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>41 E 209TH ST</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>EUCLID</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>OH</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>44123</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>06141961</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1961</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>8066591563</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>17</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value>15.123.178.15</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value>163</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value>99999</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value>346</con:value>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>true true</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>0</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>1680 1680</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value>5    1</con:value>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value>1.18</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>89</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN Regression\20181026_08-43-13\Strategy 116\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>Y</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value>5</con:value>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value><![CDATA[511-PID0097038794\n\n\n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),\"\")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),\"\")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),\"\")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),\"\")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,\"\")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,\"\")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,\"\")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value>5385046</con:value>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value>4582</con:value>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value><![CDATA[511-PID0097038794



- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value><![CDATA[511-PID0097038794



- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),"")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value><![CDATA[511-PID0097038794\n\n\n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreResults><Score> Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text(),\"\")], expecting [541], actual was [533]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),\"\")], expecting [Inconsistent linkage of identity elements], actual was [Low level of authentication indicative of fraud]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),\"\")], expecting [Late payment on loan reported in the last two years], actual was [Inconsistent linkage of identity elements]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Content Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),\"\")], expecting [Length of time loan reported with collection status], actual was [Late payment on loan reported in the last two years]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor2> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,\"\")], expecting [CF02], actual was [CF01]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor3> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,\"\")], expecting [CF26], actual was [CF02]]- - - DEMO FIRST INQUIRY ERROR END - - - - \n\n- - - DEMO FIRST INQUIRY ERROR START - - - -XPath Match - <ScoreFactors><ScoreFactor4> Code Comparison Between STG and Demo Responses - - - - -[XPathContains comparison failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';\nconcat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,\"\")], expecting [CF21], actual was [CF26]]- - - DEMO FIRST INQUIRY ERROR END - - - -]]></con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>17</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>testCasesWorkbookLocation</con:name>
        <con:value>C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls</con:value>
      </con:property>
      <con:property>
        <con:name>IENTestRunID</con:name>
        <con:value>16444</con:value>
      </con:property>
      <con:property>
        <con:name>IENTestRailRefIDFolder</con:name>
        <con:value>C:\\SoapUI\\Test Data\\IEN Regression\\TestRail Reference\\</con:value>
      </con:property>
    </con:properties>
  </con:testSuite>
  <con:testSuite id="5c68d9d4-5996-42f3-b5f5-cb7c778d3c9b" name="New Model">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="5fe0cd9b-874b-4be3-a9fd-0b2d9ba893ca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set Response Folder" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Response Folder" id="bcc59c03-942d-4791-a195-2b9ded9088b7">
        <con:settings/>
        <con:config>
          <script>def date = new Date()
def dt = date.format("yyyyMMdd") 
def ts = date.format("HH-mm-ss") 
def directory = "C:\\SoapUI\\Test Response\\IEN New Model\\"+dt+"_"+ts+"\\"
new File(directory).mkdir()
return directory</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:testCase id="78492689-6305-4eaa-944b-c8bea013af15" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 117 - Score, Score Factors and Attributes" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="25ba3860-2271-4fc6-aea7-c9a405237243">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='1', 
ckpt_profl_id='MMAS006'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="8e417a57-3723-4e24-bfd7-5f7d145f5691">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='117', new_attr_in='Y', suppress_pii_in='N'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - STG IEN cache refresh" id="97ca292b-595a-49d9-97f2-b6cc14528ce4">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - STG IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="b3dff18d-dfdb-4d7e-a474-c652ce11c2cf" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='103'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="HTTP Request - Demo IEN cache refresh" id="45a6dc8a-2b83-425c-a6a1-229d0559acab" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="HTTP Request - Demo IEN cache refresh" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="43f3ab54-274f-4014-9ad8-b44d682d85d5">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="9d361a72-325d-4c62-aa64-b8561eb6e3fb">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def counter,next,previous,size //Variables used to handle the loop and to move inside the file

//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls")) //file containing the data

def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def excelSheetNumber = testRunner.testCase.getPropertyValue("excelSheetNumber").toInteger()

Sheet sheet1 = workbook1.getSheet( excelSheetNumber ) //save the first sheet in sheet1

def sheetName = workbook1.getSheetNames()

propTestStep.setPropertyValue("excelSheetName",sheetName[ excelSheetNumber ]) 

size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set

propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = ( counter > size-3 ? 0: counter+1) //set the next value

// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5

//Cell ap = sheet1.getCell(38,counter+1) // obtains Month

//Cell aq = sheet1.getCell(39,counter+1) // obtains Day

//Cell ar = sheet1.getCell(40,counter+1) // obtains Year

//Cell at = sheet1.getCell(38,counter+1) // obtains CM_SCORE_TRAGG
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()

//month = ap.getContents()

//day = aq.getContents()

//year = ar.getContents()

//cm_score_tragg = at.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)

//propTestStep.setPropertyValue("month", month)

//propTestStep.setPropertyValue("day", day)

//propTestStep.setPropertyValue("year", year)

//propTestStep.setPropertyValue("cm_score_tragg", cm_score_tragg)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter > size-3)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Set Folders" id="bd4da2fa-c1fb-4474-be63-a9dd384a4bc6">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//obtain the excel sheet number to name the folders
def StrategyNumber = propTestStep.getPropertyValue("excelSheetName")

///obtain the main evidence directory
def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy "+StrategyNumber+"\\"
new File(directory).mkdir()

//Sets directory for Staging environment evidence
def directorySTG = directory+"\\STG\\"
new File(directorySTG).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryRequest = directorySTG+"\\STG First Inquiry Request\\"
new File(directorySTGFirstInquiryRequest).mkdir()

//Sets directory for Staging environment First Inquiry Request evidence
def directorySTGFirstInquiryResponse = directorySTG+"\\STG First Inquiry Response\\"
new File(directorySTGFirstInquiryResponse).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsRequest = directorySTG+"\\STG Answer Questions Request\\"
new File(directorySTGAnswerQuestionsRequest).mkdir()

//Sets directory for Staging environment Answer Questions Request evidence
def directorySTGAnswerQuestionsResponse = directorySTG+"\\STG Answer Questions Response\\"
new File(directorySTGAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the INV_LOG result in STG
def DirectoryINVLOGStg = directorySTG+"\\INV LOG\\" 
new File(DirectoryINVLOGSTG).mkdir()

//Folder for the USAGE_REPORT result in STG
def DirectoryUSAGEREPORTStg = directorySTG+"\\USAGE REPORT\\" 
new File(DirectoryUSAGEREPORTStg).mkdir()

//Folder for the PID_BILLING_LOG result in STG
def DirectoryPIDBILLINGLOGStg = directorySTG+"\\PID BILLING LOG\\" 
new File(DirectoryPIDBILLINGLOGStg).mkdir()
*/

//Sets directory for Demo environment evidence
def directoryDemo = directory+"\\Demo\\"
new File(directoryDemo).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryRequest = directoryDemo+"\\Demo First Inquiry Request\\"
new File(directoryDemoFirstInquiryRequest).mkdir()

//Sets directory for Demo environment First Inquiry Request evidence
def directoryDemoFirstInquiryResponse = directoryDemo+"\\Demo First Inquiry Response\\"
new File(directoryDemoFirstInquiryResponse).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsRequest = directoryDemo+"\\Demo Answer Questions Request\\"
new File(directoryDemoAnswerQuestionsRequest).mkdir()

//Sets directory for Demo environment Answer Questions Request evidence
def directoryDemoAnswerQuestionsResponse = directoryDemo+"\\Demo Answer Questions Response\\"
new File(directoryDemoAnswerQuestionsResponse).mkdir()

///////////////////////////////////////////////////////////////////////////////////////////////////
///Following folders to be implemented when the DB checking steps are implemented//////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/*
//Folder for the CM_RQST_LOG result in Demo
def DirectoryCMRQSTLOGDemo = directoryDemo"\\CM RQST LOG\\" 
new File(DirectoryCMRQSTLOGDemo).mkdir()

//Folder for the CM_RESP_LOG result in Demo
def DirectoryCMRESPLOGTDemo = directoryDemo+"\\CM RESP LOG\\" 
new File(DirectoryCMRESPLOGTDemo).mkdir()

//Folder for the CM_SCORE_TRAGG_LOG result in Demo
def DirectoryCMSCORETRAGGLOGDemo = directoryDemo+"\\CM SCORE TRAGG LOG\\" 
new File(DirectoryCMSCORETRAGGLOGDemo).mkdir()
*/

//Sets directory for Compare Results evidence
def directoryCompareResults = directory+"\\Comparison Results\\"
new File(directoryCompareResults).mkdir()


//sends the directories to the property step for further reference in other steps
propTestStep.setPropertyValue("generalDirectory",directory)

propTestStep.setPropertyValue("directorySTG",directorySTG)
propTestStep.setPropertyValue("directorySTGFirstInquiryRequest",directorySTGFirstInquiryRequest)
propTestStep.setPropertyValue("directorySTGFirstInquiryResponse",directorySTGFirstInquiryResponse)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsRequest",directorySTGAnswerQuestionsRequest)
propTestStep.setPropertyValue("directorySTGAnswerQuestionsResponse",directorySTGAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryINVLOGSTG",DirectoryINVLOGSTG)
propTestStep.setPropertyValue("DirectoryUSAGEREPORTStg",DirectoryUSAGEREPORTStg)
propTestStep.setPropertyValue("DirectoryPIDBILLINGLOGStg",DirectoryPIDBILLINGLOGStg)
*/

propTestStep.setPropertyValue("directoryDemo",directoryDemo)
propTestStep.setPropertyValue("directoryDemoFirstInquiryRequest",directoryDemoFirstInquiryRequest)
propTestStep.setPropertyValue("directoryDemoFirstInquiryResponse",directoryDemoFirstInquiryResponse)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsRequest",directoryDemoAnswerQuestionsRequest)
propTestStep.setPropertyValue("directoryDemoAnswerQuestionsResponse",directoryDemoAnswerQuestionsResponse)
/*
propTestStep.setPropertyValue("DirectoryCMRQSTLOGDemo",DirectoryCMRQSTLOGDemo)
propTestStep.setPropertyValue("DirectoryCMRESPLOGTDemo",DirectoryCMRESPLOGTDemo)
propTestStep.setPropertyValue("DirectoryCMSCORETRAGGLOGDemo",DirectoryCMSCORETRAGGLOGDemo)
*/

propTestStep.setPropertyValue("directoryCompareResults",directoryCompareResults)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="ba53ab51-9961-44ef-9948-7a3875c61dc4">
        <con:settings/>
        <con:config service="http://10.8.65.17:5013" resourcePath="/fraudsolutions/pidcm/v1/cm" methodName="Cm 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="ct-remote-user" value="${#Project#PIDUsername}" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>http://10.8.65.17:5013</con:endpoint>
            <con:request><![CDATA[<Experian>
  <Request>
    <Products>
      <CustomerManagement>
        <Version>01.00</Version>
        <Subscriber>
          <Preamble>TCA1</Preamble>
          <OpInitials>sc</OpInitials>
          <SubCode>${Property - Aux Vars#subcode}</SubCode>
        </Subscriber>
        <ClientTrackingID>${Property - Aux Vars#referenceText}</ClientTrackingID>
        <CustomerCreationDate/>
        <AccountOpenDate/>
        <ApplicationScore/>
        <ApplicationTranID/>
        <ApplicationSysID/>
        <ConsumerInformation>
          <Name>
            <Last>${Property - Aux Vars#lastName}</Last>
            <First>${Property - Aux Vars#firstName}</First>
            <Middle>${Property - Aux Vars#middleName}</Middle>
          </Name>
          <CurrentAddress>
            <Street>${Property - Aux Vars#address}</Street>
            <City>${Property - Aux Vars#city}</City>
            <State>${Property - Aux Vars#state}</State>
            <Zip>${Property - Aux Vars#zip}</Zip>
            <Zip4/>
          </CurrentAddress>
          <Phone>
            <Number>${Property - Aux Vars#phone}</Number>
          </Phone>
          <SSN>${Property - Aux Vars#ssn}</SSN>
          <DriverLicense>
            <State>${Property - Aux Vars#dlState}</State>
            <Number>${Property - Aux Vars#dlNumber}</Number>
          </DriverLicense>
          <DateOfBirth>
            <Year>${Property - Aux Vars#year}</Year>
            <Month>${Property - Aux Vars#month}</Month>
            <Day>${Property - Aux Vars#day}</Day>
          </DateOfBirth>
        </ConsumerInformation>
        <Options>
          <ProductOption>${#TestCase#ien_po}</ProductOption>
          <ReferenceText>${Property - Aux Vars#referenceText}</ReferenceText>
        </Options>
        <EmailAddress>${Property - Aux Vars#email}</EmailAddress>
        <IPAddress>${Property - Aux Vars#ip}</IPAddress>
        <CCNumerics>
          <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
        </CCNumerics>
        <CCStrings>
          <CCString>${Property - Aux Vars#ccString1}</CCString>
          <CCString>${Property - Aux Vars#ccString2}</CCString>
          <CCString>${Property - Aux Vars#ccString3}</CCString>
          <CCString>${Property - Aux Vars#ccString4}</CCString>
          <CCString>${Property - Aux Vars#ccString5}</CCString>
        </CCStrings>
      </CustomerManagement>
    </Products>
  </Request>
</Experian>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode" disabled="true">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="cb6c621e-45d2-4a14-8a33-b93c231eec18" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def Experian = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( Experian.Response.Products.CustomerManagement.ScoreResults.Score.text() == '999' || Experian.Response.Products.CustomerManagement.ScoreResults.Score.text() == '9999'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="3c841d0c-cc3b-40fb-878a-9fc68234ab06" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="955cc43b-f422-49f1-aa42-64d5f40053e3" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="4a66ede0-cc48-4df2-90b4-7a168bfa52db" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
              <con:password/>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script  - Save Request And Response from STG First Inquiry" id="27584008-0ff7-44d6-ae36-d21474689817">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directorySTGFirstInquiryRequest = propTestStep.getPropertyValue("directorySTGFirstInquiryRequest")
def directorySTGFirstInquiryResponse = propTestStep.getPropertyValue("directorySTGFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directorySTGFirstInquiryRequest+reference+"_STG First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directorySTGFirstInquiryResponse+reference+"_STG First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Demo First Inquiry" id="b1639fc2-93b5-446c-875c-dd5d3c899612" disabled="true">
        <con:settings/>
        <con:config service="http://10.8.65.17:5013" resourcePath="/fraudsolutions/pidcm/v1/cm" methodName="Cm 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Demo First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="application/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="ct-remote-user" value="${#Project#DemoUsername}" xmlns="http://eviware.com/soapui/config"/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>http://10.8.114.75:8280</con:endpoint>
            <con:request><![CDATA[<Experian>
  <Request>
    <Products>
      <CustomerManagement>
        <Version>01.00</Version>
        <Subscriber>
          <Preamble>TCA1</Preamble>
          <OpInitials>sc</OpInitials>
          <SubCode>${Property - Aux Vars#subcode}</SubCode>
        </Subscriber>
        <ClientTrackingID>${Property - Aux Vars#referenceText}</ClientTrackingID>
        <CustomerCreationDate/>
        <AccountOpenDate/>
        <ApplicationScore/>
        <ApplicationTranID/>
        <ApplicationSysID/>
        <ConsumerInformation>
          <Name>
            <Last>${Property - Aux Vars#lastName}</Last>
            <First>${Property - Aux Vars#firstName}</First>
            <Middle>${Property - Aux Vars#middleName}</Middle>
          </Name>
          <CurrentAddress>
            <Street>${Property - Aux Vars#address}</Street>
            <City>${Property - Aux Vars#city}</City>
            <State>${Property - Aux Vars#state}</State>
            <Zip>${Property - Aux Vars#zip}</Zip>
            <Zip4/>
          </CurrentAddress>
          <Phone>
            <Number>${Property - Aux Vars#phone}</Number>
          </Phone>
          <SSN>${Property - Aux Vars#ssn}</SSN>
          <DriverLicense>
            <State>${Property - Aux Vars#dlState}</State>
            <Number>${Property - Aux Vars#dlNumber}</Number>
          </DriverLicense>
          <DateOfBirth>
            <Year>${Property - Aux Vars#year}</Year>
            <Month>${Property - Aux Vars#month}</Month>
            <Day>${Property - Aux Vars#day}</Day>
          </DateOfBirth>
        </ConsumerInformation>
        <Options>
          <ProductOption>${#TestCase#ien_po}</ProductOption>
          <ReferenceText>${Property - Aux Vars#referenceText}</ReferenceText>
        </Options>
        <EmailAddress>${Property - Aux Vars#email}</EmailAddress>
        <IPAddress>${Property - Aux Vars#ip}</IPAddress>
        <CCNumerics>
          <CCNumeric>${Property - Aux Vars#ccNum1}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum2}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum3}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum4}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum5}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum6}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum7}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum8}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum9}</CCNumeric>
          <CCNumeric>${Property - Aux Vars#ccNum10}</CCNumeric>
        </CCNumerics>
        <CCStrings>
          <CCString>${Property - Aux Vars#ccString1}</CCString>
          <CCString>${Property - Aux Vars#ccString2}</CCString>
          <CCString>${Property - Aux Vars#ccString3}</CCString>
          <CCString>${Property - Aux Vars#ccString4}</CCString>
          <CCString>${Property - Aux Vars#ccString5}</CCString>
        </CCStrings>
      </CustomerManagement>
    </Products>
  </Request>
</Experian>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode" disabled="true">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="6d476ee7-b7f6-4072-8f53-963f004c7212" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def demoFirstInquiryResponse = context.expand('${REST Request - Demo First Inquiry#Response}')

def Experian = new XmlSlurper().parseText(demoFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - Demo First Inquiry") 

if ( Experian.Response.Products.CustomerManagement.ScoreResults.Score.text() == '9999' ){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag does not exists in Demo Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag does not exists in Demo Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Version> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Version[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;PrimaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;SecondaryResponseCode> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ResponseCodeDesc> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ReferenceText> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Content Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2>  Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Code Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code,"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1]/@code}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[6]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[6]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[7]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[7]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[8]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[8]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[9]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[9]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCNumerics>&lt;CCNumeric[10]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCNumerics[1]/ns1:CCNumeric[10]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[1]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[1]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[2]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[2]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[3]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[3]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[4]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[4]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;CCStrings>&lt;CCString[5]> Comparison Between STG and Demo Responses">
              <con:configuration>
                <path>declare namespace ns1='';
concat(//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text(),"")</path>
                <content>${REST Request - STG First Inquiry#Response#declare namespace ns1='';//ns1:CustomerManagement[1]/ns1:CCStrings[1]/ns1:CCString[5]/text()}</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag does not exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="b59e2898-bd91-4241-8e3a-7e2aaad7508c" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in Demo Response">
              <con:configuration>
                <path>declare namespace ns1='';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username/>
              <con:password/>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Save Request And Response from Demo First Inquiry" id="c7807a2e-f075-4b13-9093-66122573f746" disabled="true">
        <con:settings/>
        <con:config>
          <script>/*
import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender
*/

def date = new Date().format("yyyy-MM-dd_hh-mm-ss")
def myTestCase = context.testCase //myTestCase contains the test case
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directoryDemoFirstInquiryRequest = propTestStep.getPropertyValue("directoryDemoFirstInquiryRequest")
def directoryDemoFirstInquiryResponse = propTestStep.getPropertyValue("directoryDemoFirstInquiryResponse")
def reference = propTestStep.getPropertyValue("referenceText")
//def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directoryDemoFirstInquiryRequest+reference+"_Demo First Inquiry_"+date+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - Demo First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directoryDemoFirstInquiryResponse+reference+"_Demo First Inquiry_"+date+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - Demo First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RQST_LOG" id="26836ef0-3b7f-45e6-b9ca-0df4898c53ba" disabled="true">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_rqst_log_${#Project#CurYear}_${#Project#CurMonth}
Where cm_trans_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1=''; //ns1:Experian[1]/ns1:Response[1]/ns1:Products[1]/ns1:CustomerManagement[1]/ns1:TransactionID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_RESP_LOG" id="c478cf89-d040-48f5-abe9-b8b744f7aeac" disabled="true">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_resp_log_${#Project#CurYear}_${#Project#CurMonth}
Where cm_trans_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - STAT_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.STAT_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#STAT_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1=''; //ns1:Experian[1]/ns1:Response[1]/ns1:Products[1]/ns1:CustomerManagement[1]/ns1:TransactionID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Check CM_SCORE_TRAGG_LOG" id="02a9e968-4f02-4f07-9dad-4005bea1e61f" disabled="true">
        <con:settings>
          <con:setting id="discardResponse">false</con:setting>
        </con:settings>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>Select *
From fcr001.cm_score_tragg_log_${#Project#CurYear}_${#Project#CurMonth}
Where cm_trans_id = :ReviewReferenceID</con:query>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Match Code INV_LOG.MON_2040_ADVRSN_CD" disabled="true">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/INV_LOG.MON_2040_ADVRSN_CD[1]/text(),""))</path>
              <content>${Properties - Aux Vars#MON_2040_ADVRSN_CD_INV_LOG}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="96ea0412-9d1a-4db0-9d92-2574c4177811" name="Xpath - Count">
            <con:configuration>
              <path>concat(//Results[1]/ResultSet[1]/Row[1]/@rowNumber,"")</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:assertion type="XPath Match" id="ce38fabb-4a3b-4926-a391-769efb6ad3b9" name="Xpath - Premier Attribute">
            <con:configuration>
              <path>normalize-space(concat(//Results[1]/ResultSet[1]/Row[1]/CM_SCORE_TRAGG_LOG_${#Project#CurYear}_${#Project#CurMonth}.PA_GLBDECS[1]/text(),""))</path>
              <content>${Property - Aux Vars#cm_score_tragg}</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>ReviewReferenceID</con:name>
              <con:value>${REST Request - STG First Inquiry#Response#declare namespace ns1=''; //ns1:Experian[1]/ns1:Response[1]/ns1:Products[1]/ns1:CustomerManagement[1]/ns1:TransactionID[1]}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Error List" id="b97212b5-fec2-46b7-b2f6-993de3ae1b10" disabled="true">
        <con:settings/>
        <con:config>
          <script>def date = new Date().format("yyyy-MM-dd hh_mm_ss")

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep object

def stgFirstInquiry = testRunner.testCase.testSteps["REST Request - STG First Inquiry"]

def demoFirstInquiry = testRunner.testCase.testSteps["REST Request - Demo First Inquiry"]

def checkDB1 = testRunner.testCase.testSteps["Check CM_RQST_LOG"]
def checkDB2 = testRunner.testCase.testSteps["Check CM_RESP_LOG"]
def checkDB3 = testRunner.testCase.testSteps["Check CM_SCORE_TRAGG_LOG"]

def isError = false
def errorStringMessage = propTestStep.getPropertyValue("referenceText").toString()+"\n\n"
propTestStep.setPropertyValue("errorDetected","N")
propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)

for( assertion in stgFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - STAGING FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - STAGING FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}

for( assertion in demoFirstInquiry.assertionList ){
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - - DEMO FIRST INQUIRY ERROR START - - - -"+assertion.name+" - - - - -"+assertion.errors.toString()+"- - - DEMO FIRST INQUIRY ERROR END - - - - "
		propTestStep.setPropertyValue("errorDetected","Y")
	}	
}
for( assertion in checkDB1.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RQST_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB2.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_RESP_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}
for( assertion in checkDB3.assertionList )
{
	for( e in assertion.errors ){
		isError = true
		errorStringMessage = errorStringMessage +"\n\n"+"- - -CM_SCORE_TRAGG_LOG ERROR START - - - -"+assertion.errors.toString()+"- - -ERROR END - - - -"
		propTestStep.setPropertyValue("errorDetected","Y")	
	}
	
}


def directoryCompareResults = context.expand( '${Property - Aux Vars#directoryCompareResults}' )
def reference = context.expand( '${Property - Aux Vars#referenceText}' )

if (isError == false ){
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Successful_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("Comparison Performed - No differences", "UTF-8")
}else{
	// Write Comparison Errors to txt file 
	def comparisonResultsFile = directoryCompareResults+reference+"_Comparison Errors_"+date+".txt" 
	def req = new File(comparisonResultsFile)
	req.write("ERROR LIST STARTS \n\n", "UTF-8")
	req.append(errorStringMessage, "UTF-8")
	req.append("\n\nERROR LIST ENDS", "UTF-8")
	propTestStep.setPropertyValue("errorStringMessage",errorStringMessage)
}

return errorStringMessage</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Upload Result" id="f95e8e2b-fb4a-4fdc-9d14-7adbba47c385" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.XmlUtil
import groovy.io.FileType
import jxl.*
import jxl.write.*

def myTestCase = context.testCase //myTestCase contains the test case
def propTestStep = myTestCase.getTestStepByName("Property - Aux Vars")


///Obtain XML Name from data sheet 
def workbookLocation = testRunner.testCase.testSuite.getPropertyValue("testCasesWorkbookLocation")

Workbook workbook1 = Workbook.getWorkbook(new File(workbookLocation)) //file containing the data

def sheetName = workbook1.getSheetNames()

def XMLName = "Strategy "+sheetName[1]

workbook1.close() //close the file
//////////

propTestStep.setPropertyValue("runID", testRunner.testCase.testSuite.project.testSuites["IEN Regression"].getPropertyValue("IENTestRunID") )
def IENRailRefIDFolder = testRunner.testCase.testSuite.getPropertyValue( "IENTestRailRefIDFolder")
def testRailRefIDXMLMap = IENRailRefIDFolder+XMLName+'_TestRail Reference.xml'

//def xmlIdMap = new File('C:\\SoapUI\\Test Data\\PM SSN V4\\TestRail Reference ID\\SSN SSN RC TestRail Ref.xml')
def xmlIdMap = new File(testRailRefIDXMLMap)
def root = new XmlSlurper().parse(xmlIdMap)

def testReference = propTestStep.getPropertyValue("referenceText").toString()


root.caseNumber.each {
	if("${it.ReferenceNumber.text()}" == testReference ){
		log.info "conseguido"
		propTestStep.setPropertyValue("testRailID", "${it.TestRailsID.text()}" )
		}
}

//CHECK IF THE EXPECTED RESULT MATCHES THE CURRENT RESULT

def isError = propTestStep.getPropertyValue("errorDetected")
def errorStringMessage = propTestStep.getPropertyValue("errorStringMessage")

propTestStep.setPropertyValue("errorStringPrueba", errorStringMessage )

errorStringMessage = errorStringMessage.replaceAll('"','\\\\"')
errorStringMessage = errorStringMessage.replaceAll('\n','\\\\n')
log.info errorStringMessage
propTestStep.setPropertyValue("errorStringPruebaFormateado", errorStringMessage )

if ( isError == "N" ) {
	//log.info "VALsasasasaIDO"
	propTestStep.setPropertyValue("testStatus", "1")
	propTestStep.setPropertyValue("testComment", "This test passed")
	
}else{
	//log.info "sdsdsadsadfsdfsdfsdfsd"
	propTestStep.setPropertyValue("testStatus", "5")
	//propTestStep.setPropertyValue("testComment", "This test failed")
	propTestStep.setPropertyValue("testComment", errorStringMessage)
	
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - Upload Results" id="00bae0b1-58ed-48a1-95fa-b6371f32b1ed" disabled="true">
        <con:settings/>
        <con:config service="http://testrail-gsg.experian.local" resourcePath="/index.php?/api/v2/add_result_for_case/{runID}/{CaseID}" methodName="Add Result For Case" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - Upload Results" id="6ed46e89-69f4-4e92-b405-00a8e19c7c1c" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>http://testrail-gsg.experian.local</con:endpoint>
            <con:request>{
	"status_id": " ${Property - Aux Vars#testStatus} ",
	"comment": "${Property - Aux Vars#testComment}",
	"elapsed": "1s",
	"defects": "",
	"version": "soapUIdemo"
}</con:request>
            <con:originalUri>https://testrail.uat.uk.experian.local/index.phpapi/v2/add_result/</con:originalUri>
            <con:credentials>
              <con:username>${#Project#TestRailID}</con:username>
              <con:password>${#Project#TestRailPwd}</con:password>
              <con:domain>https://testrail.uat.uk.experian.local</con:domain>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:preemptive>true</con:preemptive>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="CaseID" value="${Property - Aux Vars#testRailID}"/>
              <con:entry key="runID" value="${Property - Aux Vars#runID}"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>CaseID</con:entry>
              <con:entry>runID</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="a2d477b6-f3af-43fd-9e00-be56d9f017f9">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Aux Vars") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Rollback STG IEN Client Profile" id="103498e0-ee93-4a93-8971-3f794af2a693">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set new_attr_in='N', suppress_pii_in='N'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Aux Vars" id="bc8360f0-047c-4255-8c6e-621c7c26643b">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>excelSheetName</con:name>
              <con:value>117</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>92</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>month</con:name>
              <con:value>02</con:value>
            </con:property>
            <con:property>
              <con:name>day</con:name>
              <con:value>19</con:value>
            </con:property>
            <con:property>
              <con:name>year</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value>1957</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>17</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>generalDirectory</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTG</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\STG\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\STG\\STG First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\STG\\STG First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\STG\\STG Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directorySTGAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\STG\\STG Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemo</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\Demo\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\Demo\\Demo First Inquiry Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoFirstInquiryResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\Demo\\Demo First Inquiry Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsRequest</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\Demo\\Demo Answer Questions Request\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryDemoAnswerQuestionsResponse</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\Demo\\Demo Answer Questions Response\</con:value>
            </con:property>
            <con:property>
              <con:name>directoryCompareResults</con:name>
              <con:value>C:\SoapUI\Test Response\IEN New Model\20190130_13-51-39\Strategy 103\\Comparison Results\</con:value>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorStringPrueba</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>errorStringMessage</con:name>
              <con:value><![CDATA[001-AS30000051775



- - - DEMO FIRST INQUIRY ERROR START - - - -CompletionCode - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] in Response]- - - DEMO FIRST INQUIRY ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -CompletionCode - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Version> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Version[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <PrimaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:PrimaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <SecondaryResponseCode> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:SecondaryResponseCode[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ResponseCodeDesc> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ResponseCodeDesc[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ReferenceText> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ReferenceText[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <ScoreResults><Score> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes01Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes03Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes07Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes21Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes28Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - - 

- - - RESPONSES COMPARISON ERROR START - - - -XPath Match - <Attributes><Attributes90Day> - - - - -[XPathContains assertion failed for path [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] : Exception:Missing content for xpath [declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text()] in Response]- - - RESPONSES COMPARISON ERROR END - - - -]]></con:value>
            </con:property>
            <con:property>
              <con:name>errorStringPruebaFormateado</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>cm_score_tragg</con:name>
              <con:value>-1</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>excelSheetNumber</con:name>
          <con:value>15</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="036b6332-2544-41d2-8fe5-84f0a4259384" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 118 - Score, Score Factors and Attributes" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Response Folder" id="1fbfc675-75b3-4617-b980-56c7cc124814">
        <con:settings/>
        <con:config>
          <script>def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy 118\\"
new File(directory).mkdir()
return directory</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="STG Folder" id="318f456e-1d86-4bf1-8fe9-b45a476137ea">
        <con:settings/>
        <con:config>
          <script>def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy 118\\STG\\"
new File(directory).mkdir()
return directory</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Demo Folder" id="0ac3c8a6-4bcf-472f-ab2e-136d6c830a3f" disabled="true">
        <con:settings/>
        <con:config>
          <script>def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy 116\\Demo\\"
new File(directory).mkdir()
return directory</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="6a4db9ba-26a7-4e99-b138-4a062bead30e">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='3'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="e60a2420-b5d2-4ec7-8d67-48216e0dc7c0">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='118'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="IEN cache refresh - STG" id="c870a42e-6d77-4b2b-bd73-128d409c856d">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="IEN cache refresh - STG" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="7dcff2c8-4639-449f-b93b-44e961fa3825" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='114'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="IEN cache refresh - Demo" id="d357d953-2f62-4681-841f-4c7049559117" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="IEN cache refresh - Demo" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="dda128ac-deca-4788-92c9-9cdc5c976551">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Looper")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="47fbc282-4590-4a96-8857-cab4bb264f33">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
 
def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\Custom Model Test Case - Clarity (Strategy 116).xls")) //file containing the data

Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\Custom Model Test Case - Strategy 118.xls")) //file containing the data

Sheet sheet1 = workbook1.getSheet(0) //save the first sheet in sheet1
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set
 
propTestStep = myTestCase.getTestStepByName("Property - Looper") // get the Property TestStep object
 
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = (counter > size-2? 1: counter+1) //set the next value
 
// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter+1 == size-1)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Looper" id="158bddc8-03b3-48c9-b605-8c647d2f0cac">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>6992670</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>3</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>cc</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value>TURBOTAX</con:value>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value>11111</con:value>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value>A</con:value>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value>2.00</con:value>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value>5</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>545</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="77b09ae0-cf66-4dbb-a727-68904e2ef966">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Looper#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Looper#lastName}</Surname>
						<First>${Property - Looper#firstName}</First>
						<Middle>${Property - Looper#middleName}</Middle>
						<Gen>${Property - Looper#gen}</Gen>
					</Name>
					<SSN>${Property - Looper#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Looper#address}</Street>
						<City>${Property - Looper#city}</City>
						<State>${Property - Looper#state}</State>
						<Zip>${Property - Looper#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Looper#dlState}</State>
						<Number>${Property - Looper#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Looper#phone}</Number>
					</Phone>
					<DOB>${Property - Looper#dob}</DOB>
					<YOB>${Property - Looper#yob}</YOB>
					<EmailAddress>${Property - Looper#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Looper#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Looper#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Looper#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Looper#ccString1}</CCString>
	                    <CCString>${Property - Looper#ccString2}</CCString>
	                    <CCString>${Property - Looper#ccString3}</CCString>
	                    <CCString>${Property - Looper#ccString4}</CCString>
	                    <CCString>${Property - Looper#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Looper#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="ff671ea0-33a7-4480-b65e-f364b63127ab" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 1" id="e53e6331-991b-4546-8113-3f0376123617">
        <con:settings/>
        <con:config>
          <script>import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directory = context.expand( '${STG Folder#result}' )
def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directory+reference+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directory+reference+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

return</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer 1" id="9e122390-6566-434a-84b9-5841a1d1817a" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true">
            <con:name>SessionID</con:name>
            <con:sourceType xsi:nil="true"/>
            <con:sourceStep>REST Request - STG First Inquiry</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>STG-Inquiry 3</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STG-Inquiry 3" id="ff7b4885-03cb-43bf-953d-823103b513a8" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STG-Inquiry 3" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<KBAAnswers>
					<OutWalletAnswerData>
						<SessionID>ARIVRXGUJKMVQTYCNPDMUQ3O.preciseId4-1808201343370170158567069</SessionID>
						<OutWalletAnswers>
							<OutWalletAnswer1>1</OutWalletAnswer1>
							<OutWalletAnswer2>1</OutWalletAnswer2>
							<OutWalletAnswer3>1</OutWalletAnswer3>
							<OutWalletAnswer4>1</OutWalletAnswer4>
							<OutWalletAnswer5>1</OutWalletAnswer5>
							<OutWalletAnswer6>1</OutWalletAnswer6>
							<OutWalletAnswer7>1</OutWalletAnswer7>
							<OutWalletAnswer8>1</OutWalletAnswer8>
						</OutWalletAnswers>
					</OutWalletAnswerData>
				</KBAAnswers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 2" id="cf29e4fd-7479-4e98-b780-8427ba4ed9b6" disabled="true">
        <con:settings/>
        <con:config>
          <script>def directory = context.expand( '${STG Folder#result}' )
def reference = context.expand( '${STG-Inquiry 1#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )
// Write Request to XMl File 
def myXmlRequest = directory+reference+"_KBA_Answer_Request.xml" 
def req = new File(myXmlRequest)
def request = context.expand('${STG-Inquiry 3#Request}')  
req.append(request, "UTF-8")
// Write Response to XMl File 
def myXmlResponse = directory+reference+"_KBA_Answer_Response.xml" 
def res = new File(myXmlResponse)
def response = context.expand('${STG-Inquiry 3#Response}')  
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Demo-Inquiry 1" id="eefa2c60-be65-4e90-b62f-06ba7faece0f" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Demo-Inquiry 1" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Looper#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Looper#lastName}</Surname>
						<First>${Property - Looper#firstName}</First>
						<Middle>${Property - Looper#middleName}</Middle>
						<Gen>${Property - Looper#gen}</Gen>
					</Name>
					<SSN>${Property - Looper#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Looper#address}</Street>
						<City>${Property - Looper#city}</City>
						<State>${Property - Looper#state}</State>
						<Zip>${Property - Looper#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Looper#dlState}</State>
						<Number>${Property - Looper#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Looper#phone}</Number>
					</Phone>
					<DOB>${Property - Looper#dob}</DOB>
					<YOB>${Property - Looper#yob}</YOB>
					<EmailAddress>${Property - Looper#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Looper#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Looper#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Looper#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Looper#ccString1}</CCString>
	                    <CCString>${Property - Looper#ccString2}</CCString>
	                    <CCString>${Property - Looper#ccString3}</CCString>
	                    <CCString>${Property - Looper#ccString4}</CCString>
	                    <CCString>${Property - Looper#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Looper#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 3" id="916cd073-7e5e-4b5d-bc74-6a5b1509fd41" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directory = context.expand( '${Demo Folder#result}' )
def reference = context.expand( '${Demo-Inquiry 1#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directory+reference+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${Demo-Inquiry 1#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directory+reference+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${Demo-Inquiry 1#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

return</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer 2" id="742a50f3-e7ea-47d5-9eb3-0dd61715719d" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Demo-Inquiry 1</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>Demo-Inquiry 3</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Demo-Inquiry 3" id="ccb2e3de-ba83-48d0-a545-b17489bea351" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Demo-Inquiry 3" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<KBAAnswers>
					<OutWalletAnswerData>
						<SessionID>AFH6KSKL0HSGFONQH3YYJ43K.pidd1v-1808201344150210012964643</SessionID>
						<OutWalletAnswers>
							<OutWalletAnswer1>1</OutWalletAnswer1>
							<OutWalletAnswer2>1</OutWalletAnswer2>
							<OutWalletAnswer3>1</OutWalletAnswer3>
							<OutWalletAnswer4>1</OutWalletAnswer4>
							<OutWalletAnswer5>1</OutWalletAnswer5>
							<OutWalletAnswer6>1</OutWalletAnswer6>
							<OutWalletAnswer7>1</OutWalletAnswer7>
							<OutWalletAnswer8>1</OutWalletAnswer8>
						</OutWalletAnswers>
					</OutWalletAnswerData>
				</KBAAnswers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 4" id="dd272f79-065b-44c5-b6cc-33a5796b7b46" disabled="true">
        <con:settings/>
        <con:config>
          <script>def directory = context.expand( '${Demo Folder#result}' )
def reference = context.expand( '${Demo-Inquiry 1#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )
// Write Request to XMl File 
def myXmlRequest = directory+reference+"_KBA_Answer_Request.xml" 
def req = new File(myXmlRequest)
def request = context.expand('${Demo-Inquiry 3#Request}')  
req.append(request, "UTF-8")
// Write Response to XMl File 
def myXmlResponse = directory+reference+"_KBA_Answer_Response.xml" 
def res = new File(myXmlResponse)
def response = context.expand('${Demo-Inquiry 3#Response}')  
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="fe996224-a74e-4f12-8a58-1873e7ee7edf">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Looper") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>6992670</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:testCase id="08ce377f-a125-4140-a26e-c39291779b9f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Strategy 119 - Score, Score Factors and Attributes" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Response Folder" id="72d7e508-102b-48d4-b893-24370834d72f">
        <con:settings/>
        <con:config>
          <script>def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy 119\\"
new File(directory).mkdir()
return directory</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="STG Folder" id="a793af03-d12e-4782-a7cb-605b2cdf14d4">
        <con:settings/>
        <con:config>
          <script>def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy 119\\STG\\"
new File(directory).mkdir()
return directory</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Demo Folder" id="e7dfeb13-e037-4f54-aaca-c97c371f94ae" disabled="true">
        <con:settings/>
        <con:config>
          <script>def directory = testRunner.testCase.testSuite.getTestCaseByName("Set Response Folder").getTestStepByName("Response Folder").getPropertyValue("result")+"Strategy 116\\Demo\\"
new File(directory).mkdir()
return directory</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG PID Client Profile" id="74450b6a-d292-41a5-8d53-68ace414ef18">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update pir001.client_profile
set smartchek_in='Y', pid_model_ty='J2', eda_fall_thru_in='N', 
ckpt_profl_id='MK169CD'
where sub_cd='${#TestCase#subcode}' and prod_opt='17'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update STG IEN Client Profile" id="c4ce6454-ca26-40db-ba21-2bf95a009706">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcr001.cm_client_profile
set cm_strategy='119'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="IEN cache refresh - STG" id="e4438002-5ea2-44f9-a1da-6641ca3e34bb">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="IEN cache refresh - STG" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.0.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.65.17:5013/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="Simple Contains" id="c76f864b-58d7-42f1-a47d-b8e417e9301e" name="Contains">
            <con:configuration>
              <token>Success</token>
              <ignoreCase>true</ignoreCase>
              <useRegEx>false</useRegEx>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="JDBC Request - Update Demo IEN Client Profile" id="a7db8e33-6802-42c4-a316-1e54d23360a9" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
          <con:connectionString>${#Project#ConnectionString}</con:connectionString>
          <con:query>update fcc001.cm_client_profile
set cm_strategy='114'
where sub_cd='${#TestCase#subcode}' and prod_opt='${#TestCase#ien_po}'</con:query>
          <con:assertion type="JDBC Status" id="6cdbe443-9fe1-4193-aff8-3eee8e94959b" name="JDBC Status"/>
          <con:properties/>
        </con:config>
      </con:testStep>
      <con:testStep type="httprequest" name="IEN cache refresh - Demo" id="bd11c3c1-5769-4ddc-9469-30f5d50d69c0" disabled="true">
        <con:settings/>
        <con:config method="POST" xsi:type="con:HttpRequest" id="b7b4d7b7-1f99-4403-94f5-f78d3bae896c" name="IEN cache refresh - Demo" postQueryString="false" mediaType="application/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="ct-remote-user" value="mudumba"/>
  &lt;con:entry key="Client-Server-IP" value="10.10.6.210"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>http://10.8.112.21:5081/fraudsolutions/pidcm/updateCache/ALL</con:endpoint>
          <con:request/>
          <con:assertion type="XPath Match" id="4a803b2f-465e-4ad5-b8f9-0cf7850ef2fc" name="responsecode">
            <con:configuration>
              <path>//BroadcastResult[1]/Response[2]/url-open[1]/responsecode[1]</path>
              <content>200</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              <ignoreComments>false</ignoreComments>
            </con:configuration>
          </con:assertion>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - Clear Properties" id="ee4cab77-666a-48d6-aa41-40fd34a25ef7">
        <con:settings/>
        <con:config>
          <script>//CLEAR THE PROPERTIES VALUES FOR A NEW RUN.
//IF YOU WANT TO CONTINUE A RUN, DISABLE THIS STEP

def myTestCase = context.testCase 
def propTestStep = myTestCase.getTestStepByName("Property - Looper")

propTestStep.setPropertyValue("Total", "" )
propTestStep.setPropertyValue("Count", "0" )
propTestStep.setPropertyValue("resultCode", "" )


propTestStep.setPropertyValue("Next", "" )
propTestStep.setPropertyValue("StopLoop", "F" )
propTestStep.setPropertyValue("referenceText", "" )
propTestStep.setPropertyValue("testStatus", "" )
propTestStep.setPropertyValue("testComment", "" )
propTestStep.setPropertyValue("testRailID", "" )
propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("testResponseTime", "" )
propTestStep.setPropertyValue("errorString", "" )

propTestStep.setPropertyValue("runID", "" )
propTestStep.setPropertyValue("errorDetected", "N" )</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource" id="ac94453d-1324-4cb8-9ef8-43cc3a77abec">
        <con:settings/>
        <con:config>
          <script>// IMPORT THE LIBRARIES WE NEED
 
import com.eviware.soapui.support.XmlHolder
 
import jxl.*
 
import jxl.write.*
 
// DECLARE THE VARIABLES
 
def myTestCase = context.testCase //myTestCase contains the test case
 
def counter,next,previous,size //Variables used to handle the loop and to move inside the file
 
//Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\Custom Model Test Case - Clarity (Strategy 116).xls")) //file containing the data

Workbook workbook1 = Workbook.getWorkbook(new File("C:\\SoapUI\\Test Data\\IEN Regression\\Custom Model Test Case - Strategy 119.xls")) //file containing the data

Sheet sheet1 = workbook1.getSheet(0) //save the first sheet in sheet1
 
size= sheet1.getRows().toInteger() //get the number of rows, each row is a data set
 
propTestStep = myTestCase.getTestStepByName("Property - Looper") // get the Property TestStep object
 
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString() //counter variable contains iteration number
 
counter = counter.toInteger() //
 
next = (counter > size-2? 1: counter+1) //set the next value
 
// OBTAINING THE DATA YOU NEED
 
Cell a = sheet1.getCell(3,counter+1) // getCell(column,row) //obtains REFERENCE NUM
 
Cell b = sheet1.getCell(6,counter+1) // obtains FIRST NAME

Cell c = sheet1.getCell(7,counter+1) // obtains MIDDLE NAME

Cell d = sheet1.getCell(8,counter+1) // obtains LAST NAME

Cell e = sheet1.getCell(9,counter+1) // obtains GEN

Cell f = sheet1.getCell(10,counter+1) // obtains SSN

Cell g = sheet1.getCell(11,counter+1) // obtains ADDRESS

Cell h = sheet1.getCell(12,counter+1) // obtains CITY

Cell i = sheet1.getCell(13,counter+1) // obtains STATE

Cell j = sheet1.getCell(14,counter+1) // obtains ZIP

Cell k = sheet1.getCell(15,counter+1) // obtains DOB

Cell l = sheet1.getCell(16,counter+1) // obtains YOB

Cell m = sheet1.getCell(18,counter+1) // obtains DL STATE

Cell n = sheet1.getCell(19,counter+1) // obtains DL NUM

Cell o = sheet1.getCell(17,counter+1) // obtains PHONE

Cell p = sheet1.getCell(4,counter+1) // obtains SUBCODE

Cell q = sheet1.getCell(5,counter+1) // obtains PO

Cell r = sheet1.getCell(20,counter+1) // obtains Email

Cell s = sheet1.getCell(21,counter+1) // obtains IP

Cell aa = sheet1.getCell(23,counter+1) // obtains CCNumeric1

Cell ab = sheet1.getCell(24,counter+1) // obtains CCNumeric2

Cell ac = sheet1.getCell(25,counter+1) // obtains CCNumeric3

Cell ad = sheet1.getCell(26,counter+1) // obtains CCNumeric4

Cell ae = sheet1.getCell(27,counter+1) // obtains CCNumeric5

Cell af = sheet1.getCell(28,counter+1) // obtains CCNumeric6

Cell ag = sheet1.getCell(29,counter+1) // obtains CCNumeric7

Cell ah = sheet1.getCell(30,counter+1) // obtains CCNumeric8

Cell ai = sheet1.getCell(31,counter+1) // obtains CCNumeric9

Cell aj = sheet1.getCell(32,counter+1) // obtains CCNumeric10

Cell ak = sheet1.getCell(33,counter+1) // obtains CCString1

Cell al = sheet1.getCell(34,counter+1) // obtains CCString2

Cell am = sheet1.getCell(35,counter+1) // obtains CCString3

Cell an = sheet1.getCell(36,counter+1) // obtains CCString4

Cell ao = sheet1.getCell(37,counter+1) // obtains CCString5
 
workbook1.close() //close the file
 
////////////////////////////////////
 
referenceText = a.getContents()
 
firstName = b.getContents()

middleName = c.getContents()

lastName = d.getContents()

gen = e.getContents()

ssn = f.getContents()

address = g.getContents()

city = h.getContents()

state = i.getContents()

zip = j.getContents()

dob = k.getContents()

yob = l.getContents()

dlState = m.getContents()

dlNumber = n.getContents()

phone = o.getContents()

subcode = p.getContents()

po = q.getContents()

email = r.getContents()

ip = s.getContents()

ccNum1 = aa.getContents()

ccNum2 = ab.getContents()

ccNum3 = ac.getContents()

ccNum4 = ad.getContents()

ccNum5 = ae.getContents()

ccNum6 = af.getContents()

ccNum7 = ag.getContents()

ccNum8 = ah.getContents()

ccNum9 = ai.getContents()

ccNum10 = aj.getContents()

ccString1 = ak.getContents()

ccString2 = al.getContents()

ccString3 = am.getContents()

ccString4 = an.getContents()

ccString5 = ao.getContents()
 
propTestStep.setPropertyValue("referenceText", referenceText) //the value is saved in the property
 
propTestStep.setPropertyValue("firstName", firstName)

propTestStep.setPropertyValue("middleName", middleName)

propTestStep.setPropertyValue("lastName", lastName)

propTestStep.setPropertyValue("gen", gen)

propTestStep.setPropertyValue("ssn", ssn)

propTestStep.setPropertyValue("address", address)

propTestStep.setPropertyValue("city", city)

propTestStep.setPropertyValue("state", state)

propTestStep.setPropertyValue("zip", zip)

propTestStep.setPropertyValue("dob", dob)

propTestStep.setPropertyValue("yob", yob)

propTestStep.setPropertyValue("dlState", dlState)

propTestStep.setPropertyValue("dlNumber", dlNumber)

propTestStep.setPropertyValue("phone", phone)

propTestStep.setPropertyValue("subcode", subcode)

propTestStep.setPropertyValue("po", po)

propTestStep.setPropertyValue("email", email)

propTestStep.setPropertyValue("ip", ip)

propTestStep.setPropertyValue("ccNum1", ccNum1)

propTestStep.setPropertyValue("ccNum2", ccNum2)

propTestStep.setPropertyValue("ccNum3", ccNum3)

propTestStep.setPropertyValue("ccNum4", ccNum4)

propTestStep.setPropertyValue("ccNum5", ccNum5)

propTestStep.setPropertyValue("ccNum6", ccNum6)

propTestStep.setPropertyValue("ccNum7", ccNum7)

propTestStep.setPropertyValue("ccNum8", ccNum8)

propTestStep.setPropertyValue("ccNum9", ccNum9)

propTestStep.setPropertyValue("ccNum10", ccNum10)

propTestStep.setPropertyValue("ccString1", ccString1)

propTestStep.setPropertyValue("ccString2", ccString2)

propTestStep.setPropertyValue("ccString3", ccString3)

propTestStep.setPropertyValue("ccString4", ccString4)

propTestStep.setPropertyValue("ccString5", ccString5)
 
propTestStep.setPropertyValue("Count", next.toString()) //increase Count value
 
next++ //increase next value
 
propTestStep.setPropertyValue("Next", next.toString()) //set Next value on the properties step
 
//Decide if the test has to be run again or not
 
if (counter+1 == size-1)
 
{
 
propTestStep.setPropertyValue("StopLoop", "T")
 
log.info "Setting the stoploop property now..."
 
}
 
else if (counter==0)
 
{
 
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}
 
else
 
{
 
propTestStep.setPropertyValue("StopLoop", "F")
 
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Property - Looper" id="9ef68e4e-bdbe-4689-9d6f-2bb9bdfb9ea0">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>referenceText</con:name>
              <con:value>001-AS30000051775</con:value>
            </con:property>
            <con:property>
              <con:name>subcode</con:name>
              <con:value>7999521</con:value>
            </con:property>
            <con:property>
              <con:name>po</con:name>
              <con:value>17</con:value>
            </con:property>
            <con:property>
              <con:name>firstName</con:name>
              <con:value>JOHN</con:value>
            </con:property>
            <con:property>
              <con:name>middleName</con:name>
              <con:value>WAKEFIELD</con:value>
            </con:property>
            <con:property>
              <con:name>lastName</con:name>
              <con:value>BREEN</con:value>
            </con:property>
            <con:property>
              <con:name>gen</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ssn</con:name>
              <con:value>666436878</con:value>
            </con:property>
            <con:property>
              <con:name>address</con:name>
              <con:value>PO BOX 445</con:value>
            </con:property>
            <con:property>
              <con:name>city</con:name>
              <con:value>APO</con:value>
            </con:property>
            <con:property>
              <con:name>state</con:name>
              <con:value>AE</con:value>
            </con:property>
            <con:property>
              <con:name>zip</con:name>
              <con:value>09061</con:value>
            </con:property>
            <con:property>
              <con:name>dob</con:name>
              <con:value>02191957</con:value>
            </con:property>
            <con:property>
              <con:name>yob</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>phone</con:name>
              <con:value>7818945369</con:value>
            </con:property>
            <con:property>
              <con:name>dlState</con:name>
              <con:value>VT</con:value>
            </con:property>
            <con:property>
              <con:name>dlNumber</con:name>
              <con:value>71674355</con:value>
            </con:property>
            <con:property>
              <con:name>email</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ip</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>cc</con:name>
              <con:value xsi:nil="true"/>
            </con:property>
            <con:property>
              <con:name>ccNum1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum6</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum7</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum8</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum9</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccNum10</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString1</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString2</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString3</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString4</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>ccString5</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>545</con:value>
            </con:property>
            <con:property>
              <con:name>Count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>F</con:value>
            </con:property>
            <con:property>
              <con:name>resultCode</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testStatus</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testComment</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testRailID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>runID</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>testResponseTime</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorString</con:name>
              <con:value/>
            </con:property>
            <con:property>
              <con:name>errorDetected</con:name>
              <con:value>N</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="REST Request - STG First Inquiry" id="791a202c-7751-4f7d-b0ec-2af6f14e7ac5">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="REST Request - STG First Inquiry" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Looper#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Looper#lastName}</Surname>
						<First>${Property - Looper#firstName}</First>
						<Middle>${Property - Looper#middleName}</Middle>
						<Gen>${Property - Looper#gen}</Gen>
					</Name>
					<SSN>${Property - Looper#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Looper#address}</Street>
						<City>${Property - Looper#city}</City>
						<State>${Property - Looper#state}</State>
						<Zip>${Property - Looper#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Looper#dlState}</State>
						<Number>${Property - Looper#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Looper#phone}</Number>
					</Phone>
					<DOB>${Property - Looper#dob}</DOB>
					<YOB>${Property - Looper#yob}</YOB>
					<EmailAddress>${Property - Looper#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Looper#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Looper#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Looper#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Looper#ccString1}</CCString>
	                    <CCString>${Property - Looper#ccString2}</CCString>
	                    <CCString>${Property - Looper#ccString3}</CCString>
	                    <CCString>${Property - Looper#ccString4}</CCString>
	                    <CCString>${Property - Looper#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Looper#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="ff671ea0-33a7-4480-b65e-f364b63127ab" name="Script Assertion">
              <con:configuration>
                <scriptText><![CDATA[//////Check for IEN Score 9999 in the STG First Inquiry

def stgFirstInquiryResponse = context.expand('${REST Request - STG First Inquiry#Response}')

def NetConnectResponse = new XmlSlurper().parseText(stgFirstInquiryResponse)

def myTestStep = context.testCase.getTestStepByName("REST Request - STG First Inquiry") 

if ( NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9999' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9001' || NetConnectResponse.Products.CustomerManagement.ScoreResults.Score.text() == '9012'){

	log.info "No Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = true
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = true	
}else{

	log.info "Has Key"

	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor1> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor2> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor3> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <ScoreFactors><ScoreFactor4> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes01Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes03Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes07Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes21Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes28Day> Check if tag exists in STG Response"].disabled = false
	myTestStep.assertions["XPath Match - <Attributes><Attributes90Day> Check if tag exists in STG Response"].disabled = false	

}]]></scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes01Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes01Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes03Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes03Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes07Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes07Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes21Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes21Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes28Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes28Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1006fe4e-5a61-42b1-800e-417b4057b1e5" name="XPath Match - &lt;Attributes>&lt;Attributes90Day> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:Attributes[1]/ns1:Attributes90Day[1]/text())</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="1c191360-3f46-4023-817d-784a1d28867c" name="XPath Match - &lt;ScoreResults>&lt;Score> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:Score[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor1> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor1[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor2> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor2[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor3> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor3[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:assertion type="XPath Match" id="c8b2d991-43b3-41a4-83fa-8f21fc8c9c77" name="XPath Match - &lt;ScoreFactors>&lt;ScoreFactor4> Check if tag exists in STG Response">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
exists(//ns1:CustomerManagement[1]/ns1:ScoreResults[1]/ns1:ScoreFactors[1]/ns1:ScoreFactor4[1])</path>
                <content>true</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 1" id="fbd54290-886c-4c79-aa7b-34e52981685d">
        <con:settings/>
        <con:config>
          <script>import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directory = context.expand( '${STG Folder#result}' )
def reference = context.expand( '${REST Request - STG First Inquiry#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directory+reference+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${REST Request - STG First Inquiry#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directory+reference+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${REST Request - STG First Inquiry#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

return</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer 1" id="b3e173d0-0533-42a1-9d23-8c8fb483ac13" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false" disabled="true">
            <con:name>SessionID</con:name>
            <con:sourceType xsi:nil="true"/>
            <con:sourceStep>REST Request - STG First Inquiry</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>STG-Inquiry 3</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STG-Inquiry 3" id="655c685f-354f-4b23-bda6-08cfdffb41c5" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STG-Inquiry 3" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://stg1-ss1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<KBAAnswers>
					<OutWalletAnswerData>
						<SessionID>ARIVRXGUJKMVQTYCNPDMUQ3O.preciseId4-1808201343370170158567069</SessionID>
						<OutWalletAnswers>
							<OutWalletAnswer1>1</OutWalletAnswer1>
							<OutWalletAnswer2>1</OutWalletAnswer2>
							<OutWalletAnswer3>1</OutWalletAnswer3>
							<OutWalletAnswer4>1</OutWalletAnswer4>
							<OutWalletAnswer5>1</OutWalletAnswer5>
							<OutWalletAnswer6>1</OutWalletAnswer6>
							<OutWalletAnswer7>1</OutWalletAnswer7>
							<OutWalletAnswer8>1</OutWalletAnswer8>
						</OutWalletAnswers>
					</OutWalletAnswerData>
				</KBAAnswers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#PIDUsername}</con:username>
              <con:password>${#Project#PIDPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 2" id="e38619ad-888a-481a-85b3-c6c572a83ac8" disabled="true">
        <con:settings/>
        <con:config>
          <script>def directory = context.expand( '${STG Folder#result}' )
def reference = context.expand( '${STG-Inquiry 1#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )
// Write Request to XMl File 
def myXmlRequest = directory+reference+"_KBA_Answer_Request.xml" 
def req = new File(myXmlRequest)
def request = context.expand('${STG-Inquiry 3#Request}')  
req.append(request, "UTF-8")
// Write Response to XMl File 
def myXmlResponse = directory+reference+"_KBA_Answer_Response.xml" 
def res = new File(myXmlResponse)
def response = context.expand('${STG-Inquiry 3#Response}')  
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Demo-Inquiry 1" id="2189b400-5bce-450d-8984-8f821407ec49" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Demo-Inquiry 1" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@dump-file"/>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:encoding xsi:nil="true"/>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest>
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
	<Request>
		<Products>
			<PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<Subscriber>
					<Preamble>TCA1</Preamble>
					<OpInitials>XX</OpInitials>
					<SubCode>${Property - Looper#subcode}</SubCode>
				</Subscriber>
				<PrimaryApplicant>
					<Name>
						<Surname>${Property - Looper#lastName}</Surname>
						<First>${Property - Looper#firstName}</First>
						<Middle>${Property - Looper#middleName}</Middle>
						<Gen>${Property - Looper#gen}</Gen>
					</Name>
					<SSN>${Property - Looper#ssn}</SSN>
					<CurrentAddress>
						<Street>${Property - Looper#address}</Street>
						<City>${Property - Looper#city}</City>
						<State>${Property - Looper#state}</State>
						<Zip>${Property - Looper#zip}</Zip>
					</CurrentAddress>
					<DriverLicense>
						<State>${Property - Looper#dlState}</State>
						<Number>${Property - Looper#dlNumber}</Number>
					</DriverLicense>
					<Phone>
						<Number>${Property - Looper#phone}</Number>
					</Phone>
					<DOB>${Property - Looper#dob}</DOB>
					<YOB>${Property - Looper#yob}</YOB>
					<EmailAddress>${Property - Looper#email}</EmailAddress>
				</PrimaryApplicant>
				<Verbose>Y</Verbose>
				<Options>
					<ReferenceNumber>${Property - Looper#referenceText}</ReferenceNumber>
					<PreciseIDType>${Property - Looper#po}</PreciseIDType>
				</Options>
				<NFD>
					<NFDSubscriberNumber>200</NFDSubscriberNumber>
				</NFD>
	               <CCNumerics>
	                    <CCNumeric>${Property - Looper#ccNum1}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum2}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum3}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum4}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum5}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum6}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum7}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum8}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum9}</CCNumeric>
	                    <CCNumeric>${Property - Looper#ccNum10}</CCNumeric>
	               </CCNumerics>
	               <CCStrings>
	                    <CCString>${Property - Looper#ccString1}</CCString>
	                    <CCString>${Property - Looper#ccString2}</CCString>
	                    <CCString>${Property - Looper#ccString3}</CCString>
	                    <CCString>${Property - Looper#ccString4}</CCString>
	                    <CCString>${Property - Looper#ccString5}</CCString>
	               </CCStrings>
	               <IPAddress>${Property - Looper#ip}</IPAddress>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="24abc695-1f0b-4463-a8a0-797a888655c2" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 3" id="cb5dc1b8-1b41-4231-8c9b-4d2639bd8cfe" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.io.FileType
import org.custommonkey.xmlunit.*
import org.apache.log4j.Logger
import org.apache.log4j.PatternLayout
import org.apache.log4j.RollingFileAppender

//def basedirectory = context.expand( '${Groovy Script - Baseline Folder#result}' )
def directory = context.expand( '${Demo Folder#result}' )
def reference = context.expand( '${Demo-Inquiry 1#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )

// get the groovy logger by name
//def groovyLogger = Logger.getLogger('groovy.log')
// pattern Layout
//PatternLayout layout = new PatternLayout("%d %-5p [%c{1}] %m%n")
// create a file appender
//RollingFileAppender fileAppender = new RollingFileAppender(layout, directory+"log.txt")
//groovyLogger.addAppender(fileAppender)

// Write Request to XMl File
def myXmlRequest = directory+reference+"_Request.xml"
def req = new File(myXmlRequest)
def request = context.expand('${Demo-Inquiry 1#Request}')
req.append(request, "UTF-8")

//Compare with baseline
//def myBaseXmlRequest = basedirectory+reference+"_Request.xml"
//def testReqXML = new FileReader(myXmlRequest)
//def baseReqXML = new FileReader(myBaseXmlRequest)
//DetailedDiff myReqDiff = new DetailedDiff(new Diff(baseReqXML, testReqXML))
//List allReqDifferences = myReqDiff.getAllDifferences() 

//allReqDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

// Write Response to XMl File
def myXmlResponse = directory+reference+"_Response.xml"
def res = new File(myXmlResponse)
def response = context.expand('${Demo-Inquiry 1#Response}')
res.append(response, "UTF-8")

//Compare with baseline
//def myBaseXmlResponse = basedirectory+reference+"_Response.xml"
//def testResXML = new FileReader(myXmlResponse)
//def baseResXML = new FileReader(myBaseXmlResponse)
//DetailedDiff myResDiff = new DetailedDiff(new Diff(baseResXML, testResXML))
//List allResDifferences = myResDiff.getAllDifferences() 

//allResDifferences.each {
//	difference -> groovyLogger.info (difference)
//}

return</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer 2" id="9fdaa03b-1b7a-4921-a76b-596c3f7ff196" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>SessionID</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Demo-Inquiry 1</con:sourceStep>
            <con:sourcePath>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:Products[1]/ns1:PreciseIDServer[1]/ns1:SessionID[1]</con:sourcePath>
            <con:targetType>Request</con:targetType>
            <con:targetStep>Demo-Inquiry 3</con:targetStep>
            <con:targetPath>//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/KBAAnswers[1]/OutWalletAnswerData[1]/SessionID[1]</con:targetPath>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Demo-Inquiry 3" id="6ddfdc2a-58b6-4577-b979-2c68dc70ade1" disabled="true">
        <con:settings/>
        <con:config service="XMLGateway" resourcePath="/fraudsolutions/xmlgateway/preciseid" methodName="Preciseid" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Demo-Inquiry 3" id="80313013-fd0c-4b7c-8d67-9e3b058e7275" mediaType="text/xml" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting>
              <con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting>
              <con:setting id="discardResponse">false</con:setting>
            </con:settings>
            <con:endpoint>https://dm-sgw1.experian.com</con:endpoint>
            <con:request><![CDATA[<NetConnectRequest xsi:noNamespaceSchemaLocation="C:\Documents and Settings\at265bs\My Documents\Fraud Solutions\App - Precise ID\API\Distributed\XML Schemas\NCPreciseIDRequestV3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<EAI>11111111</EAI>
	<DBHost>PRECISE_ID_TEST</DBHost>
	<ReferenceId>${Property - Looper#referenceText}</ReferenceId>
    <Request>
        <Products>
            <PreciseIDServer>
				<XMLVersion>5</XMLVersion>
				<KBAAnswers>
					<OutWalletAnswerData>
						<SessionID>AFH6KSKL0HSGFONQH3YYJ43K.pidd1v-1808201344150210012964643</SessionID>
						<OutWalletAnswers>
							<OutWalletAnswer1>1</OutWalletAnswer1>
							<OutWalletAnswer2>1</OutWalletAnswer2>
							<OutWalletAnswer3>1</OutWalletAnswer3>
							<OutWalletAnswer4>1</OutWalletAnswer4>
							<OutWalletAnswer5>1</OutWalletAnswer5>
							<OutWalletAnswer6>1</OutWalletAnswer6>
							<OutWalletAnswer7>1</OutWalletAnswer7>
							<OutWalletAnswer8>1</OutWalletAnswer8>
						</OutWalletAnswers>
					</OutWalletAnswerData>
				</KBAAnswers>
			</PreciseIDServer>
		</Products>
	</Request>
</NetConnectRequest>]]></con:request>
            <con:originalUri>https://stg1-ss1.experian.com/securecontrol/sso_logon.html</con:originalUri>
            <con:assertion type="XPath Match" id="71216855-89dc-49ca-baa8-8e1b4a5f3c3b" name="CompletionCode">
              <con:configuration>
                <path>declare namespace ns1='http://www.experian.com/NetConnectResponse';
//ns1:NetConnectResponse[1]/ns1:CompletionCode[1]/text()</path>
                <content>0000</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
                <ignoreComments>false</ignoreComments>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:username>${#Project#DemoUsername}</con:username>
              <con:password>${#Project#DemoPassword}</con:password>
              <con:domain/>
              <con:selectedAuthProfile>Basic</con:selectedAuthProfile>
              <con:preemptive>true</con:preemptive>
              <con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes>
              <con:addedBasicAuthenticationTypes>NTLM</con:addedBasicAuthenticationTypes>
              <con:authType>Preemptive</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script 4" id="2562090c-145d-4037-986a-03efd52754b6" disabled="true">
        <con:settings/>
        <con:config>
          <script>def directory = context.expand( '${Demo Folder#result}' )
def reference = context.expand( '${Demo-Inquiry 1#Request#//NetConnectRequest[1]/Request[1]/Products[1]/PreciseIDServer[1]/Options[1]/ReferenceNumber[1]}' )
// Write Request to XMl File 
def myXmlRequest = directory+reference+"_KBA_Answer_Request.xml" 
def req = new File(myXmlRequest)
def request = context.expand('${Demo-Inquiry 3#Request}')  
req.append(request, "UTF-8")
// Write Response to XMl File 
def myXmlResponse = directory+reference+"_KBA_Answer_Response.xml" 
def res = new File(myXmlResponse)
def response = context.expand('${Demo-Inquiry 3#Response}')  
res.append(response, "UTF-8")</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Groovy Script - DataSource Loop" id="c3ef9a71-994c-4e62-a0f8-3253043e1686">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
 
propTestStep = myTestCase.getTestStepByName("Property - Looper") // get the Property TestStep
 
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
 
{
log.info ("Exit Groovy Data Source Looper")
 
assert true
 
}
 
else
 
{
 
testRunner.gotoStepByName("Groovy Script - DataSource") //setStartStep
 
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>subcode</con:name>
          <con:value>7999521</con:value>
        </con:property>
        <con:property>
          <con:name>ien_po</con:name>
          <con:value>3</con:value>
        </con:property>
      </con:properties>
    </con:testCase>
    <con:properties>
      <con:property>
        <con:name>testCasesWorkbookLocation</con:name>
        <con:value>C:\\SoapUI\\Test Data\\IEN Regression\\IEN Regression Testcases.xls</con:value>
      </con:property>
    </con:properties>
  </con:testSuite>
  <con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:endpoint mode="COMPLEMENT" domain="https://testrail-gsg.experian.local">http://testrail-gsg.experian.local</con:endpoint>
  </con:endpointStrategy>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>PIDUsername</con:name>
      <con:value>schuang_all</con:value>
    </con:property>
    <con:property>
      <con:name>PIDPassword</con:name>
      <con:value>Sctest39</con:value>
    </con:property>
    <con:property>
      <con:name>ConnectionString</con:name>
      <con:value>jdbc:db2://205.174.35.1:621/TDBQEXPA:user=MK042SC;password=p!xel123;</con:value>
    </con:property>
    <con:property>
      <con:name>CurYear</con:name>
      <con:value>${=new Date().format("yyyy")}</con:value>
    </con:property>
    <con:property>
      <con:name>CurMonth</con:name>
      <con:value>${=new Date().format("MM")}</con:value>
    </con:property>
    <con:property>
      <con:name>DemoUsername</con:name>
      <con:value>schuang_demo_pid</con:value>
    </con:property>
    <con:property>
      <con:name>DemoPassword</con:name>
      <con:value>Scdemo39</con:value>
    </con:property>
    <con:property>
      <con:name>TestRailID</con:name>
      <con:value>experian\a08131a</con:value>
    </con:property>
    <con:property>
      <con:name>TestRailPwd</con:name>
      <con:value>22Rabb1t28</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer>
    <con:databaseConnection>
      <con:name>PID STG</con:name>
      <con:driver>com.ibm.db2.jcc.DB2Driver</con:driver>
      <con:connectionString>jdbc:db2://205.174.35.1:621/TDBQEXPA:user=mk042sc;password=PASS_VALUE;</con:connectionString>
      <con:password>2Rab!t49</con:password>
    </con:databaseConnection>
  </con:databaseConnectionContainer>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
  <con:authRepository>
    <con:basicAuthEntry>
      <con:name>PID STG</con:name>
      <con:type>Basic</con:type>
      <con:username>schuang_all</con:username>
      <con:password>Sctest29</con:password>
      <con:preemptive>true</con:preemptive>
    </con:basicAuthEntry>
    <con:basicAuthEntry>
      <con:name>PID Demo</con:name>
      <con:type>Basic</con:type>
      <con:username>schuang_demo_pid</con:username>
      <con:password>Scdemo29</con:password>
      <con:preemptive>true</con:preemptive>
    </con:basicAuthEntry>
    <con:basicAuthEntry>
      <con:name>PID Prod</con:name>
      <con:type>Basic</con:type>
      <con:username>schuang_pid</con:username>
      <con:password>Scprod29</con:password>
      <con:preemptive>true</con:preemptive>
    </con:basicAuthEntry>
  </con:authRepository>
  <con:tags/>
</con:soapui-project>